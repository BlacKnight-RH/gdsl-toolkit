/*
* generated by Xtext
*/
package gdsl.plugin.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_1_1_0 = (RuleCall)cDeclAssignment_1_1.eContents().get(0);
		
		//Model:
		//	decl+=Decl (";"? decl+=Decl)*;
		public ParserRule getRule() { return rule; }

		//decl+=Decl (";"? decl+=Decl)*
		public Group getGroup() { return cGroup; }

		//decl+=Decl
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_0_0() { return cDeclDeclParserRuleCall_0_0; }

		//(";"? decl+=Decl)*
		public Group getGroup_1() { return cGroup_1; }

		//";"?
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_1_1() { return cDeclAssignment_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_1_1_0() { return cDeclDeclParserRuleCall_1_1_0; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclGranularityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclExportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeclValParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// *****************************
		//Decl:
		//	DeclGranularity | DeclExport | DeclType | DeclVal;
		public ParserRule getRule() { return rule; }

		//DeclGranularity | DeclExport | DeclType | DeclVal
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclGranularity
		public RuleCall getDeclGranularityParserRuleCall_0() { return cDeclGranularityParserRuleCall_0; }

		//DeclExport
		public RuleCall getDeclExportParserRuleCall_1() { return cDeclExportParserRuleCall_1; }

		//DeclType
		public RuleCall getDeclTypeParserRuleCall_2() { return cDeclTypeParserRuleCall_2; }

		//DeclVal
		public RuleCall getDeclValParserRuleCall_3() { return cDeclValParserRuleCall_3; }
	}

	public class DeclGranularityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclGranularity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGranularityKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGranularityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGranularityIntegerParserRuleCall_2_0 = (RuleCall)cGranularityAssignment_2.eContents().get(0);
		
		//// *****************************
		//DeclGranularity:
		//	name="granularity" "=" granularity=Integer;
		public ParserRule getRule() { return rule; }

		//name="granularity" "=" granularity=Integer
		public Group getGroup() { return cGroup; }

		//name="granularity"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"granularity"
		public Keyword getNameGranularityKeyword_0_0() { return cNameGranularityKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//granularity=Integer
		public Assignment getGranularityAssignment_2() { return cGranularityAssignment_2; }

		//Integer
		public RuleCall getGranularityIntegerParserRuleCall_2_0() { return cGranularityIntegerParserRuleCall_2_0; }
	}

	public class DeclExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclExport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameExportKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExportsExportParserRuleCall_2_0 = (RuleCall)cExportsAssignment_2.eContents().get(0);
		
		//DeclExport:
		//	name="export" "=" exports+=Export*;
		public ParserRule getRule() { return rule; }

		//name="export" "=" exports+=Export*
		public Group getGroup() { return cGroup; }

		//name="export"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"export"
		public Keyword getNameExportKeyword_0_0() { return cNameExportKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//exports+=Export*
		public Assignment getExportsAssignment_2() { return cExportsAssignment_2; }

		//Export
		public RuleCall getExportsExportParserRuleCall_2_0() { return cExportsExportParserRuleCall_2_0; }
	}

	public class DeclTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTodoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeclType:
		//	"type" name=ID "=" "todo";
		public ParserRule getRule() { return rule; }

		//"type" name=ID "=" "todo"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"todo"
		public Keyword getTodoKeyword_3() { return cTodoKeyword_3; }
	}

	public class DeclValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrIDTerminalRuleCall_2_0 = (RuleCall)cAttrAssignment_2.eContents().get(0);
		
		//DeclVal:
		//	"val" name=ID attr+=ID*;
		public ParserRule getRule() { return rule; }

		//"val" name=ID attr+=ID*
		public Group getGroup() { return cGroup; }

		//"val"
		public Keyword getValKeyword_0() { return cValKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//attr+=ID*
		public Assignment getAttrAssignment_2() { return cAttrAssignment_2; }

		//ID
		public RuleCall getAttrIDTerminalRuleCall_2_0() { return cAttrIDTerminalRuleCall_2_0; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQidParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttrNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrNameIDTerminalRuleCall_1_1_0 = (RuleCall)cAttrNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAttrNameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttrNameIDTerminalRuleCall_1_2_1_0 = (RuleCall)cAttrNameAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// *****************************
		//Export:
		//	name=Qid ("{" attrName+=ID ("," attrName+=ID)* "}")?;
		public ParserRule getRule() { return rule; }

		//name=Qid ("{" attrName+=ID ("," attrName+=ID)* "}")?
		public Group getGroup() { return cGroup; }

		//name=Qid
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Qid
		public RuleCall getNameQidParserRuleCall_0_0() { return cNameQidParserRuleCall_0_0; }

		//("{" attrName+=ID ("," attrName+=ID)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//attrName+=ID
		public Assignment getAttrNameAssignment_1_1() { return cAttrNameAssignment_1_1; }

		//ID
		public RuleCall getAttrNameIDTerminalRuleCall_1_1_0() { return cAttrNameIDTerminalRuleCall_1_1_0; }

		//("," attrName+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//attrName+=ID
		public Assignment getAttrNameAssignment_1_2_1() { return cAttrNameAssignment_1_2_1; }

		//ID
		public RuleCall getAttrNameIDTerminalRuleCall_1_2_1_0() { return cAttrNameIDTerminalRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPOSINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNEGINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Quite Terminal symbols
		//Integer:
		//	POSINT | NEGINT;
		public ParserRule getRule() { return rule; }

		//POSINT | NEGINT
		public Alternatives getAlternatives() { return cAlternatives; }

		//POSINT
		public RuleCall getPOSINTTerminalRuleCall_0() { return cPOSINTTerminalRuleCall_0; }

		//NEGINT
		public RuleCall getNEGINTTerminalRuleCall_1() { return cNEGINTTerminalRuleCall_1; }
	}

	public class QidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Qid");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Qid:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private ModelElements pModel;
	private DeclElements pDecl;
	private DeclGranularityElements pDeclGranularity;
	private DeclExportElements pDeclExport;
	private DeclTypeElements pDeclType;
	private DeclValElements pDeclVal;
	private ExportElements pExport;
	private IntegerElements pInteger;
	private QidElements pQid;
	private TerminalRule tID;
	private TerminalRule tPOSINT;
	private TerminalRule tNEGINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public GDSLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gdsl.plugin.GDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	decl+=Decl (";"? decl+=Decl)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// *****************************
	//Decl:
	//	DeclGranularity | DeclExport | DeclType | DeclVal;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//// *****************************
	//DeclGranularity:
	//	name="granularity" "=" granularity=Integer;
	public DeclGranularityElements getDeclGranularityAccess() {
		return (pDeclGranularity != null) ? pDeclGranularity : (pDeclGranularity = new DeclGranularityElements());
	}
	
	public ParserRule getDeclGranularityRule() {
		return getDeclGranularityAccess().getRule();
	}

	//DeclExport:
	//	name="export" "=" exports+=Export*;
	public DeclExportElements getDeclExportAccess() {
		return (pDeclExport != null) ? pDeclExport : (pDeclExport = new DeclExportElements());
	}
	
	public ParserRule getDeclExportRule() {
		return getDeclExportAccess().getRule();
	}

	//DeclType:
	//	"type" name=ID "=" "todo";
	public DeclTypeElements getDeclTypeAccess() {
		return (pDeclType != null) ? pDeclType : (pDeclType = new DeclTypeElements());
	}
	
	public ParserRule getDeclTypeRule() {
		return getDeclTypeAccess().getRule();
	}

	//DeclVal:
	//	"val" name=ID attr+=ID*;
	public DeclValElements getDeclValAccess() {
		return (pDeclVal != null) ? pDeclVal : (pDeclVal = new DeclValElements());
	}
	
	public ParserRule getDeclValRule() {
		return getDeclValAccess().getRule();
	}

	//// *****************************
	//Export:
	//	name=Qid ("{" attrName+=ID ("," attrName+=ID)* "}")?;
	public ExportElements getExportAccess() {
		return (pExport != null) ? pExport : (pExport = new ExportElements());
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	////Quite Terminal symbols
	//Integer:
	//	POSINT | NEGINT;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Qid:
	//	ID;
	public QidElements getQidAccess() {
		return (pQid != null) ? pQid : (pQid = new QidElements());
	}
	
	public ParserRule getQidRule() {
		return getQidAccess().getRule();
	}

	////Terminal symbols	
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal POSINT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getPOSINTRule() {
		return (tPOSINT != null) ? tPOSINT : (tPOSINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POSINT"));
	} 

	//terminal NEGINT:
	//	"~" "1".."9" "0".."9"*;
	public TerminalRule getNEGINTRule() {
		return (tNEGINT != null) ? tNEGINT : (tNEGINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEGINT"));
	} 

	//terminal ML_COMMENT:
	//	"(*"->"*)";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"#" !"\n"* "\n";
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
