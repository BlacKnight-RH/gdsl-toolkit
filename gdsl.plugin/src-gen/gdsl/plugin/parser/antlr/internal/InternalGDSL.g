/*
* generated by Xtext
*/
grammar InternalGDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package gdsl.plugin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package gdsl.plugin.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import gdsl.plugin.services.GDSLGrammarAccess;

}

@parser::members {

 	private GDSLGrammarAccess grammarAccess;
 	
    public InternalGDSLParser(TokenStream input, GDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_0_0()); 
	    }
		lv_decl_0_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_0_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getSemicolonKeyword_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_1_1_0()); 
	    }
		lv_decl_2_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_2_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclGranularityParserRuleCall_0()); 
    }
    this_DeclGranularity_0=ruleDeclGranularity
    { 
        $current = $this_DeclGranularity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclExportParserRuleCall_1()); 
    }
    this_DeclExport_1=ruleDeclExport
    { 
        $current = $this_DeclExport_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclTypeParserRuleCall_2()); 
    }
    this_DeclType_2=ruleDeclType
    { 
        $current = $this_DeclType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclValParserRuleCall_3()); 
    }
    this_DeclVal_3=ruleDeclVal
    { 
        $current = $this_DeclVal_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDeclGranularity
entryRuleDeclGranularity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclGranularityRule()); }
	 iv_ruleDeclGranularity=ruleDeclGranularity 
	 { $current=$iv_ruleDeclGranularity.current; } 
	 EOF 
;

// Rule DeclGranularity
ruleDeclGranularity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'granularity' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getDeclGranularityAccess().getNameGranularityKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclGranularityRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "granularity");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclGranularityAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclGranularityAccess().getGranularityIntegerParserRuleCall_2_0()); 
	    }
		lv_granularity_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclGranularityRule());
	        }
       		set(
       			$current, 
       			"granularity",
        		lv_granularity_2_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclExport
entryRuleDeclExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclExportRule()); }
	 iv_ruleDeclExport=ruleDeclExport 
	 { $current=$iv_ruleDeclExport.current; } 
	 EOF 
;

// Rule DeclExport
ruleDeclExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'export' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getDeclExportAccess().getNameExportKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclExportRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "export");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclExportAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclExportAccess().getExportsExportParserRuleCall_2_0()); 
	    }
		lv_exports_2_0=ruleExport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclExportRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_2_0, 
        		"Export");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeclType
entryRuleDeclType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclTypeRule()); }
	 iv_ruleDeclType=ruleDeclType 
	 { $current=$iv_ruleDeclType.current; } 
	 EOF 
;

// Rule DeclType
ruleDeclType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclTypeAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDeclTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDeclVal
entryRuleDeclVal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclValRule()); }
	 iv_ruleDeclVal=ruleDeclVal 
	 { $current=$iv_ruleDeclVal.current; } 
	 EOF 
;

// Rule DeclVal
ruleDeclVal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='val' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclValAccess().getValKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDeclValAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_attr_2_0=RULE_ID
		{
			newLeafNode(lv_attr_2_0, grammarAccess.getDeclValAccess().getAttrIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclValRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"attr",
        		lv_attr_2_0, 
        		"ID");
	    }

)
)*)
;





// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	 iv_ruleExport=ruleExport 
	 { $current=$iv_ruleExport.current; } 
	 EOF 
;

// Rule Export
ruleExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'todo' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getExportAccess().getNameTodoKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "todo");
	    }

)
)
;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIntegerAccess().getINTTerminalRuleCall()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


