/*
* generated by Xtext
*/
grammar InternalGDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package gdsl.plugin.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package gdsl.plugin.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import gdsl.plugin.services.GDSLGrammarAccess;

}

@parser::members {
 
 	private GDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecl
entryRuleDecl 
:
{ before(grammarAccess.getDeclRule()); }
	 ruleDecl
{ after(grammarAccess.getDeclRule()); } 
	 EOF 
;

// Rule Decl
ruleDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclAccess().getAlternatives()); }
(rule__Decl__Alternatives)
{ after(grammarAccess.getDeclAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclGranularity
entryRuleDeclGranularity 
:
{ before(grammarAccess.getDeclGranularityRule()); }
	 ruleDeclGranularity
{ after(grammarAccess.getDeclGranularityRule()); } 
	 EOF 
;

// Rule DeclGranularity
ruleDeclGranularity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclGranularityAccess().getGroup()); }
(rule__DeclGranularity__Group__0)
{ after(grammarAccess.getDeclGranularityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclExport
entryRuleDeclExport 
:
{ before(grammarAccess.getDeclExportRule()); }
	 ruleDeclExport
{ after(grammarAccess.getDeclExportRule()); } 
	 EOF 
;

// Rule DeclExport
ruleDeclExport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclExportAccess().getGroup()); }
(rule__DeclExport__Group__0)
{ after(grammarAccess.getDeclExportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclType
entryRuleDeclType 
:
{ before(grammarAccess.getDeclTypeRule()); }
	 ruleDeclType
{ after(grammarAccess.getDeclTypeRule()); } 
	 EOF 
;

// Rule DeclType
ruleDeclType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclTypeAccess().getGroup()); }
(rule__DeclType__Group__0)
{ after(grammarAccess.getDeclTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclVal
entryRuleDeclVal 
:
{ before(grammarAccess.getDeclValRule()); }
	 ruleDeclVal
{ after(grammarAccess.getDeclValRule()); } 
	 EOF 
;

// Rule DeclVal
ruleDeclVal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclValAccess().getGroup()); }
(rule__DeclVal__Group__0)
{ after(grammarAccess.getDeclValAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExport
entryRuleExport 
:
{ before(grammarAccess.getExportRule()); }
	 ruleExport
{ after(grammarAccess.getExportRule()); } 
	 EOF 
;

// Rule Export
ruleExport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExportAccess().getGroup()); }
(rule__Export__Group__0)
{ after(grammarAccess.getExportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getAlternatives()); }
(rule__Integer__Alternatives)
{ after(grammarAccess.getIntegerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQid
entryRuleQid 
:
{ before(grammarAccess.getQidRule()); }
	 ruleQid
{ after(grammarAccess.getQidRule()); } 
	 EOF 
;

// Rule Qid
ruleQid
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQidAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getQidAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Decl__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclAccess().getDeclGranularityParserRuleCall_0()); }
	ruleDeclGranularity
{ after(grammarAccess.getDeclAccess().getDeclGranularityParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclAccess().getDeclExportParserRuleCall_1()); }
	ruleDeclExport
{ after(grammarAccess.getDeclAccess().getDeclExportParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclAccess().getDeclTypeParserRuleCall_2()); }
	ruleDeclType
{ after(grammarAccess.getDeclAccess().getDeclTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclAccess().getDeclValParserRuleCall_3()); }
	ruleDeclVal
{ after(grammarAccess.getDeclAccess().getDeclValParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getPOSINTTerminalRuleCall_0()); }
	RULE_POSINT
{ after(grammarAccess.getIntegerAccess().getPOSINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIntegerAccess().getNEGINTTerminalRuleCall_1()); }
	RULE_NEGINT
{ after(grammarAccess.getIntegerAccess().getNEGINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclAssignment_0()); }
(rule__Model__DeclAssignment_0)
{ after(grammarAccess.getModelAccess().getDeclAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)*
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSemicolonKeyword_1_0()); }
(
	';' 
)?
{ after(grammarAccess.getModelAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclAssignment_1_1()); }
(rule__Model__DeclAssignment_1_1)
{ after(grammarAccess.getModelAccess().getDeclAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclGranularity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclGranularity__Group__0__Impl
	rule__DeclGranularity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclGranularity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclGranularityAccess().getNameAssignment_0()); }
(rule__DeclGranularity__NameAssignment_0)
{ after(grammarAccess.getDeclGranularityAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclGranularity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclGranularity__Group__1__Impl
	rule__DeclGranularity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclGranularity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclGranularityAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getDeclGranularityAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclGranularity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclGranularity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclGranularity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclGranularityAccess().getGranularityAssignment_2()); }
(rule__DeclGranularity__GranularityAssignment_2)
{ after(grammarAccess.getDeclGranularityAccess().getGranularityAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DeclExport__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclExport__Group__0__Impl
	rule__DeclExport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclExport__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclExportAccess().getNameAssignment_0()); }
(rule__DeclExport__NameAssignment_0)
{ after(grammarAccess.getDeclExportAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclExport__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclExport__Group__1__Impl
	rule__DeclExport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclExport__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclExportAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getDeclExportAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclExport__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclExport__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclExport__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclExportAccess().getExportsAssignment_2()); }
(rule__DeclExport__ExportsAssignment_2)*
{ after(grammarAccess.getDeclExportAccess().getExportsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DeclType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclType__Group__0__Impl
	rule__DeclType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclTypeAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getDeclTypeAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclType__Group__1__Impl
	rule__DeclType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclTypeAccess().getNameAssignment_1()); }
(rule__DeclType__NameAssignment_1)
{ after(grammarAccess.getDeclTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclType__Group__2__Impl
	rule__DeclType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclTypeAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getDeclTypeAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclTypeAccess().getTodoKeyword_3()); }

	'todo' 

{ after(grammarAccess.getDeclTypeAccess().getTodoKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DeclVal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclVal__Group__0__Impl
	rule__DeclVal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclValAccess().getValKeyword_0()); }

	'val' 

{ after(grammarAccess.getDeclValAccess().getValKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclVal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclVal__Group__1__Impl
	rule__DeclVal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclValAccess().getNameAssignment_1()); }
(rule__DeclVal__NameAssignment_1)
{ after(grammarAccess.getDeclValAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclVal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclVal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclValAccess().getAttrAssignment_2()); }
(rule__DeclVal__AttrAssignment_2)*
{ after(grammarAccess.getDeclValAccess().getAttrAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Export__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__0__Impl
	rule__Export__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getNameAssignment_0()); }
(rule__Export__NameAssignment_0)
{ after(grammarAccess.getExportAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_1()); }
(rule__Export__Group_1__0)?
{ after(grammarAccess.getExportAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Export__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1__0__Impl
	rule__Export__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_1_0()); }

	'{' 

{ after(grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1__1__Impl
	rule__Export__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttrNameAssignment_1_1()); }
(rule__Export__AttrNameAssignment_1_1)
{ after(grammarAccess.getExportAccess().getAttrNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1__2__Impl
	rule__Export__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_1_2()); }
(rule__Export__Group_1_2__0)*
{ after(grammarAccess.getExportAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getRightCurlyBracketKeyword_1_3()); }

	'}' 

{ after(grammarAccess.getExportAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Export__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1_2__0__Impl
	rule__Export__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getExportAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttrNameAssignment_1_2_1()); }
(rule__Export__AttrNameAssignment_1_2_1)
{ after(grammarAccess.getExportAccess().getAttrNameAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__DeclAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_0_0()); }
	ruleDecl{ after(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DeclAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_1_1_0()); }
	ruleDecl{ after(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclGranularity__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclGranularityAccess().getNameGranularityKeyword_0_0()); }
(
{ before(grammarAccess.getDeclGranularityAccess().getNameGranularityKeyword_0_0()); }

	'granularity' 

{ after(grammarAccess.getDeclGranularityAccess().getNameGranularityKeyword_0_0()); }
)

{ after(grammarAccess.getDeclGranularityAccess().getNameGranularityKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclGranularity__GranularityAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclGranularityAccess().getGranularityIntegerParserRuleCall_2_0()); }
	ruleInteger{ after(grammarAccess.getDeclGranularityAccess().getGranularityIntegerParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclExport__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclExportAccess().getNameExportKeyword_0_0()); }
(
{ before(grammarAccess.getDeclExportAccess().getNameExportKeyword_0_0()); }

	'export' 

{ after(grammarAccess.getDeclExportAccess().getNameExportKeyword_0_0()); }
)

{ after(grammarAccess.getDeclExportAccess().getNameExportKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclExport__ExportsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclExportAccess().getExportsExportParserRuleCall_2_0()); }
	ruleExport{ after(grammarAccess.getDeclExportAccess().getExportsExportParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDeclTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVal__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclValAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDeclValAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVal__AttrAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclValAccess().getAttrIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDeclValAccess().getAttrIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getNameQidParserRuleCall_0_0()); }
	ruleQid{ after(grammarAccess.getExportAccess().getNameQidParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__AttrNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttrNameIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getExportAccess().getAttrNameIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__AttrNameAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttrNameIDTerminalRuleCall_1_2_1_0()); }
	RULE_ID{ after(grammarAccess.getExportAccess().getAttrNameIDTerminalRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_POSINT : ('0'..'9')+;

RULE_NEGINT : '~' '1'..'9' ('0'..'9')*;

RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_SL_COMMENT : '#' ~('\n')* '\n';

RULE_WS : (' '|'\t'|'\r'|'\n')+;


