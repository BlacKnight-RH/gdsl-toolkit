# vim: tw=80:fo+=t

In order to build the GDSL toolkit with its demo applications and libraries the
following steps need to be followed.

*** Dependencies

The GDSL compiler and core libraries require the following software to be on the
current search PATH:

- Standard ML of New Jersey interactive compiler (including ml-lpt) [>= version 110.75]
- Make
- A C compiler 

Furthermore, the following software packages and features are required by some
of the optional demo applications:

- GNU C library extensions
- A C compiler that supports the C11 standard, e.g. a recent GCC
- Libelf (http://www.mr511.de/software/) [>= version 0.152] 

*** Building the Application

As a first step, the sources need to be configured; the following command uses
the default build settings that compile the x86 decoder with semantic
translation:

./configure

Other architectures can be chosen by passing the "--with-frontend=..." option to
"./configure". For an overview of all available frontends and other options run
"./configure --help". Details about the various tools and libraries can be found
here.

Finally,

make

and (optionally)

make install

build and install the respective frontend. The demo applications and libraries
are built but not installed by default; see "./configure --help" for information
on how to change this.

*** Building from Repository Sources

Checking out the current sources and building them requires the following tools
to be on the current search PATH:

- Automake
- Git 

After checking out the sources, the configure script has to be generated using
the following command:

autoreconf -i

Then follow the instructions above.

*** Demos and Libraries

The GDSL toolkit contains a number of demo applications and libraries. Depending
on the whether the build machine satisfies all dependencies, some or all of them
are built together with the GDSL frontend. The tools and libraries are presented
on the website of the toolkit (http://code.google.com/p/gdsl-toolkit/).

*** Using the Gdsl Java Library

In order to use the Gdsl Java library, one has to instruct Automake to install
auxiliary libraries. This is done by passing the "--enable-install-auxlibs"
option to "./configure". Additionally, one has to make sure that the JNI header
file ("jni.h") can be found. For example, if the JNI header can be found in the
"/usr/lib/jvm/java-7-openjdk-amd64/include/" directory, then one would need to
run "./configure" in the following way:

C_INCLUDE_PATH="/usr/lib/jvm/java-7-openjdk-amd64/include/" ./configure --enable-install-auxlibs
