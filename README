In order to build the decoder and semantics translations (for x86 or Atmel
AVR) and to test the liveness analysis follow the steps below.

Dependencies

The following software packages are needed to compile the liveness analysis:

- Mlton (see http://www.mlton.org/) [version from 15/07/2013]
- GNU autoconf and make
- Libelf (http://www.mr511.de/software/) [>= version 0.152]

Building the Application

The following steps need to be taken in order to build the application. It is
assumed that the GDSL root directory is the current working directory.

autoreconf -i
./configure
make

By default, the x86 decoder and semantic translation to RReil are built.
Furthermore, there are a few supporting libraries and some demo applications
that are by default built but not installed. In order to generate a different front-end pass the --with-frontend= option to ./configure.

The sources of the decoders can be found under the specifications/ directory.
In particular, the decoder for the x86 is in specifications/x86/x86.ml.

The liveness analyzer itself is a small C program that uses the API offered by the GDSL modules. The following commands compile the liveness analyzer:

cd specifications/x86/c
make liveness-sweep

The compilation outputs an executable file called "liveness-sweep". It
analyses a binary passed as command line argument:

./liveness-sweep liveness-example.bin

The above example file only contains a bunch of instructions to be decoded,
translated and optimised. In case however one wishes to analyse the ".text"
section of a standard ELF executable it also is possible to directly pass such
a file:

./liveness-sweep --elf `which ls`

This command analyses the binary of the "ls" command.
