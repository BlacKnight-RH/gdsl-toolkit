/*
* generated by Xtext
*/
grammar InternalGDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package gdsl.plugin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package gdsl.plugin.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import gdsl.plugin.services.GDSLGrammarAccess;

}

@parser::members {

 	private GDSLGrammarAccess grammarAccess;
 	
    public InternalGDSLParser(TokenStream input, GDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_0_0()); 
	    }
		lv_decl_0_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_0_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getSemicolonKeyword_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclDeclParserRuleCall_1_1_0()); 
	    }
		lv_decl_2_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_2_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclGranularityParserRuleCall_0()); 
    }
    this_DeclGranularity_0=ruleDeclGranularity
    { 
        $current = $this_DeclGranularity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclExportParserRuleCall_1()); 
    }
    this_DeclExport_1=ruleDeclExport
    { 
        $current = $this_DeclExport_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclTypeParserRuleCall_2()); 
    }
    this_DeclType_2=ruleDeclType
    { 
        $current = $this_DeclType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getDeclValParserRuleCall_3()); 
    }
    this_DeclVal_3=ruleDeclVal
    { 
        $current = $this_DeclVal_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDeclGranularity
entryRuleDeclGranularity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclGranularityRule()); }
	 iv_ruleDeclGranularity=ruleDeclGranularity 
	 { $current=$iv_ruleDeclGranularity.current; } 
	 EOF 
;

// Rule DeclGranularity
ruleDeclGranularity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'granularity' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getDeclGranularityAccess().getNameGranularityKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclGranularityRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "granularity");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclGranularityAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclGranularityAccess().getGranularityIntParserRuleCall_2_0()); 
	    }
		lv_granularity_2_0=ruleInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclGranularityRule());
	        }
       		set(
       			$current, 
       			"granularity",
        		lv_granularity_2_0, 
        		"Int");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclExport
entryRuleDeclExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclExportRule()); }
	 iv_ruleDeclExport=ruleDeclExport 
	 { $current=$iv_ruleDeclExport.current; } 
	 EOF 
;

// Rule DeclExport
ruleDeclExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'export' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getDeclExportAccess().getNameExportKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclExportRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "export");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclExportAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclExportAccess().getExportsExportParserRuleCall_2_0()); 
	    }
		lv_exports_2_0=ruleExport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclExportRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_2_0, 
        		"Export");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeclType
entryRuleDeclType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclTypeRule()); }
	 iv_ruleDeclType=ruleDeclType 
	 { $current=$iv_ruleDeclType.current; } 
	 EOF 
;

// Rule DeclType
ruleDeclType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclTypeAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclTypeAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclTypeAccess().getEqualsSignKeyword_2_0_0_0());
    }
((
(
ruleConDecls
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getDeclTypeAccess().getValueConDeclsParserRuleCall_2_0_0_1_0()); 
	    }
		lv_value_3_0=ruleConDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclTypeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"ConDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclTypeAccess().getValueTyParserRuleCall_2_0_1_0()); 
	    }
		lv_value_4_0=ruleTy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclTypeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Ty");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeclTypeAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclTypeAccess().getAttrNameNameParserRuleCall_2_1_1_0()); 
	    }
		lv_attrName_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclTypeRule());
	        }
       		add(
       			$current, 
       			"attrName",
        		lv_attrName_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDeclTypeAccess().getCommaKeyword_2_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclTypeAccess().getAttrNameNameParserRuleCall_2_1_2_1_0()); 
	    }
		lv_attrName_8_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclTypeRule());
	        }
       		add(
       			$current, 
       			"attrName",
        		lv_attrName_8_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDeclTypeAccess().getRightSquareBracketKeyword_2_1_3());
    }
	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDeclTypeAccess().getEqualsSignKeyword_2_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclTypeAccess().getValueConDeclsParserRuleCall_2_1_5_0()); 
	    }
		lv_value_11_0=ruleConDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclTypeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"ConDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleDeclVal
entryRuleDeclVal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclValRule()); }
	 iv_ruleDeclVal=ruleDeclVal 
	 { $current=$iv_ruleDeclVal.current; } 
	 EOF 
;

// Rule DeclVal
ruleDeclVal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='val' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclValAccess().getValKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getNameNameParserRuleCall_0_1_0_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
ruleSYM
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getNameSYMParserRuleCall_0_1_1_0()); 
	    }
		lv_name_2_0=ruleSYM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"SYM");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getAttrNameParserRuleCall_0_2_0()); 
	    }
		lv_attr_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		add(
       			$current, 
       			"attr",
        		lv_attr_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeclValAccess().getEqualsSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getExpExpParserRuleCall_0_4_0()); 
	    }
		lv_exp_5_0=ruleExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_5_0, 
        		"Exp");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='val' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDeclValAccess().getValKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getNameNameParserRuleCall_1_1_0()); 
	    }
		lv_name_7_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDeclValAccess().getLeftSquareBracketKeyword_1_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getDecPatDecodePatParserRuleCall_1_3_0_0()); 
	    }
		lv_decPat_9_0=ruleDecodePat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		add(
       			$current, 
       			"decPat",
        		lv_decPat_9_0, 
        		"DecodePat");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getDecPatDecodePatParserRuleCall_1_3_1_0()); 
	    }
		lv_decPat_10_0=ruleDecodePat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		add(
       			$current, 
       			"decPat",
        		lv_decPat_10_0, 
        		"DecodePat");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDeclValAccess().getRightSquareBracketKeyword_1_4());
    }
((	otherlv_12='=' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDeclValAccess().getEqualsSignKeyword_1_5_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getExpExpParserRuleCall_1_5_0_1_0()); 
	    }
		lv_exp_13_0=ruleExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_13_0, 
        		"Exp");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_PIPE_14=RULE_PIPE
    { 
    newLeafNode(this_PIPE_14, grammarAccess.getDeclValAccess().getPIPETerminalRuleCall_1_5_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getExpsExpParserRuleCall_1_5_1_1_0()); 
	    }
		lv_exps_15_0=ruleExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		add(
       			$current, 
       			"exps",
        		lv_exps_15_0, 
        		"Exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16='=' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDeclValAccess().getEqualsSignKeyword_1_5_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclValAccess().getExpsExpParserRuleCall_1_5_1_3_0()); 
	    }
		lv_exps_17_0=ruleExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclValRule());
	        }
       		add(
       			$current, 
       			"exps",
        		lv_exps_17_0, 
        		"Exp");
	        afterParserOrEnumRuleCall();
	    }

)
))+)))
;





// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	 iv_ruleExport=ruleExport 
	 { $current=$iv_ruleExport.current; } 
	 EOF 
;

// Rule Export
ruleExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getNameQidParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleQid		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Qid");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getAttrNameNameParserRuleCall_1_1_0()); 
	    }
		lv_attrName_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"attrName",
        		lv_attrName_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExportAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getAttrNameNameParserRuleCall_1_2_1_0()); 
	    }
		lv_attrName_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"attrName",
        		lv_attrName_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExportAccess().getRightCurlyBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleConDecls
entryRuleConDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConDeclsRule()); }
	 iv_ruleConDecls=ruleConDecls 
	 { $current=$iv_ruleConDecls.current; } 
	 EOF 
;

// Rule ConDecls
ruleConDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConDeclsAccess().getConDeclsConDeclParserRuleCall_0_0()); 
	    }
		lv_conDecls_0_0=ruleConDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConDeclsRule());
	        }
       		add(
       			$current, 
       			"conDecls",
        		lv_conDecls_0_0, 
        		"ConDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PIPE_1=RULE_PIPE
    { 
    newLeafNode(this_PIPE_1, grammarAccess.getConDeclsAccess().getPIPETerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConDeclsAccess().getConDeclsConDeclParserRuleCall_1_1_0()); 
	    }
		lv_conDecls_2_0=ruleConDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConDeclsRule());
	        }
       		add(
       			$current, 
       			"conDecls",
        		lv_conDecls_2_0, 
        		"ConDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConDecl
entryRuleConDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConDeclRule()); }
	 iv_ruleConDecl=ruleConDecl 
	 { $current=$iv_ruleConDecl.current; } 
	 EOF 
;

// Rule ConDecl
ruleConDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConDeclAccess().getNameConBindParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleConBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ConBind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConDeclAccess().getOfKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConDeclAccess().getTyTyParserRuleCall_1_1_0()); 
	    }
		lv_ty_2_0=ruleTy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConDeclRule());
	        }
       		set(
       			$current, 
       			"ty",
        		lv_ty_2_0, 
        		"Ty");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTy
entryRuleTy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTyRule()); }
	 iv_ruleTy=ruleTy 
	 { $current=$iv_ruleTy.current; } 
	 EOF 
;

// Rule Ty
ruleTy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getValueIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Int");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(this_PIPE_1=RULE_PIPE
    { 
    newLeafNode(this_PIPE_1, grammarAccess.getTyAccess().getPIPETerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getValueIntParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Int");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PIPE_3=RULE_PIPE
    { 
    newLeafNode(this_PIPE_3, grammarAccess.getTyAccess().getPIPETerminalRuleCall_1_2()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getValueQidParserRuleCall_2_0_0()); 
	    }
		lv_value_4_0=ruleQid		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Qid");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTyAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getTyBindTyBindParserRuleCall_2_1_1_0()); 
	    }
		lv_tyBind_6_0=ruleTyBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		add(
       			$current, 
       			"tyBind",
        		lv_tyBind_6_0, 
        		"TyBind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTyAccess().getCommaKeyword_2_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getTyBindTyBindParserRuleCall_2_1_2_1_0()); 
	    }
		lv_tyBind_8_0=ruleTyBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		add(
       			$current, 
       			"tyBind",
        		lv_tyBind_8_0, 
        		"TyBind");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTyAccess().getRightSquareBracketKeyword_2_1_3());
    }
)?)
    |(	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTyAccess().getLeftCurlyBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getElementsTyElementParserRuleCall_3_1_0()); 
	    }
		lv_elements_11_0=ruleTyElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_11_0, 
        		"TyElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTyAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyAccess().getElementsTyElementParserRuleCall_3_2_1_0()); 
	    }
		lv_elements_13_0=ruleTyElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_13_0, 
        		"TyElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTyAccess().getRightCurlyBracketKeyword_3_3());
    }
))
;





// Entry rule entryRuleTyElement
entryRuleTyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTyElementRule()); }
	 iv_ruleTyElement=ruleTyElement 
	 { $current=$iv_ruleTyElement.current; } 
	 EOF 
;

// Rule TyElement
ruleTyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTyElementAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTyElementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyElementAccess().getValueTyParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleTy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyElementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Ty");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTyBind
entryRuleTyBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTyBindRule()); }
	 iv_ruleTyBind=ruleTyBind 
	 { $current=$iv_ruleTyBind.current; } 
	 EOF 
;

// Rule TyBind
ruleTyBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTyBindAccess().getKeyQidParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleQid		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyBindRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"Qid");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTyBindAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTyBindAccess().getValueTyParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleTy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTyBindRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Ty");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDecodePat
entryRuleDecodePat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecodePatRule()); }
	 iv_ruleDecodePat=ruleDecodePat 
	 { $current=$iv_ruleDecodePat.current; } 
	 EOF 
;

// Rule DecodePat
ruleDecodePat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDecodePatAccess().getBitPatParserRuleCall_0()); 
    }
    this_BitPat_0=ruleBitPat
    { 
        $current = $this_BitPat_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDecodePatAccess().getTokPatParserRuleCall_1()); 
    }
    this_TokPat_1=ruleTokPat
    { 
        $current = $this_TokPat_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBitPat
entryRuleBitPat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitPatRule()); }
	 iv_ruleBitPat=ruleBitPat 
	 { $current=$iv_ruleBitPat.current; } 
	 EOF 
;

// Rule BitPat
ruleBitPat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='\'' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBitPatAccess().getApostropheKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitPatAccess().getBitpatPrimBitPatParserRuleCall_1_0()); 
	    }
		lv_bitpat_1_0=rulePrimBitPat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitPatRule());
	        }
       		add(
       			$current, 
       			"bitpat",
        		lv_bitpat_1_0, 
        		"PrimBitPat");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitPatAccess().getBitpatPrimBitPatParserRuleCall_2_0()); 
	    }
		lv_bitpat_2_0=rulePrimBitPat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitPatRule());
	        }
       		add(
       			$current, 
       			"bitpat",
        		lv_bitpat_2_0, 
        		"PrimBitPat");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='\'' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBitPatAccess().getApostropheKeyword_3());
    }
)
;





// Entry rule entryRuleTokPat
entryRuleTokPat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokPatRule()); }
	 iv_ruleTokPat=ruleTokPat 
	 { $current=$iv_ruleTokPat.current; } 
	 EOF 
;

// Rule TokPat
ruleTokPat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTokPatAccess().getTokPatIntParserRuleCall_0_0()); 
	    }
		lv_tokPat_0_1=ruleInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTokPatRule());
	        }
       		set(
       			$current, 
       			"tokPat",
        		lv_tokPat_0_1, 
        		"Int");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTokPatAccess().getTokPatQidParserRuleCall_0_1()); 
	    }
		lv_tokPat_0_2=ruleQid		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTokPatRule());
	        }
       		set(
       			$current, 
       			"tokPat",
        		lv_tokPat_0_2, 
        		"Qid");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRulePrimBitPat
entryRulePrimBitPat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimBitPatRule()); } 
	 iv_rulePrimBitPat=rulePrimBitPat 
	 { $current=$iv_rulePrimBitPat.current.getText(); }  
	 EOF 
;

// Rule PrimBitPat
rulePrimBitPat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((( ruleBITSTR)=>
    { 
        newCompositeNode(grammarAccess.getPrimBitPatAccess().getBITSTRParserRuleCall_0()); 
    }
    this_BITSTR_0=ruleBITSTR    {
		$current.merge(this_BITSTR_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getPrimBitPatAccess().getQidParserRuleCall_1_0()); 
    }
    this_Qid_1=ruleQid    {
		$current.merge(this_Qid_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getPrimBitPatAccess().getBitPatOrIntParserRuleCall_1_1()); 
    }
    this_BitPatOrInt_2=ruleBitPatOrInt    {
		$current.merge(this_BitPatOrInt_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?))
    ;





// Entry rule entryRuleBitPatOrInt
entryRuleBitPatOrInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitPatOrIntRule()); } 
	 iv_ruleBitPatOrInt=ruleBitPatOrInt 
	 { $current=$iv_ruleBitPatOrInt.current.getText(); }  
	 EOF 
;

// Rule BitPatOrInt
ruleBitPatOrInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBitPatOrIntAccess().getColonKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBitPatOrIntAccess().getPOSINTParserRuleCall_0_1()); 
    }
    this_POSINT_1=rulePOSINT    {
		$current.merge(this_POSINT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBitPatOrIntAccess().getCommercialAtKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBitPatOrIntAccess().getBITSTRParserRuleCall_1_1()); 
    }
    this_BITSTR_3=ruleBITSTR    {
		$current.merge(this_BITSTR_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleExp
entryRuleExp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpRule()); } 
	 iv_ruleExp=ruleExp 
	 { $current=$iv_ruleExp.current.getText(); }  
	 EOF 
;

// Rule Exp
ruleExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='exptodo' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpAccess().getExptodoKeyword()); 
    }

    ;





// Entry rule entryRuleInt
entryRuleInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntRule()); } 
	 iv_ruleInt=ruleInt 
	 { $current=$iv_ruleInt.current.getText(); }  
	 EOF 
;

// Rule Int
ruleInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntAccess().getPOSINTParserRuleCall_0()); 
    }
    this_POSINT_0=rulePOSINT    {
		$current.merge(this_POSINT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntAccess().getNEGINTParserRuleCall_1()); 
    }
    this_NEGINT_1=ruleNEGINT    {
		$current.merge(this_NEGINT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNameAccess().getIDParserRuleCall()); 
    }
    this_ID_0=ruleID    {
		$current.merge(this_ID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleConBind
entryRuleConBind returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConBindRule()); } 
	 iv_ruleConBind=ruleConBind 
	 { $current=$iv_ruleConBind.current.getText(); }  
	 EOF 
;

// Rule ConBind
ruleConBind returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConBindAccess().getCONSParserRuleCall()); 
    }
    this_CONS_0=ruleCONS    {
		$current.merge(this_CONS_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRuleQid
entryRuleQid returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQidRule()); } 
	 iv_ruleQid=ruleQid 
	 { $current=$iv_ruleQid.current.getText(); }  
	 EOF 
;

// Rule Qid
ruleQid returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getQidAccess().getIDParserRuleCall()); 
    }
    this_ID_0=ruleID    {
		$current.merge(this_ID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulePOSINT
entryRulePOSINT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPOSINTRule()); } 
	 iv_rulePOSINT=rulePOSINT 
	 { $current=$iv_rulePOSINT.current.getText(); }  
	 EOF 
;

// Rule POSINT
rulePOSINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPOSINTAccess().getNUMParserRuleCall_0()); 
    }
    this_NUM_0=ruleNUM    {
		$current.merge(this_NUM_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPOSINTAccess().getHEXNUMParserRuleCall_1()); 
    }
    this_HEXNUM_1=ruleHEXNUM    {
		$current.merge(this_HEXNUM_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNEGINT
entryRuleNEGINT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNEGINTRule()); } 
	 iv_ruleNEGINT=ruleNEGINT 
	 { $current=$iv_ruleNEGINT.current.getText(); }  
	 EOF 
;

// Rule NEGINT
ruleNEGINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNEGINTAccess().getTildeKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNEGINTAccess().getNUMParserRuleCall_1()); 
    }
    this_NUM_1=ruleNUM    {
		$current.merge(this_NUM_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNUM
entryRuleNUM returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNUMRule()); } 
	 iv_ruleNUM=ruleNUM 
	 { $current=$iv_ruleNUM.current.getText(); }  
	 EOF 
;

// Rule NUM
ruleNUM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(( ruleDIG)=>
    { 
        newCompositeNode(grammarAccess.getNUMAccess().getDIGParserRuleCall()); 
    }
    this_DIG_0=ruleDIG    {
		$current.merge(this_DIG_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleHEXNUM
entryRuleHEXNUM returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHEXNUMRule()); } 
	 iv_ruleHEXNUM=ruleHEXNUM 
	 { $current=$iv_ruleHEXNUM.current.getText(); }  
	 EOF 
;

// Rule HEXNUM
ruleHEXNUM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='0x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHEXNUMAccess().getXKeyword_0()); 
    }
(( ruleHEXDIGIT)=>
    { 
        newCompositeNode(grammarAccess.getHEXNUMAccess().getHEXDIGITParserRuleCall_1()); 
    }
    this_HEXDIGIT_1=ruleHEXDIGIT    {
		$current.merge(this_HEXDIGIT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;







// Entry rule entryRuleBITSTR
entryRuleBITSTR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBITSTRRule()); } 
	 iv_ruleBITSTR=ruleBITSTR 
	 { $current=$iv_ruleBITSTR.current.getText(); }  
	 EOF 
;

// Rule BITSTR
ruleBITSTR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(( ruleBINARY)=>
    { 
        newCompositeNode(grammarAccess.getBITSTRAccess().getBINARYParserRuleCall()); 
    }
    this_BINARY_0=ruleBINARY    {
		$current.merge(this_BINARY_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;







// Entry rule entryRuleCONS
entryRuleCONS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCONSRule()); } 
	 iv_ruleCONS=ruleCONS 
	 { $current=$iv_ruleCONS.current.getText(); }  
	 EOF 
;

// Rule CONS
ruleCONS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCONSAccess().getULETTERParserRuleCall_0()); 
    }
    this_ULETTER_0=ruleULETTER    {
		$current.merge(this_ULETTER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getCONSAccess().getIDCHARParserRuleCall_1()); 
    }
    this_IDCHAR_1=ruleIDCHAR    {
		$current.merge(this_IDCHAR_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleID
entryRuleID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDRule()); } 
	 iv_ruleID=ruleID 
	 { $current=$iv_ruleID.current.getText(); }  
	 EOF 
;

// Rule ID
ruleID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIDAccess().getLETTERParserRuleCall_0()); 
    }
    this_LETTER_0=ruleLETTER    {
		$current.merge(this_LETTER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(( ruleIDCHAR)=>
    { 
        newCompositeNode(grammarAccess.getIDAccess().getIDCHARParserRuleCall_1()); 
    }
    this_IDCHAR_1=ruleIDCHAR    {
		$current.merge(this_IDCHAR_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleHEXDIGIT
entryRuleHEXDIGIT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHEXDIGITRule()); } 
	 iv_ruleHEXDIGIT=ruleHEXDIGIT 
	 { $current=$iv_ruleHEXDIGIT.current.getText(); }  
	 EOF 
;

// Rule HEXDIGIT
ruleHEXDIGIT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHEXDIGITAccess().getDIGParserRuleCall_0()); 
    }
    this_DIG_0=ruleDIG    {
		$current.merge(this_DIG_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHEXDIGITAccess().getHEXCHARParserRuleCall_1()); 
    }
    this_HEXCHAR_1=ruleHEXCHAR    {
		$current.merge(this_HEXCHAR_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleHEXCHAR
entryRuleHEXCHAR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHEXCHARRule()); } 
	 iv_ruleHEXCHAR=ruleHEXCHAR 
	 { $current=$iv_ruleHEXCHAR.current.getText(); }  
	 EOF 
;

// Rule HEXCHAR
ruleHEXCHAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_LHEXCHAR_0=RULE_LHEXCHAR    {
		$current.merge(this_LHEXCHAR_0);
    }

    { 
    newLeafNode(this_LHEXCHAR_0, grammarAccess.getHEXCHARAccess().getLHEXCHARTerminalRuleCall_0()); 
    }

    |    this_UHEXCHAR_1=RULE_UHEXCHAR    {
		$current.merge(this_UHEXCHAR_1);
    }

    { 
    newLeafNode(this_UHEXCHAR_1, grammarAccess.getHEXCHARAccess().getUHEXCHARTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleULETTER
entryRuleULETTER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getULETTERRule()); } 
	 iv_ruleULETTER=ruleULETTER 
	 { $current=$iv_ruleULETTER.current.getText(); }  
	 EOF 
;

// Rule ULETTER
ruleULETTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_UHEXCHAR_0=RULE_UHEXCHAR    {
		$current.merge(this_UHEXCHAR_0);
    }

    { 
    newLeafNode(this_UHEXCHAR_0, grammarAccess.getULETTERAccess().getUHEXCHARTerminalRuleCall_0()); 
    }

    |    this_UNHEXCHAR_1=RULE_UNHEXCHAR    {
		$current.merge(this_UNHEXCHAR_1);
    }

    { 
    newLeafNode(this_UNHEXCHAR_1, grammarAccess.getULETTERAccess().getUNHEXCHARTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleLETTER
entryRuleLETTER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLETTERRule()); } 
	 iv_ruleLETTER=ruleLETTER 
	 { $current=$iv_ruleLETTER.current.getText(); }  
	 EOF 
;

// Rule LETTER
ruleLETTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_LHEXCHAR_0=RULE_LHEXCHAR    {
		$current.merge(this_LHEXCHAR_0);
    }

    { 
    newLeafNode(this_LHEXCHAR_0, grammarAccess.getLETTERAccess().getLHEXCHARTerminalRuleCall_0()); 
    }

    |    this_LNHEXCHAR_1=RULE_LNHEXCHAR    {
		$current.merge(this_LNHEXCHAR_1);
    }

    { 
    newLeafNode(this_LNHEXCHAR_1, grammarAccess.getLETTERAccess().getLNHEXCHARTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLETTERAccess().getULETTERParserRuleCall_2()); 
    }
    this_ULETTER_2=ruleULETTER    {
		$current.merge(this_ULETTER_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_SLASH_3=RULE_SLASH    {
		$current.merge(this_SLASH_3);
    }

    { 
    newLeafNode(this_SLASH_3, grammarAccess.getLETTERAccess().getSLASHTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleIDCHAR
entryRuleIDCHAR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDCHARRule()); } 
	 iv_ruleIDCHAR=ruleIDCHAR 
	 { $current=$iv_ruleIDCHAR.current.getText(); }  
	 EOF 
;

// Rule IDCHAR
ruleIDCHAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIDCHARAccess().getLETTERParserRuleCall_0()); 
    }
    this_LETTER_0=ruleLETTER    {
		$current.merge(this_LETTER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIDCHARAccess().getDIGParserRuleCall_1()); 
    }
    this_DIG_1=ruleDIG    {
		$current.merge(this_DIG_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_CHARSYM_2=RULE_CHARSYM    {
		$current.merge(this_CHARSYM_2);
    }

    { 
    newLeafNode(this_CHARSYM_2, grammarAccess.getIDCHARAccess().getCHARSYMTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBINARY
entryRuleBINARY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARYRule()); } 
	 iv_ruleBINARY=ruleBINARY 
	 { $current=$iv_ruleBINARY.current.getText(); }  
	 EOF 
;

// Rule BINARY
ruleBINARY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_BINDIG_0=RULE_BINDIG    {
		$current.merge(this_BINDIG_0);
    }

    { 
    newLeafNode(this_BINDIG_0, grammarAccess.getBINARYAccess().getBINDIGTerminalRuleCall_0()); 
    }

    |    this_BS_1=RULE_BS    {
		$current.merge(this_BS_1);
    }

    { 
    newLeafNode(this_BS_1, grammarAccess.getBINARYAccess().getBSTerminalRuleCall_1()); 
    }

    |    this_DOT_2=RULE_DOT    {
		$current.merge(this_DOT_2);
    }

    { 
    newLeafNode(this_DOT_2, grammarAccess.getBINARYAccess().getDOTTerminalRuleCall_2()); 
    }

    |    this_PIPE_3=RULE_PIPE    {
		$current.merge(this_PIPE_3);
    }

    { 
    newLeafNode(this_PIPE_3, grammarAccess.getBINARYAccess().getPIPETerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleDIG
entryRuleDIG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDIGRule()); } 
	 iv_ruleDIG=ruleDIG 
	 { $current=$iv_ruleDIG.current.getText(); }  
	 EOF 
;

// Rule DIG
ruleDIG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_BINDIG_0=RULE_BINDIG    {
		$current.merge(this_BINDIG_0);
    }

    { 
    newLeafNode(this_BINDIG_0, grammarAccess.getDIGAccess().getBINDIGTerminalRuleCall_0()); 
    }

    |    this_NBINDIG_1=RULE_NBINDIG    {
		$current.merge(this_NBINDIG_1);
    }

    { 
    newLeafNode(this_NBINDIG_1, grammarAccess.getDIGAccess().getNBINDIGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSYM
entryRuleSYM returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSYMRule()); } 
	 iv_ruleSYM=ruleSYM 
	 { $current=$iv_ruleSYM.current.getText(); }  
	 EOF 
;

// Rule SYM
ruleSYM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_BS_0=RULE_BS    {
		$current.merge(this_BS_0);
    }

    { 
    newLeafNode(this_BS_0, grammarAccess.getSYMAccess().getBSTerminalRuleCall_0()); 
    }

    |    this_SLASH_1=RULE_SLASH    {
		$current.merge(this_SLASH_1);
    }

    { 
    newLeafNode(this_SLASH_1, grammarAccess.getSYMAccess().getSLASHTerminalRuleCall_1()); 
    }

    |    this_DOT_2=RULE_DOT    {
		$current.merge(this_DOT_2);
    }

    { 
    newLeafNode(this_DOT_2, grammarAccess.getSYMAccess().getDOTTerminalRuleCall_2()); 
    }

    |    this_CHARSYM_3=RULE_CHARSYM    {
		$current.merge(this_CHARSYM_3);
    }

    { 
    newLeafNode(this_CHARSYM_3, grammarAccess.getSYMAccess().getCHARSYMTerminalRuleCall_3()); 
    }

    |    this_OTHERSYM_4=RULE_OTHERSYM    {
		$current.merge(this_OTHERSYM_4);
    }

    { 
    newLeafNode(this_OTHERSYM_4, grammarAccess.getSYMAccess().getOTHERSYMTerminalRuleCall_4()); 
    }
)
    ;





RULE_BINDIG : ('0'|'1');

RULE_NBINDIG : '2'..'9';

RULE_LHEXCHAR : 'a'..'f';

RULE_UHEXCHAR : 'A'..'F';

RULE_LNHEXCHAR : 'g'..'z';

RULE_UNHEXCHAR : 'G'..'Z';

RULE_BS : '\\';

RULE_SLASH : '/';

RULE_DOT : '.';

RULE_PIPE : '|';

RULE_CHARSYM : ('_'|'-'|'?'|'\''|'!');

RULE_OTHERSYM : ('%'|'&'|'$'|'+'|':'|'<'|'='|'>'|'@'|'~'|'`'|'^'|'#'|'*');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_SL_COMMENT : '#' ~('\n')* '\n';


