/*
* generated by Xtext
*/
package gdsl.plugin.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_1_1_0 = (RuleCall)cDeclAssignment_1_1.eContents().get(0);
		
		//Model:
		//	decl+=Decl (";"? decl+=Decl)*;
		public ParserRule getRule() { return rule; }

		//decl+=Decl (";"? decl+=Decl)*
		public Group getGroup() { return cGroup; }

		//decl+=Decl
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_0_0() { return cDeclDeclParserRuleCall_0_0; }

		//(";"? decl+=Decl)*
		public Group getGroup_1() { return cGroup_1; }

		//";"?
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_1_1() { return cDeclAssignment_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_1_1_0() { return cDeclDeclParserRuleCall_1_1_0; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclGranularityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclExportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeclValParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// *****************************
		//Decl:
		//	DeclGranularity | DeclExport | DeclType | DeclVal;
		public ParserRule getRule() { return rule; }

		//DeclGranularity | DeclExport | DeclType | DeclVal
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclGranularity
		public RuleCall getDeclGranularityParserRuleCall_0() { return cDeclGranularityParserRuleCall_0; }

		//DeclExport
		public RuleCall getDeclExportParserRuleCall_1() { return cDeclExportParserRuleCall_1; }

		//DeclType
		public RuleCall getDeclTypeParserRuleCall_2() { return cDeclTypeParserRuleCall_2; }

		//DeclVal
		public RuleCall getDeclValParserRuleCall_3() { return cDeclValParserRuleCall_3; }
	}

	public class DeclGranularityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclGranularity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGranularityKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGranularityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGranularityIntParserRuleCall_2_0 = (RuleCall)cGranularityAssignment_2.eContents().get(0);
		
		//// *****************************
		//DeclGranularity:
		//	name="granularity" "=" granularity=Int;
		public ParserRule getRule() { return rule; }

		//name="granularity" "=" granularity=Int
		public Group getGroup() { return cGroup; }

		//name="granularity"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"granularity"
		public Keyword getNameGranularityKeyword_0_0() { return cNameGranularityKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//granularity=Int
		public Assignment getGranularityAssignment_2() { return cGranularityAssignment_2; }

		//Int
		public RuleCall getGranularityIntParserRuleCall_2_0() { return cGranularityIntParserRuleCall_2_0; }
	}

	public class DeclExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclExport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameExportKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExportsExportParserRuleCall_2_0 = (RuleCall)cExportsAssignment_2.eContents().get(0);
		
		//DeclExport:
		//	name="export" "=" exports+=Export*;
		public ParserRule getRule() { return rule; }

		//name="export" "=" exports+=Export*
		public Group getGroup() { return cGroup; }

		//name="export"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"export"
		public Keyword getNameExportKeyword_0_0() { return cNameExportKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//exports+=Export*
		public Assignment getExportsAssignment_2() { return cExportsAssignment_2; }

		//Export
		public RuleCall getExportsExportParserRuleCall_2_0() { return cExportsExportParserRuleCall_2_0; }
	}

	public class DeclTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cValueAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cValueConDeclsParserRuleCall_2_0_0_1_0 = (RuleCall)cValueAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cValueAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cValueTyParserRuleCall_2_0_1_0 = (RuleCall)cValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAttrNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAttrNameNameParserRuleCall_2_1_1_0 = (RuleCall)cAttrNameAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cAttrNameAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cAttrNameNameParserRuleCall_2_1_2_1_0 = (RuleCall)cAttrNameAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cValueAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cValueConDeclsParserRuleCall_2_1_5_0 = (RuleCall)cValueAssignment_2_1_5.eContents().get(0);
		
		//DeclType:
		//	"type" name=Name (("=" => value=ConDecls | value=Ty) | "[" attrName+=Name ("," attrName+=Name)* "]" "="
		//	value=ConDecls);
		public ParserRule getRule() { return rule; }

		//"type" name=Name (("=" => value=ConDecls | value=Ty) | "[" attrName+=Name ("," attrName+=Name)* "]" "=" value=ConDecls)
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//("=" => value=ConDecls | value=Ty) | "[" attrName+=Name ("," attrName+=Name)* "]" "=" value=ConDecls
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"=" => value=ConDecls | value=Ty
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"=" => value=ConDecls
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0_0() { return cEqualsSignKeyword_2_0_0_0; }

		//=> value=ConDecls
		public Assignment getValueAssignment_2_0_0_1() { return cValueAssignment_2_0_0_1; }

		//ConDecls
		public RuleCall getValueConDeclsParserRuleCall_2_0_0_1_0() { return cValueConDeclsParserRuleCall_2_0_0_1_0; }

		//value=Ty
		public Assignment getValueAssignment_2_0_1() { return cValueAssignment_2_0_1; }

		//Ty
		public RuleCall getValueTyParserRuleCall_2_0_1_0() { return cValueTyParserRuleCall_2_0_1_0; }

		//"[" attrName+=Name ("," attrName+=Name)* "]" "=" value=ConDecls
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//attrName+=Name
		public Assignment getAttrNameAssignment_2_1_1() { return cAttrNameAssignment_2_1_1; }

		//Name
		public RuleCall getAttrNameNameParserRuleCall_2_1_1_0() { return cAttrNameNameParserRuleCall_2_1_1_0; }

		//("," attrName+=Name)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//attrName+=Name
		public Assignment getAttrNameAssignment_2_1_2_1() { return cAttrNameAssignment_2_1_2_1; }

		//Name
		public RuleCall getAttrNameNameParserRuleCall_2_1_2_1_0() { return cAttrNameNameParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_4() { return cEqualsSignKeyword_2_1_4; }

		//value=ConDecls
		public Assignment getValueAssignment_2_1_5() { return cValueAssignment_2_1_5; }

		//ConDecls
		public RuleCall getValueConDeclsParserRuleCall_2_1_5_0() { return cValueConDeclsParserRuleCall_2_1_5_0; }
	}

	public class DeclValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cValKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cNameSYMParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cAttrAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAttrNameParserRuleCall_0_2_0 = (RuleCall)cAttrAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpExpParserRuleCall_0_4_0 = (RuleCall)cExpAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cValKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cMidAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cMidMIXIDParserRuleCall_1_1_0_0 = (RuleCall)cMidAssignment_1_1_0.eContents().get(0);
		private final Assignment cAttrAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAttrNameParserRuleCall_1_1_1_0 = (RuleCall)cAttrAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_1_3_0 = (RuleCall)cExpAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cValKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cDecPatAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cDecPatDecodePatParserRuleCall_2_3_0_0 = (RuleCall)cDecPatAssignment_2_3_0.eContents().get(0);
		private final Assignment cDecPatAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cDecPatDecodePatParserRuleCall_2_3_1_0 = (RuleCall)cDecPatAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Alternatives cAlternatives_2_5 = (Alternatives)cGroup_2.eContents().get(5);
		private final Group cGroup_2_5_0 = (Group)cAlternatives_2_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_5_0_0 = (Keyword)cGroup_2_5_0.eContents().get(0);
		private final Assignment cExpAssignment_2_5_0_1 = (Assignment)cGroup_2_5_0.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_2_5_0_1_0 = (RuleCall)cExpAssignment_2_5_0_1.eContents().get(0);
		private final Group cGroup_2_5_1 = (Group)cAlternatives_2_5.eContents().get(1);
		private final RuleCall cPIPETerminalRuleCall_2_5_1_0 = (RuleCall)cGroup_2_5_1.eContents().get(0);
		private final Assignment cExpsAssignment_2_5_1_1 = (Assignment)cGroup_2_5_1.eContents().get(1);
		private final RuleCall cExpsExpParserRuleCall_2_5_1_1_0 = (RuleCall)cExpsAssignment_2_5_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_5_1_2 = (Keyword)cGroup_2_5_1.eContents().get(2);
		private final Assignment cExpsAssignment_2_5_1_3 = (Assignment)cGroup_2_5_1.eContents().get(3);
		private final RuleCall cExpsExpParserRuleCall_2_5_1_3_0 = (RuleCall)cExpsAssignment_2_5_1_3.eContents().get(0);
		
		//DeclVal:
		//	"val" (name=Name | => name=SYM) attr+=Name* "=" exp=Exp | "val" (mid+=MIXID attr+=Name)* "=" exp=Exp | "val" name=Name
		//	"[" (decPat+=DecodePat decPat+=DecodePat*)? "]" ("=" exp=Exp | (PIPE exps+=Exp "=" exps+=Exp)+);
		public ParserRule getRule() { return rule; }

		//"val" (name=Name | => name=SYM) attr+=Name* "=" exp=Exp | "val" (mid+=MIXID attr+=Name)* "=" exp=Exp | "val" name=Name
		//"[" (decPat+=DecodePat decPat+=DecodePat*)? "]" ("=" exp=Exp | (PIPE exps+=Exp "=" exps+=Exp)+)
		public Alternatives getAlternatives() { return cAlternatives; }

		//"val" (name=Name | => name=SYM) attr+=Name* "=" exp=Exp
		public Group getGroup_0() { return cGroup_0; }

		//"val"
		public Keyword getValKeyword_0_0() { return cValKeyword_0_0; }

		//name=Name | => name=SYM
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//name=Name
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_0_0() { return cNameNameParserRuleCall_0_1_0_0; }

		//=> name=SYM
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//SYM
		public RuleCall getNameSYMParserRuleCall_0_1_1_0() { return cNameSYMParserRuleCall_0_1_1_0; }

		//attr+=Name*
		public Assignment getAttrAssignment_0_2() { return cAttrAssignment_0_2; }

		//Name
		public RuleCall getAttrNameParserRuleCall_0_2_0() { return cAttrNameParserRuleCall_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//exp=Exp
		public Assignment getExpAssignment_0_4() { return cExpAssignment_0_4; }

		//Exp
		public RuleCall getExpExpParserRuleCall_0_4_0() { return cExpExpParserRuleCall_0_4_0; }

		//"val" (mid+=MIXID attr+=Name)* "=" exp=Exp
		public Group getGroup_1() { return cGroup_1; }

		//"val"
		public Keyword getValKeyword_1_0() { return cValKeyword_1_0; }

		//(mid+=MIXID attr+=Name)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//mid+=MIXID
		public Assignment getMidAssignment_1_1_0() { return cMidAssignment_1_1_0; }

		//MIXID
		public RuleCall getMidMIXIDParserRuleCall_1_1_0_0() { return cMidMIXIDParserRuleCall_1_1_0_0; }

		//attr+=Name
		public Assignment getAttrAssignment_1_1_1() { return cAttrAssignment_1_1_1; }

		//Name
		public RuleCall getAttrNameParserRuleCall_1_1_1_0() { return cAttrNameParserRuleCall_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//exp=Exp
		public Assignment getExpAssignment_1_3() { return cExpAssignment_1_3; }

		//Exp
		public RuleCall getExpExpParserRuleCall_1_3_0() { return cExpExpParserRuleCall_1_3_0; }

		//"val" name=Name "[" (decPat+=DecodePat decPat+=DecodePat*)? "]" ("=" exp=Exp | (PIPE exps+=Exp "=" exps+=Exp)+)
		public Group getGroup_2() { return cGroup_2; }

		//"val"
		public Keyword getValKeyword_2_0() { return cValKeyword_2_0; }

		//name=Name
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_1_0() { return cNameNameParserRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//(decPat+=DecodePat decPat+=DecodePat*)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//decPat+=DecodePat
		public Assignment getDecPatAssignment_2_3_0() { return cDecPatAssignment_2_3_0; }

		//DecodePat
		public RuleCall getDecPatDecodePatParserRuleCall_2_3_0_0() { return cDecPatDecodePatParserRuleCall_2_3_0_0; }

		//decPat+=DecodePat*
		public Assignment getDecPatAssignment_2_3_1() { return cDecPatAssignment_2_3_1; }

		//DecodePat
		public RuleCall getDecPatDecodePatParserRuleCall_2_3_1_0() { return cDecPatDecodePatParserRuleCall_2_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }

		//"=" exp=Exp | (PIPE exps+=Exp "=" exps+=Exp)+
		public Alternatives getAlternatives_2_5() { return cAlternatives_2_5; }

		//"=" exp=Exp
		public Group getGroup_2_5_0() { return cGroup_2_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_5_0_0() { return cEqualsSignKeyword_2_5_0_0; }

		//exp=Exp
		public Assignment getExpAssignment_2_5_0_1() { return cExpAssignment_2_5_0_1; }

		//Exp
		public RuleCall getExpExpParserRuleCall_2_5_0_1_0() { return cExpExpParserRuleCall_2_5_0_1_0; }

		//(PIPE exps+=Exp "=" exps+=Exp)+
		public Group getGroup_2_5_1() { return cGroup_2_5_1; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_2_5_1_0() { return cPIPETerminalRuleCall_2_5_1_0; }

		//exps+=Exp
		public Assignment getExpsAssignment_2_5_1_1() { return cExpsAssignment_2_5_1_1; }

		//Exp
		public RuleCall getExpsExpParserRuleCall_2_5_1_1_0() { return cExpsExpParserRuleCall_2_5_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_5_1_2() { return cEqualsSignKeyword_2_5_1_2; }

		//exps+=Exp
		public Assignment getExpsAssignment_2_5_1_3() { return cExpsAssignment_2_5_1_3; }

		//Exp
		public RuleCall getExpsExpParserRuleCall_2_5_1_3_0() { return cExpsExpParserRuleCall_2_5_1_3_0; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQidParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttrNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrNameNameParserRuleCall_1_1_0 = (RuleCall)cAttrNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAttrNameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttrNameNameParserRuleCall_1_2_1_0 = (RuleCall)cAttrNameAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// *****************************
		//Export:
		//	name=Qid ("{" attrName+=Name ("," attrName+=Name)* "}")?;
		public ParserRule getRule() { return rule; }

		//name=Qid ("{" attrName+=Name ("," attrName+=Name)* "}")?
		public Group getGroup() { return cGroup; }

		//name=Qid
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Qid
		public RuleCall getNameQidParserRuleCall_0_0() { return cNameQidParserRuleCall_0_0; }

		//("{" attrName+=Name ("," attrName+=Name)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//attrName+=Name
		public Assignment getAttrNameAssignment_1_1() { return cAttrNameAssignment_1_1; }

		//Name
		public RuleCall getAttrNameNameParserRuleCall_1_1_0() { return cAttrNameNameParserRuleCall_1_1_0; }

		//("," attrName+=Name)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//attrName+=Name
		public Assignment getAttrNameAssignment_1_2_1() { return cAttrNameAssignment_1_2_1; }

		//Name
		public RuleCall getAttrNameNameParserRuleCall_1_2_1_0() { return cAttrNameNameParserRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class ConDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConDecls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConDeclsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConDeclsConDeclParserRuleCall_0_0 = (RuleCall)cConDeclsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPIPETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cConDeclsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConDeclsConDeclParserRuleCall_1_1_0 = (RuleCall)cConDeclsAssignment_1_1.eContents().get(0);
		
		//ConDecls:
		//	conDecls+=ConDecl (PIPE conDecls+=ConDecl)*;
		public ParserRule getRule() { return rule; }

		//conDecls+=ConDecl (PIPE conDecls+=ConDecl)*
		public Group getGroup() { return cGroup; }

		//conDecls+=ConDecl
		public Assignment getConDeclsAssignment_0() { return cConDeclsAssignment_0; }

		//ConDecl
		public RuleCall getConDeclsConDeclParserRuleCall_0_0() { return cConDeclsConDeclParserRuleCall_0_0; }

		//(PIPE conDecls+=ConDecl)*
		public Group getGroup_1() { return cGroup_1; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_1_0() { return cPIPETerminalRuleCall_1_0; }

		//conDecls+=ConDecl
		public Assignment getConDeclsAssignment_1_1() { return cConDeclsAssignment_1_1; }

		//ConDecl
		public RuleCall getConDeclsConDeclParserRuleCall_1_1_0() { return cConDeclsConDeclParserRuleCall_1_1_0; }
	}

	public class ConDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameConBindParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTyTyParserRuleCall_1_1_0 = (RuleCall)cTyAssignment_1_1.eContents().get(0);
		
		//ConDecl:
		//	name=ConBind ("of" ty=Ty)?;
		public ParserRule getRule() { return rule; }

		//name=ConBind ("of" ty=Ty)?
		public Group getGroup() { return cGroup; }

		//name=ConBind
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ConBind
		public RuleCall getNameConBindParserRuleCall_0_0() { return cNameConBindParserRuleCall_0_0; }

		//("of" ty=Ty)?
		public Group getGroup_1() { return cGroup_1; }

		//"of"
		public Keyword getOfKeyword_1_0() { return cOfKeyword_1_0; }

		//ty=Ty
		public Assignment getTyAssignment_1_1() { return cTyAssignment_1_1; }

		//Ty
		public RuleCall getTyTyParserRuleCall_1_1_0() { return cTyTyParserRuleCall_1_1_0; }
	}

	public class TyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPIPETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIntParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cPIPETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueQidParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTyBindAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTyBindTyBindParserRuleCall_2_1_1_0 = (RuleCall)cTyBindAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTyBindAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTyBindTyBindParserRuleCall_2_1_2_1_0 = (RuleCall)cTyBindAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsTyElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElementsTyElementParserRuleCall_3_2_1_0 = (RuleCall)cElementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Ty:
		//	value=Int | PIPE value=Int PIPE | value=Qid ("[" tyBind+=TyBind ("," tyBind+=TyBind)* "]")? | "{" elements+=TyElement
		//	("," elements+=TyElement)* "}";
		public ParserRule getRule() { return rule; }

		//value=Int | PIPE value=Int PIPE | value=Qid ("[" tyBind+=TyBind ("," tyBind+=TyBind)* "]")? | "{" elements+=TyElement
		//("," elements+=TyElement)* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=Int
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//Int
		public RuleCall getValueIntParserRuleCall_0_0() { return cValueIntParserRuleCall_0_0; }

		//PIPE value=Int PIPE
		public Group getGroup_1() { return cGroup_1; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_1_0() { return cPIPETerminalRuleCall_1_0; }

		//value=Int
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Int
		public RuleCall getValueIntParserRuleCall_1_1_0() { return cValueIntParserRuleCall_1_1_0; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_1_2() { return cPIPETerminalRuleCall_1_2; }

		//value=Qid ("[" tyBind+=TyBind ("," tyBind+=TyBind)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//value=Qid
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Qid
		public RuleCall getValueQidParserRuleCall_2_0_0() { return cValueQidParserRuleCall_2_0_0; }

		//("[" tyBind+=TyBind ("," tyBind+=TyBind)* "]")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//tyBind+=TyBind
		public Assignment getTyBindAssignment_2_1_1() { return cTyBindAssignment_2_1_1; }

		//TyBind
		public RuleCall getTyBindTyBindParserRuleCall_2_1_1_0() { return cTyBindTyBindParserRuleCall_2_1_1_0; }

		//("," tyBind+=TyBind)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//tyBind+=TyBind
		public Assignment getTyBindAssignment_2_1_2_1() { return cTyBindAssignment_2_1_2_1; }

		//TyBind
		public RuleCall getTyBindTyBindParserRuleCall_2_1_2_1_0() { return cTyBindTyBindParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }

		//"{" elements+=TyElement ("," elements+=TyElement)* "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=TyElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//TyElement
		public RuleCall getElementsTyElementParserRuleCall_3_1_0() { return cElementsTyElementParserRuleCall_3_1_0; }

		//("," elements+=TyElement)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//elements+=TyElement
		public Assignment getElementsAssignment_3_2_1() { return cElementsAssignment_3_2_1; }

		//TyElement
		public RuleCall getElementsTyElementParserRuleCall_3_2_1_0() { return cElementsTyElementParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class TyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TyElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueTyParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TyElement:
		//	name=Name ":" value=Ty;
		public ParserRule getRule() { return rule; }

		//name=Name ":" value=Ty
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Ty
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Ty
		public RuleCall getValueTyParserRuleCall_2_0() { return cValueTyParserRuleCall_2_0; }
	}

	public class TyBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TyBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyQidParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueTyParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//TyBind:
		//	key=Qid ("=" value=Ty)?;
		public ParserRule getRule() { return rule; }

		//key=Qid ("=" value=Ty)?
		public Group getGroup() { return cGroup; }

		//key=Qid
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//Qid
		public RuleCall getKeyQidParserRuleCall_0_0() { return cKeyQidParserRuleCall_0_0; }

		//("=" value=Ty)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=Ty
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Ty
		public RuleCall getValueTyParserRuleCall_1_1_0() { return cValueTyParserRuleCall_1_1_0; }
	}

	public class DecodePatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecodePat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBitPatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTokPatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DecodePat:
		//	BitPat | TokPat;
		public ParserRule getRule() { return rule; }

		//BitPat | TokPat
		public Alternatives getAlternatives() { return cAlternatives; }

		//BitPat
		public RuleCall getBitPatParserRuleCall_0() { return cBitPatParserRuleCall_0; }

		//TokPat
		public RuleCall getTokPatParserRuleCall_1() { return cTokPatParserRuleCall_1; }
	}

	public class BitPatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitPat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBitpatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitpatPrimBitPatParserRuleCall_1_0 = (RuleCall)cBitpatAssignment_1.eContents().get(0);
		private final Assignment cBitpatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBitpatPrimBitPatParserRuleCall_2_0 = (RuleCall)cBitpatAssignment_2.eContents().get(0);
		private final Keyword cApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BitPat:
		//	"\'" bitpat+=PrimBitPat bitpat+=PrimBitPat* "\'";
		public ParserRule getRule() { return rule; }

		//"\'" bitpat+=PrimBitPat bitpat+=PrimBitPat* "\'"
		public Group getGroup() { return cGroup; }

		//"\'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }

		//bitpat+=PrimBitPat
		public Assignment getBitpatAssignment_1() { return cBitpatAssignment_1; }

		//PrimBitPat
		public RuleCall getBitpatPrimBitPatParserRuleCall_1_0() { return cBitpatPrimBitPatParserRuleCall_1_0; }

		//bitpat+=PrimBitPat*
		public Assignment getBitpatAssignment_2() { return cBitpatAssignment_2; }

		//PrimBitPat
		public RuleCall getBitpatPrimBitPatParserRuleCall_2_0() { return cBitpatPrimBitPatParserRuleCall_2_0; }

		//"\'"
		public Keyword getApostropheKeyword_3() { return cApostropheKeyword_3; }
	}

	public class TokPatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TokPat");
		private final Assignment cTokPatAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTokPatAlternatives_0 = (Alternatives)cTokPatAssignment.eContents().get(0);
		private final RuleCall cTokPatIntParserRuleCall_0_0 = (RuleCall)cTokPatAlternatives_0.eContents().get(0);
		private final RuleCall cTokPatQidParserRuleCall_0_1 = (RuleCall)cTokPatAlternatives_0.eContents().get(1);
		
		//TokPat:
		//	tokPat=(Int | Qid);
		public ParserRule getRule() { return rule; }

		//tokPat=(Int | Qid)
		public Assignment getTokPatAssignment() { return cTokPatAssignment; }

		//Int | Qid
		public Alternatives getTokPatAlternatives_0() { return cTokPatAlternatives_0; }

		//Int
		public RuleCall getTokPatIntParserRuleCall_0_0() { return cTokPatIntParserRuleCall_0_0; }

		//Qid
		public RuleCall getTokPatQidParserRuleCall_0_1() { return cTokPatQidParserRuleCall_0_1; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCaseExpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCaseExpCaseExpParserRuleCall_0_0 = (RuleCall)cCaseExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMidAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMidMIXIDParserRuleCall_1_0_0 = (RuleCall)cMidAssignment_1_0.eContents().get(0);
		private final Assignment cCaseExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCaseExpCaseExpParserRuleCall_1_1_0 = (RuleCall)cCaseExpAssignment_1_1.eContents().get(0);
		
		//Exp:
		//	caseExp=CaseExp | mid=MIXID caseExp=CaseExp;
		public ParserRule getRule() { return rule; }

		//caseExp=CaseExp | mid=MIXID caseExp=CaseExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//caseExp=CaseExp
		public Assignment getCaseExpAssignment_0() { return cCaseExpAssignment_0; }

		//CaseExp
		public RuleCall getCaseExpCaseExpParserRuleCall_0_0() { return cCaseExpCaseExpParserRuleCall_0_0; }

		//mid=MIXID caseExp=CaseExp
		public Group getGroup_1() { return cGroup_1; }

		//mid=MIXID
		public Assignment getMidAssignment_1_0() { return cMidAssignment_1_0; }

		//MIXID
		public RuleCall getMidMIXIDParserRuleCall_1_0_0() { return cMidMIXIDParserRuleCall_1_0_0; }

		//caseExp=CaseExp
		public Assignment getCaseExpAssignment_1_1() { return cCaseExpAssignment_1_1; }

		//CaseExp
		public RuleCall getCaseExpCaseExpParserRuleCall_1_1_0() { return cCaseExpCaseExpParserRuleCall_1_1_0; }
	}

	public class CaseExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClosedExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClosedExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClosedExpClosedExpParserRuleCall_1_1_0 = (RuleCall)cClosedExpAssignment_1_1.eContents().get(0);
		private final Keyword cOfKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCasesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCasesCasesParserRuleCall_1_3_0 = (RuleCall)cCasesAssignment_1_3.eContents().get(0);
		private final Keyword cEndKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//CaseExp:
		//	ClosedExp | "case" closedExp=ClosedExp "of" cases=Cases "end";
		public ParserRule getRule() { return rule; }

		//ClosedExp | "case" closedExp=ClosedExp "of" cases=Cases "end"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClosedExp
		public RuleCall getClosedExpParserRuleCall_0() { return cClosedExpParserRuleCall_0; }

		//"case" closedExp=ClosedExp "of" cases=Cases "end"
		public Group getGroup_1() { return cGroup_1; }

		//"case"
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }

		//closedExp=ClosedExp
		public Assignment getClosedExpAssignment_1_1() { return cClosedExpAssignment_1_1; }

		//ClosedExp
		public RuleCall getClosedExpClosedExpParserRuleCall_1_1_0() { return cClosedExpClosedExpParserRuleCall_1_1_0; }

		//"of"
		public Keyword getOfKeyword_1_2() { return cOfKeyword_1_2; }

		//cases=Cases
		public Assignment getCasesAssignment_1_3() { return cCasesAssignment_1_3; }

		//Cases
		public RuleCall getCasesCasesParserRuleCall_1_3_0() { return cCasesCasesParserRuleCall_1_3_0; }

		//"end"
		public Keyword getEndKeyword_1_4() { return cEndKeyword_1_4; }
	}

	public class ClosedExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrElseExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIfCaseExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIfCaseExpCaseExpParserRuleCall_1_1_0 = (RuleCall)cIfCaseExpAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cThenCaseExpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cThenCaseExpCaseExpParserRuleCall_1_3_0 = (RuleCall)cThenCaseExpAssignment_1_3.eContents().get(0);
		private final Keyword cElseKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cElseCaseExpAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cElseCaseExpCaseExpParserRuleCall_1_5_0 = (RuleCall)cElseCaseExpAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDoExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDoExpMonadicExpParserRuleCall_2_1_0 = (RuleCall)cDoExpAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDoExpAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDoExpMonadicExpParserRuleCall_2_2_1_0 = (RuleCall)cDoExpAssignment_2_2_1.eContents().get(0);
		private final Keyword cEndKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ClosedExp:
		//	OrElseExp | "if" ifCaseExp=CaseExp "then" thenCaseExp=CaseExp "else" elseCaseExp=CaseExp | "do" doExp+=MonadicExp (";"
		//	doExp+=MonadicExp)* "end";
		public ParserRule getRule() { return rule; }

		//OrElseExp | "if" ifCaseExp=CaseExp "then" thenCaseExp=CaseExp "else" elseCaseExp=CaseExp | "do" doExp+=MonadicExp (";"
		//doExp+=MonadicExp)* "end"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OrElseExp
		public RuleCall getOrElseExpParserRuleCall_0() { return cOrElseExpParserRuleCall_0; }

		//"if" ifCaseExp=CaseExp "then" thenCaseExp=CaseExp "else" elseCaseExp=CaseExp
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//ifCaseExp=CaseExp
		public Assignment getIfCaseExpAssignment_1_1() { return cIfCaseExpAssignment_1_1; }

		//CaseExp
		public RuleCall getIfCaseExpCaseExpParserRuleCall_1_1_0() { return cIfCaseExpCaseExpParserRuleCall_1_1_0; }

		//"then"
		public Keyword getThenKeyword_1_2() { return cThenKeyword_1_2; }

		//thenCaseExp=CaseExp
		public Assignment getThenCaseExpAssignment_1_3() { return cThenCaseExpAssignment_1_3; }

		//CaseExp
		public RuleCall getThenCaseExpCaseExpParserRuleCall_1_3_0() { return cThenCaseExpCaseExpParserRuleCall_1_3_0; }

		//"else"
		public Keyword getElseKeyword_1_4() { return cElseKeyword_1_4; }

		//elseCaseExp=CaseExp
		public Assignment getElseCaseExpAssignment_1_5() { return cElseCaseExpAssignment_1_5; }

		//CaseExp
		public RuleCall getElseCaseExpCaseExpParserRuleCall_1_5_0() { return cElseCaseExpCaseExpParserRuleCall_1_5_0; }

		//"do" doExp+=MonadicExp (";" doExp+=MonadicExp)* "end"
		public Group getGroup_2() { return cGroup_2; }

		//"do"
		public Keyword getDoKeyword_2_0() { return cDoKeyword_2_0; }

		//doExp+=MonadicExp
		public Assignment getDoExpAssignment_2_1() { return cDoExpAssignment_2_1; }

		//MonadicExp
		public RuleCall getDoExpMonadicExpParserRuleCall_2_1_0() { return cDoExpMonadicExpParserRuleCall_2_1_0; }

		//(";" doExp+=MonadicExp)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//";"
		public Keyword getSemicolonKeyword_2_2_0() { return cSemicolonKeyword_2_2_0; }

		//doExp+=MonadicExp
		public Assignment getDoExpAssignment_2_2_1() { return cDoExpAssignment_2_2_1; }

		//MonadicExp
		public RuleCall getDoExpMonadicExpParserRuleCall_2_2_1_0() { return cDoExpMonadicExpParserRuleCall_2_2_1_0; }

		//"end"
		public Keyword getEndKeyword_2_3() { return cEndKeyword_2_3; }
	}

	public class MonadicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MonadicExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpExpParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		
		//MonadicExp:
		//	=> exp=Exp | name=Name "<-" exp=Exp;
		public ParserRule getRule() { return rule; }

		//=> exp=Exp | name=Name "<-" exp=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> exp=Exp
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }

		//Exp
		public RuleCall getExpExpParserRuleCall_0_0() { return cExpExpParserRuleCall_0_0; }

		//name=Name "<-" exp=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1_1() { return cLessThanSignHyphenMinusKeyword_1_1; }

		//exp=Exp
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }

		//Exp
		public RuleCall getExpExpParserRuleCall_1_2_0() { return cExpExpParserRuleCall_1_2_0; }
	}

	public class CasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cases");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatPatParserRuleCall_0_0 = (RuleCall)cPatAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPIPETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cPatAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPatPatParserRuleCall_3_1_0 = (RuleCall)cPatAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		
		//Cases:
		//	pat+=Pat ":" exp+=Exp (PIPE pat+=Pat ":" exp+=Exp)*;
		public ParserRule getRule() { return rule; }

		//pat+=Pat ":" exp+=Exp (PIPE pat+=Pat ":" exp+=Exp)*
		public Group getGroup() { return cGroup; }

		//pat+=Pat
		public Assignment getPatAssignment_0() { return cPatAssignment_0; }

		//Pat
		public RuleCall getPatPatParserRuleCall_0_0() { return cPatPatParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//exp+=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }

		//(PIPE pat+=Pat ":" exp+=Exp)*
		public Group getGroup_3() { return cGroup_3; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_3_0() { return cPIPETerminalRuleCall_3_0; }

		//pat+=Pat
		public Assignment getPatAssignment_3_1() { return cPatAssignment_3_1; }

		//Pat
		public RuleCall getPatPatParserRuleCall_3_1_0() { return cPatPatParserRuleCall_3_1_0; }

		//":"
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//exp+=Exp
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }

		//Exp
		public RuleCall getExpExpParserRuleCall_3_3_0() { return cExpExpParserRuleCall_3_3_0; }
	}

	public class OrElseExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrElseExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndAlsoExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrElseExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndAlsoExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrElseExp:
		//	AndAlsoExp ({OrElseExp.left=current} "or" right+=AndAlsoExp)*;
		public ParserRule getRule() { return rule; }

		//AndAlsoExp ({OrElseExp.left=current} "or" right+=AndAlsoExp)*
		public Group getGroup() { return cGroup; }

		//AndAlsoExp
		public RuleCall getAndAlsoExpParserRuleCall_0() { return cAndAlsoExpParserRuleCall_0; }

		//({OrElseExp.left=current} "or" right+=AndAlsoExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrElseExp.left=current}
		public Action getOrElseExpLeftAction_1_0() { return cOrElseExpLeftAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right+=AndAlsoExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndAlsoExp
		public RuleCall getRightAndAlsoExpParserRuleCall_1_2_0() { return cRightAndAlsoExpParserRuleCall_1_2_0; }
	}

	public class AndAlsoExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndAlsoExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndAlsoExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndAlsoExp:
		//	RExp ({AndAlsoExp.left=current} "and" right+=RExp)*;
		public ParserRule getRule() { return rule; }

		//RExp ({AndAlsoExp.left=current} "and" right+=RExp)*
		public Group getGroup() { return cGroup; }

		//RExp
		public RuleCall getRExpParserRuleCall_0() { return cRExpParserRuleCall_0; }

		//({AndAlsoExp.left=current} "and" right+=RExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndAlsoExp.left=current}
		public Action getAndAlsoExpLeftAction_1_0() { return cAndAlsoExpLeftAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//right+=RExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RExp
		public RuleCall getRightRExpParserRuleCall_1_2_0() { return cRightRExpParserRuleCall_1_2_0; }
	}

	public class RExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAexpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAexpAExpParserRuleCall_0_0 = (RuleCall)cAexpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSymAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSymSYMParserRuleCall_1_0_0 = (RuleCall)cSymAssignment_1_0.eContents().get(0);
		private final Assignment cAexpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAexpsAExpParserRuleCall_1_1_0 = (RuleCall)cAexpsAssignment_1_1.eContents().get(0);
		
		//RExp:
		//	aexp=AExp (=> sym+=SYM aexps+=AExp)*;
		public ParserRule getRule() { return rule; }

		//aexp=AExp (=> sym+=SYM aexps+=AExp)*
		public Group getGroup() { return cGroup; }

		//aexp=AExp
		public Assignment getAexpAssignment_0() { return cAexpAssignment_0; }

		//AExp
		public RuleCall getAexpAExpParserRuleCall_0_0() { return cAexpAExpParserRuleCall_0_0; }

		//(=> sym+=SYM aexps+=AExp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> sym+=SYM
		public Assignment getSymAssignment_1_0() { return cSymAssignment_1_0; }

		//SYM
		public RuleCall getSymSYMParserRuleCall_1_0_0() { return cSymSYMParserRuleCall_1_0_0; }

		//aexps+=AExp
		public Assignment getAexpsAssignment_1_1() { return cAexpsAssignment_1_1; }

		//AExp
		public RuleCall getAexpsAExpParserRuleCall_1_1_0() { return cAexpsAExpParserRuleCall_1_1_0; }
	}

	public class AExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMexpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMexpMExpParserRuleCall_0_0 = (RuleCall)cMexpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSignAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cSignAlternatives_1_0_0 = (Alternatives)cSignAssignment_1_0.eContents().get(0);
		private final Keyword cSignPlusSignKeyword_1_0_0_0 = (Keyword)cSignAlternatives_1_0_0.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_1_0_0_1 = (Keyword)cSignAlternatives_1_0_0.eContents().get(1);
		private final Assignment cMexpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMexpsMExpParserRuleCall_1_1_0 = (RuleCall)cMexpsAssignment_1_1.eContents().get(0);
		
		//AExp:
		//	mexp=MExp (sign+=("+" | "-") mexps+=MExp)*;
		public ParserRule getRule() { return rule; }

		//mexp=MExp (sign+=("+" | "-") mexps+=MExp)*
		public Group getGroup() { return cGroup; }

		//mexp=MExp
		public Assignment getMexpAssignment_0() { return cMexpAssignment_0; }

		//MExp
		public RuleCall getMexpMExpParserRuleCall_0_0() { return cMexpMExpParserRuleCall_0_0; }

		//(sign+=("+" | "-") mexps+=MExp)*
		public Group getGroup_1() { return cGroup_1; }

		//sign+=("+" | "-")
		public Assignment getSignAssignment_1_0() { return cSignAssignment_1_0; }

		//"+" | "-"
		public Alternatives getSignAlternatives_1_0_0() { return cSignAlternatives_1_0_0; }

		//"+"
		public Keyword getSignPlusSignKeyword_1_0_0_0() { return cSignPlusSignKeyword_1_0_0_0; }

		//"-"
		public Keyword getSignHyphenMinusKeyword_1_0_0_1() { return cSignHyphenMinusKeyword_1_0_0_1; }

		//mexps+=MExp
		public Assignment getMexpsAssignment_1_1() { return cMexpsAssignment_1_1; }

		//MExp
		public RuleCall getMexpsMExpParserRuleCall_1_1_0() { return cMexpsMExpParserRuleCall_1_1_0; }
	}

	public class MExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cApplyexpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cApplyexpsApplyExpParserRuleCall_0_0 = (RuleCall)cApplyexpsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cApplyexpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cApplyexpsApplyExpParserRuleCall_1_1_0 = (RuleCall)cApplyexpsAssignment_1_1.eContents().get(0);
		
		//MExp:
		//	applyexps+=ApplyExp ("^" applyexps+=ApplyExp)*;
		public ParserRule getRule() { return rule; }

		//applyexps+=ApplyExp ("^" applyexps+=ApplyExp)*
		public Group getGroup() { return cGroup; }

		//applyexps+=ApplyExp
		public Assignment getApplyexpsAssignment_0() { return cApplyexpsAssignment_0; }

		//ApplyExp
		public RuleCall getApplyexpsApplyExpParserRuleCall_0_0() { return cApplyexpsApplyExpParserRuleCall_0_0; }

		//("^" applyexps+=ApplyExp)*
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//applyexps+=ApplyExp
		public Assignment getApplyexpsAssignment_1_1() { return cApplyexpsAssignment_1_1; }

		//ApplyExp
		public RuleCall getApplyexpsApplyExpParserRuleCall_1_1_0() { return cApplyexpsApplyExpParserRuleCall_1_1_0; }
	}

	public class ApplyExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplyExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegTildeKeyword_0_0 = (Keyword)cNegAssignment_0.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpAtomicExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//ApplyExp:
		//	neg?="~"? => exp=AtomicExp;
		public ParserRule getRule() { return rule; }

		//neg?="~"? => exp=AtomicExp
		public Group getGroup() { return cGroup; }

		//neg?="~"?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//"~"
		public Keyword getNegTildeKeyword_0_0() { return cNegTildeKeyword_0_0; }

		//=> exp=AtomicExp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//AtomicExp
		public RuleCall getExpAtomicExpParserRuleCall_1_0() { return cExpAtomicExpParserRuleCall_1_0; }
	}

	public class AtomicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomicExpAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLitParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAtomicExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdQidParserRuleCall_2_0_0 = (RuleCall)cIdAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cIdAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdQidParserRuleCall_2_1_1_0 = (RuleCall)cIdAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAtomicExpAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cConUseParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cCommercialAtKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFieldsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_4_2_0 = (RuleCall)cFieldsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_4_3_1_0 = (RuleCall)cFieldsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cAtomicExpAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cDollarSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cQidParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_6_1_0 = (RuleCall)cExpAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final RuleCall cDOTTerminalRuleCall_6_3_0 = (RuleCall)cGroup_6_3.eContents().get(0);
		private final Assignment cIdAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cIdQidParserRuleCall_6_3_1_0 = (RuleCall)cIdAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cAtomicExpAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Assignment cIdAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final RuleCall cIdNameParserRuleCall_7_2_0_0 = (RuleCall)cIdAssignment_7_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_2_1 = (Keyword)cGroup_7_2.eContents().get(1);
		private final Assignment cExpsAssignment_7_2_2 = (Assignment)cGroup_7_2.eContents().get(2);
		private final RuleCall cExpsExpParserRuleCall_7_2_2_0 = (RuleCall)cExpsAssignment_7_2_2.eContents().get(0);
		private final Group cGroup_7_2_3 = (Group)cGroup_7_2.eContents().get(3);
		private final Assignment cIdAssignment_7_2_3_0 = (Assignment)cGroup_7_2_3.eContents().get(0);
		private final RuleCall cIdNameParserRuleCall_7_2_3_0_0 = (RuleCall)cIdAssignment_7_2_3_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_2_3_1 = (Keyword)cGroup_7_2_3.eContents().get(1);
		private final Assignment cExpsAssignment_7_2_3_2 = (Assignment)cGroup_7_2_3.eContents().get(2);
		private final RuleCall cExpsExpParserRuleCall_7_2_3_2_0 = (RuleCall)cExpsAssignment_7_2_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLetKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cValDeclAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValDeclValueDeclParserRuleCall_8_1_0 = (RuleCall)cValDeclAssignment_8_1.eContents().get(0);
		private final Keyword cInKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cExpAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_8_3_0 = (RuleCall)cExpAssignment_8_3.eContents().get(0);
		private final Keyword cEndKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//AtomicExp:
		//	{AtomicExp} Lit | {AtomicExp} String | => id+=Qid (DOT id+=Qid)* | {AtomicExp} ConUse | "@" "{" fields+=Field (","
		//	fields+=Field)* "}" | {AtomicExp} "$" Qid | "(" exp=Exp ")" (DOT id+=Qid)* | {AtomicExp} "{" (id+=Name "=" exps+=Exp
		//	(=> id+=Name "=" exps+=Exp)*)? "}" | "let" valDecl+=ValueDecl+ "in" exp=Exp "end";
		public ParserRule getRule() { return rule; }

		//{AtomicExp} Lit | {AtomicExp} String | => id+=Qid (DOT id+=Qid)* | {AtomicExp} ConUse | "@" "{" fields+=Field (","
		//fields+=Field)* "}" | {AtomicExp} "$" Qid | "(" exp=Exp ")" (DOT id+=Qid)* | {AtomicExp} "{" (id+=Name "=" exps+=Exp
		//(=> id+=Name "=" exps+=Exp)*)? "}" | "let" valDecl+=ValueDecl+ "in" exp=Exp "end"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtomicExp} Lit
		public Group getGroup_0() { return cGroup_0; }

		//{AtomicExp}
		public Action getAtomicExpAction_0_0() { return cAtomicExpAction_0_0; }

		//Lit
		public RuleCall getLitParserRuleCall_0_1() { return cLitParserRuleCall_0_1; }

		//{AtomicExp} String
		public Group getGroup_1() { return cGroup_1; }

		//{AtomicExp}
		public Action getAtomicExpAction_1_0() { return cAtomicExpAction_1_0; }

		//String
		public RuleCall getStringParserRuleCall_1_1() { return cStringParserRuleCall_1_1; }

		//=> id+=Qid (DOT id+=Qid)*
		public Group getGroup_2() { return cGroup_2; }

		//=> id+=Qid
		public Assignment getIdAssignment_2_0() { return cIdAssignment_2_0; }

		//Qid
		public RuleCall getIdQidParserRuleCall_2_0_0() { return cIdQidParserRuleCall_2_0_0; }

		//(=> DOT id+=Qid)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> DOT
		public RuleCall getDOTTerminalRuleCall_2_1_0() { return cDOTTerminalRuleCall_2_1_0; }

		//id+=Qid
		public Assignment getIdAssignment_2_1_1() { return cIdAssignment_2_1_1; }

		//Qid
		public RuleCall getIdQidParserRuleCall_2_1_1_0() { return cIdQidParserRuleCall_2_1_1_0; }

		//{AtomicExp} ConUse
		public Group getGroup_3() { return cGroup_3; }

		//{AtomicExp}
		public Action getAtomicExpAction_3_0() { return cAtomicExpAction_3_0; }

		//ConUse
		public RuleCall getConUseParserRuleCall_3_1() { return cConUseParserRuleCall_3_1; }

		//"@" "{" fields+=Field ("," fields+=Field)* "}"
		public Group getGroup_4() { return cGroup_4; }

		//"@"
		public Keyword getCommercialAtKeyword_4_0() { return cCommercialAtKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//fields+=Field
		public Assignment getFieldsAssignment_4_2() { return cFieldsAssignment_4_2; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_2_0() { return cFieldsFieldParserRuleCall_4_2_0; }

		//("," fields+=Field)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//fields+=Field
		public Assignment getFieldsAssignment_4_3_1() { return cFieldsAssignment_4_3_1; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_3_1_0() { return cFieldsFieldParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//{AtomicExp} "$" Qid
		public Group getGroup_5() { return cGroup_5; }

		//{AtomicExp}
		public Action getAtomicExpAction_5_0() { return cAtomicExpAction_5_0; }

		//"$"
		public Keyword getDollarSignKeyword_5_1() { return cDollarSignKeyword_5_1; }

		//Qid
		public RuleCall getQidParserRuleCall_5_2() { return cQidParserRuleCall_5_2; }

		//"(" exp=Exp ")" (DOT id+=Qid)*
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//exp=Exp
		public Assignment getExpAssignment_6_1() { return cExpAssignment_6_1; }

		//Exp
		public RuleCall getExpExpParserRuleCall_6_1_0() { return cExpExpParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//(=> DOT id+=Qid)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//=> DOT
		public RuleCall getDOTTerminalRuleCall_6_3_0() { return cDOTTerminalRuleCall_6_3_0; }

		//id+=Qid
		public Assignment getIdAssignment_6_3_1() { return cIdAssignment_6_3_1; }

		//Qid
		public RuleCall getIdQidParserRuleCall_6_3_1_0() { return cIdQidParserRuleCall_6_3_1_0; }

		//{AtomicExp} "{" (id+=Name "=" exps+=Exp (=> id+=Name "=" exps+=Exp)*)? "}"
		public Group getGroup_7() { return cGroup_7; }

		//{AtomicExp}
		public Action getAtomicExpAction_7_0() { return cAtomicExpAction_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//(id+=Name "=" exps+=Exp (=> id+=Name "=" exps+=Exp)*)?
		public Group getGroup_7_2() { return cGroup_7_2; }

		//id+=Name
		public Assignment getIdAssignment_7_2_0() { return cIdAssignment_7_2_0; }

		//Name
		public RuleCall getIdNameParserRuleCall_7_2_0_0() { return cIdNameParserRuleCall_7_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_7_2_1() { return cEqualsSignKeyword_7_2_1; }

		//exps+=Exp
		public Assignment getExpsAssignment_7_2_2() { return cExpsAssignment_7_2_2; }

		//Exp
		public RuleCall getExpsExpParserRuleCall_7_2_2_0() { return cExpsExpParserRuleCall_7_2_2_0; }

		//(=> id+=Name "=" exps+=Exp)*
		public Group getGroup_7_2_3() { return cGroup_7_2_3; }

		//=> id+=Name
		public Assignment getIdAssignment_7_2_3_0() { return cIdAssignment_7_2_3_0; }

		//Name
		public RuleCall getIdNameParserRuleCall_7_2_3_0_0() { return cIdNameParserRuleCall_7_2_3_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_7_2_3_1() { return cEqualsSignKeyword_7_2_3_1; }

		//exps+=Exp
		public Assignment getExpsAssignment_7_2_3_2() { return cExpsAssignment_7_2_3_2; }

		//Exp
		public RuleCall getExpsExpParserRuleCall_7_2_3_2_0() { return cExpsExpParserRuleCall_7_2_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//"let" valDecl+=ValueDecl+ "in" exp=Exp "end"
		public Group getGroup_8() { return cGroup_8; }

		//"let"
		public Keyword getLetKeyword_8_0() { return cLetKeyword_8_0; }

		//valDecl+=ValueDecl+
		public Assignment getValDeclAssignment_8_1() { return cValDeclAssignment_8_1; }

		//ValueDecl
		public RuleCall getValDeclValueDeclParserRuleCall_8_1_0() { return cValDeclValueDeclParserRuleCall_8_1_0; }

		//"in"
		public Keyword getInKeyword_8_2() { return cInKeyword_8_2; }

		//exp=Exp
		public Assignment getExpAssignment_8_3() { return cExpAssignment_8_3; }

		//Exp
		public RuleCall getExpExpParserRuleCall_8_3_0() { return cExpExpParserRuleCall_8_3_0; }

		//"end"
		public Keyword getEndKeyword_8_4() { return cEndKeyword_8_4; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Field:
		//	name=Name "=" exp=Exp | "~" name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name "=" exp=Exp | "~" name=Name
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Name "=" exp=Exp
		public Group getGroup_0() { return cGroup_0; }

		//name=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//exp=Exp
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }

		//Exp
		public RuleCall getExpExpParserRuleCall_0_2_0() { return cExpExpParserRuleCall_0_2_0; }

		//"~" name=Name
		public Group getGroup_1() { return cGroup_1; }

		//"~"
		public Keyword getTildeKeyword_1_0() { return cTildeKeyword_1_0; }

		//name=Name
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0() { return cNameNameParserRuleCall_1_1_0; }
	}

	public class ValueDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cExpParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ValueDecl:
		//	"val" Name Name* "=" Exp;
		public ParserRule getRule() { return rule; }

		//"val" Name Name* "=" Exp
		public Group getGroup() { return cGroup; }

		//"val"
		public Keyword getValKeyword_0() { return cValKeyword_0; }

		//Name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }

		//Name*
		public RuleCall getNameParserRuleCall_2() { return cNameParserRuleCall_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//Exp
		public RuleCall getExpParserRuleCall_4() { return cExpParserRuleCall_4; }
	}

	public class StringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRCHARParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//String:
		//	"\"" STRCHAR* "\"";
		public ParserRule getRule() { return rule; }

		//"\"" STRCHAR* "\""
		public Group getGroup() { return cGroup; }

		//"\""
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }

		//STRCHAR*
		public RuleCall getSTRCHARParserRuleCall_1() { return cSTRCHARParserRuleCall_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}

	public class PatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cConUseParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cPatParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		////DataType Rules
		//Pat:
		//	"_" | Lit | => Name | ConUse Pat?;
		public ParserRule getRule() { return rule; }

		//"_" | Lit | => Name | ConUse Pat?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//Lit
		public RuleCall getLitParserRuleCall_1() { return cLitParserRuleCall_1; }

		//=> Name
		public RuleCall getNameParserRuleCall_2() { return cNameParserRuleCall_2; }

		//ConUse Pat?
		public Group getGroup_3() { return cGroup_3; }

		//ConUse
		public RuleCall getConUseParserRuleCall_3_0() { return cConUseParserRuleCall_3_0; }

		//Pat?
		public RuleCall getPatParserRuleCall_3_1() { return cPatParserRuleCall_3_1; }
	}

	public class LitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cApostropheKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBITSTRParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cApostropheKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Lit:
		//	Int | "\'" BITSTR? "\'";
		public ParserRule getRule() { return rule; }

		//Int | "\'" BITSTR? "\'"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Int
		public RuleCall getIntParserRuleCall_0() { return cIntParserRuleCall_0; }

		//"\'" BITSTR? "\'"
		public Group getGroup_1() { return cGroup_1; }

		//"\'"
		public Keyword getApostropheKeyword_1_0() { return cApostropheKeyword_1_0; }

		//BITSTR?
		public RuleCall getBITSTRParserRuleCall_1_1() { return cBITSTRParserRuleCall_1_1; }

		//"\'"
		public Keyword getApostropheKeyword_1_2() { return cApostropheKeyword_1_2; }
	}

	public class PrimBitPatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimBitPat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBITSTRParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cQidParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cBitPatOrIntParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PrimBitPat:
		//	BITSTR | Qid BitPatOrInt?;
		public ParserRule getRule() { return rule; }

		//=> BITSTR | Qid BitPatOrInt?
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> BITSTR
		public RuleCall getBITSTRParserRuleCall_0() { return cBITSTRParserRuleCall_0; }

		//Qid BitPatOrInt?
		public Group getGroup_1() { return cGroup_1; }

		//Qid
		public RuleCall getQidParserRuleCall_1_0() { return cQidParserRuleCall_1_0; }

		//BitPatOrInt?
		public RuleCall getBitPatOrIntParserRuleCall_1_1() { return cBitPatOrIntParserRuleCall_1_1; }
	}

	public class BitPatOrIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitPatOrInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPOSINTParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBITSTRParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//BitPatOrInt:
		//	":" POSINT | "@" BITSTR;
		public ParserRule getRule() { return rule; }

		//":" POSINT | "@" BITSTR
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" POSINT
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//POSINT
		public RuleCall getPOSINTParserRuleCall_0_1() { return cPOSINTParserRuleCall_0_1; }

		//"@" BITSTR
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//BITSTR
		public RuleCall getBITSTRParserRuleCall_1_1() { return cBITSTRParserRuleCall_1_1; }
	}

	public class IntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Int");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPOSINTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNEGINTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Int:
		//	POSINT | NEGINT;
		public ParserRule getRule() { return rule; }

		//POSINT | NEGINT
		public Alternatives getAlternatives() { return cAlternatives; }

		//POSINT
		public RuleCall getPOSINTParserRuleCall_0() { return cPOSINTParserRuleCall_0; }

		//NEGINT
		public RuleCall getNEGINTParserRuleCall_1() { return cNEGINTParserRuleCall_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final RuleCall cIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDParserRuleCall() { return cIDParserRuleCall; }
	}

	public class ConBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConBind");
		private final RuleCall cCONSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConBind:
		//	CONS;
		public ParserRule getRule() { return rule; }

		//CONS
		public RuleCall getCONSParserRuleCall() { return cCONSParserRuleCall; }
	}

	public class ConUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConUse");
		private final RuleCall cCONSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConUse:
		//	CONS;
		public ParserRule getRule() { return rule; }

		//CONS
		public RuleCall getCONSParserRuleCall() { return cCONSParserRuleCall; }
	}

	public class QidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Qid");
		private final RuleCall cIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Qid:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDParserRuleCall() { return cIDParserRuleCall; }
	}

	public class POSINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POSINT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNUMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXNUMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//POSINT:
		//	NUM | HEXNUM;
		public ParserRule getRule() { return rule; }

		//NUM | HEXNUM
		public Alternatives getAlternatives() { return cAlternatives; }

		//NUM
		public RuleCall getNUMParserRuleCall_0() { return cNUMParserRuleCall_0; }

		//HEXNUM
		public RuleCall getHEXNUMParserRuleCall_1() { return cHEXNUMParserRuleCall_1; }
	}

	public class NEGINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NEGINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNUMParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NEGINT:
		//	"~" NUM;
		public ParserRule getRule() { return rule; }

		//"~" NUM
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//NUM
		public RuleCall getNUMParserRuleCall_1() { return cNUMParserRuleCall_1; }
	}

	public class NUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM");
		private final RuleCall cDIGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NUM:
		//	=> DIG+;
		public ParserRule getRule() { return rule; }

		//=> DIG+
		public RuleCall getDIGParserRuleCall() { return cDIGParserRuleCall; }
	}

	public class HEXNUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HEXNUM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHEXDIGITParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//HEXNUM:
		//	"0x" => HEXDIGIT+;
		public ParserRule getRule() { return rule; }

		//"0x" => HEXDIGIT+
		public Group getGroup() { return cGroup; }

		//"0x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//=> HEXDIGIT+
		public RuleCall getHEXDIGITParserRuleCall_1() { return cHEXDIGITParserRuleCall_1; }
	}

	public class SYMIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SYMID");
		private final RuleCall cSYMParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SYMID:
		//	SYM+;
		public ParserRule getRule() { return rule; }

		//SYM+
		public RuleCall getSYMParserRuleCall() { return cSYMParserRuleCall; }
	}

	public class BITSTRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BITSTR");
		private final RuleCall cBINARYParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BITSTR:
		//	=> BINARY+;
		public ParserRule getRule() { return rule; }

		//=> BINARY+
		public RuleCall getBINARYParserRuleCall() { return cBINARYParserRuleCall; }
	}

	public class MIXIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MIXID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDCHARParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MIXID:
		//	"_" => IDCHAR+;
		public ParserRule getRule() { return rule; }

		//"_" => IDCHAR+
		public Group getGroup() { return cGroup; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//=> IDCHAR+
		public RuleCall getIDCHARParserRuleCall_1() { return cIDCHARParserRuleCall_1; }
	}

	public class CONSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CONS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cULETTERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDCHARParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CONS:
		//	ULETTER => IDCHAR*;
		public ParserRule getRule() { return rule; }

		//ULETTER => IDCHAR*
		public Group getGroup() { return cGroup; }

		//ULETTER
		public RuleCall getULETTERParserRuleCall_0() { return cULETTERParserRuleCall_0; }

		//=> IDCHAR*
		public RuleCall getIDCHARParserRuleCall_1() { return cIDCHARParserRuleCall_1; }
	}

	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLETTERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDCHARParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ID:
		//	LETTER => IDCHAR*;
		public ParserRule getRule() { return rule; }

		//LETTER => IDCHAR*
		public Group getGroup() { return cGroup; }

		//LETTER
		public RuleCall getLETTERParserRuleCall_0() { return cLETTERParserRuleCall_0; }

		//=> IDCHAR*
		public RuleCall getIDCHARParserRuleCall_1() { return cIDCHARParserRuleCall_1; }
	}

	public class STRCHARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STRCHAR");
		private final RuleCall cLETTERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////TODO
		//STRCHAR:
		//	LETTER;
		public ParserRule getRule() { return rule; }

		//LETTER
		public RuleCall getLETTERParserRuleCall() { return cLETTERParserRuleCall; }
	}

	public class HEXDIGITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HEXDIGIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDIGParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXCHARParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HEXDIGIT:
		//	DIG | HEXCHAR;
		public ParserRule getRule() { return rule; }

		//DIG | HEXCHAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//DIG
		public RuleCall getDIGParserRuleCall_0() { return cDIGParserRuleCall_0; }

		//HEXCHAR
		public RuleCall getHEXCHARParserRuleCall_1() { return cHEXCHARParserRuleCall_1; }
	}

	public class HEXCHARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HEXCHAR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLHEXCHARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUHEXCHARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HEXCHAR:
		//	LHEXCHAR | UHEXCHAR;
		public ParserRule getRule() { return rule; }

		//LHEXCHAR | UHEXCHAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//LHEXCHAR
		public RuleCall getLHEXCHARTerminalRuleCall_0() { return cLHEXCHARTerminalRuleCall_0; }

		//UHEXCHAR
		public RuleCall getUHEXCHARTerminalRuleCall_1() { return cUHEXCHARTerminalRuleCall_1; }
	}

	public class ULETTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ULETTER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUHEXCHARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNHEXCHARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ULETTER:
		//	UHEXCHAR | UNHEXCHAR;
		public ParserRule getRule() { return rule; }

		//UHEXCHAR | UNHEXCHAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//UHEXCHAR
		public RuleCall getUHEXCHARTerminalRuleCall_0() { return cUHEXCHARTerminalRuleCall_0; }

		//UNHEXCHAR
		public RuleCall getUNHEXCHARTerminalRuleCall_1() { return cUNHEXCHARTerminalRuleCall_1; }
	}

	public class LETTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLHEXCHARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLNHEXCHARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cULETTERParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSLASHTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LETTER:
		//	LHEXCHAR | LNHEXCHAR | ULETTER | SLASH;
		public ParserRule getRule() { return rule; }

		//LHEXCHAR | LNHEXCHAR | ULETTER | SLASH
		public Alternatives getAlternatives() { return cAlternatives; }

		//LHEXCHAR
		public RuleCall getLHEXCHARTerminalRuleCall_0() { return cLHEXCHARTerminalRuleCall_0; }

		//LNHEXCHAR
		public RuleCall getLNHEXCHARTerminalRuleCall_1() { return cLNHEXCHARTerminalRuleCall_1; }

		//ULETTER
		public RuleCall getULETTERParserRuleCall_2() { return cULETTERParserRuleCall_2; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_3() { return cSLASHTerminalRuleCall_3; }
	}

	public class IDCHARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDCHAR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIGParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCHARSYMTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IDCHAR:
		//	LETTER | DIG | CHARSYM;
		public ParserRule getRule() { return rule; }

		//LETTER | DIG | CHARSYM
		public Alternatives getAlternatives() { return cAlternatives; }

		//LETTER
		public RuleCall getLETTERParserRuleCall_0() { return cLETTERParserRuleCall_0; }

		//DIG
		public RuleCall getDIGParserRuleCall_1() { return cDIGParserRuleCall_1; }

		//CHARSYM
		public RuleCall getCHARSYMTerminalRuleCall_2() { return cCHARSYMTerminalRuleCall_2; }
	}

	public class BINARYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBINDIGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPIPETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BINARY:
		//	BINDIG | BS | DOT | PIPE;
		public ParserRule getRule() { return rule; }

		//BINDIG | BS | DOT | PIPE
		public Alternatives getAlternatives() { return cAlternatives; }

		//BINDIG
		public RuleCall getBINDIGTerminalRuleCall_0() { return cBINDIGTerminalRuleCall_0; }

		//BS
		public RuleCall getBSTerminalRuleCall_1() { return cBSTerminalRuleCall_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2() { return cDOTTerminalRuleCall_2; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_3() { return cPIPETerminalRuleCall_3; }
	}

	public class DIGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIG");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBINDIGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNBINDIGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DIG:
		//	BINDIG | NBINDIG;
		public ParserRule getRule() { return rule; }

		//BINDIG | NBINDIG
		public Alternatives getAlternatives() { return cAlternatives; }

		//BINDIG
		public RuleCall getBINDIGTerminalRuleCall_0() { return cBINDIGTerminalRuleCall_0; }

		//NBINDIG
		public RuleCall getNBINDIGTerminalRuleCall_1() { return cNBINDIGTerminalRuleCall_1; }
	}

	public class SYMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SYM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCHARSYMTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOTHERSYMTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SYM:
		//	BS | SLASH | DOT | CHARSYM | OTHERSYM;
		public ParserRule getRule() { return rule; }

		//BS | SLASH | DOT | CHARSYM | OTHERSYM
		public Alternatives getAlternatives() { return cAlternatives; }

		//BS
		public RuleCall getBSTerminalRuleCall_0() { return cBSTerminalRuleCall_0; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_1() { return cSLASHTerminalRuleCall_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2() { return cDOTTerminalRuleCall_2; }

		//CHARSYM
		public RuleCall getCHARSYMTerminalRuleCall_3() { return cCHARSYMTerminalRuleCall_3; }

		//OTHERSYM
		public RuleCall getOTHERSYMTerminalRuleCall_4() { return cOTHERSYMTerminalRuleCall_4; }
	}
	
	
	private ModelElements pModel;
	private DeclElements pDecl;
	private DeclGranularityElements pDeclGranularity;
	private DeclExportElements pDeclExport;
	private DeclTypeElements pDeclType;
	private DeclValElements pDeclVal;
	private ExportElements pExport;
	private ConDeclsElements pConDecls;
	private ConDeclElements pConDecl;
	private TyElements pTy;
	private TyElementElements pTyElement;
	private TyBindElements pTyBind;
	private DecodePatElements pDecodePat;
	private BitPatElements pBitPat;
	private TokPatElements pTokPat;
	private ExpElements pExp;
	private CaseExpElements pCaseExp;
	private ClosedExpElements pClosedExp;
	private MonadicExpElements pMonadicExp;
	private CasesElements pCases;
	private OrElseExpElements pOrElseExp;
	private AndAlsoExpElements pAndAlsoExp;
	private RExpElements pRExp;
	private AExpElements pAExp;
	private MExpElements pMExp;
	private ApplyExpElements pApplyExp;
	private AtomicExpElements pAtomicExp;
	private FieldElements pField;
	private ValueDeclElements pValueDecl;
	private StringElements pString;
	private PatElements pPat;
	private LitElements pLit;
	private PrimBitPatElements pPrimBitPat;
	private BitPatOrIntElements pBitPatOrInt;
	private IntElements pInt;
	private NameElements pName;
	private ConBindElements pConBind;
	private ConUseElements pConUse;
	private QidElements pQid;
	private POSINTElements pPOSINT;
	private NEGINTElements pNEGINT;
	private NUMElements pNUM;
	private HEXNUMElements pHEXNUM;
	private SYMIDElements pSYMID;
	private BITSTRElements pBITSTR;
	private MIXIDElements pMIXID;
	private CONSElements pCONS;
	private IDElements pID;
	private STRCHARElements pSTRCHAR;
	private HEXDIGITElements pHEXDIGIT;
	private HEXCHARElements pHEXCHAR;
	private ULETTERElements pULETTER;
	private LETTERElements pLETTER;
	private IDCHARElements pIDCHAR;
	private BINARYElements pBINARY;
	private DIGElements pDIG;
	private SYMElements pSYM;
	private TerminalRule tBINDIG;
	private TerminalRule tNBINDIG;
	private TerminalRule tLHEXCHAR;
	private TerminalRule tUHEXCHAR;
	private TerminalRule tLNHEXCHAR;
	private TerminalRule tUNHEXCHAR;
	private TerminalRule tBS;
	private TerminalRule tSLASH;
	private TerminalRule tDOT;
	private TerminalRule tPIPE;
	private TerminalRule tCHARSYM;
	private TerminalRule tOTHERSYM;
	private TerminalRule tWS;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public GDSLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gdsl.plugin.GDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	decl+=Decl (";"? decl+=Decl)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// *****************************
	//Decl:
	//	DeclGranularity | DeclExport | DeclType | DeclVal;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//// *****************************
	//DeclGranularity:
	//	name="granularity" "=" granularity=Int;
	public DeclGranularityElements getDeclGranularityAccess() {
		return (pDeclGranularity != null) ? pDeclGranularity : (pDeclGranularity = new DeclGranularityElements());
	}
	
	public ParserRule getDeclGranularityRule() {
		return getDeclGranularityAccess().getRule();
	}

	//DeclExport:
	//	name="export" "=" exports+=Export*;
	public DeclExportElements getDeclExportAccess() {
		return (pDeclExport != null) ? pDeclExport : (pDeclExport = new DeclExportElements());
	}
	
	public ParserRule getDeclExportRule() {
		return getDeclExportAccess().getRule();
	}

	//DeclType:
	//	"type" name=Name (("=" => value=ConDecls | value=Ty) | "[" attrName+=Name ("," attrName+=Name)* "]" "="
	//	value=ConDecls);
	public DeclTypeElements getDeclTypeAccess() {
		return (pDeclType != null) ? pDeclType : (pDeclType = new DeclTypeElements());
	}
	
	public ParserRule getDeclTypeRule() {
		return getDeclTypeAccess().getRule();
	}

	//DeclVal:
	//	"val" (name=Name | => name=SYM) attr+=Name* "=" exp=Exp | "val" (mid+=MIXID attr+=Name)* "=" exp=Exp | "val" name=Name
	//	"[" (decPat+=DecodePat decPat+=DecodePat*)? "]" ("=" exp=Exp | (PIPE exps+=Exp "=" exps+=Exp)+);
	public DeclValElements getDeclValAccess() {
		return (pDeclVal != null) ? pDeclVal : (pDeclVal = new DeclValElements());
	}
	
	public ParserRule getDeclValRule() {
		return getDeclValAccess().getRule();
	}

	//// *****************************
	//Export:
	//	name=Qid ("{" attrName+=Name ("," attrName+=Name)* "}")?;
	public ExportElements getExportAccess() {
		return (pExport != null) ? pExport : (pExport = new ExportElements());
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//ConDecls:
	//	conDecls+=ConDecl (PIPE conDecls+=ConDecl)*;
	public ConDeclsElements getConDeclsAccess() {
		return (pConDecls != null) ? pConDecls : (pConDecls = new ConDeclsElements());
	}
	
	public ParserRule getConDeclsRule() {
		return getConDeclsAccess().getRule();
	}

	//ConDecl:
	//	name=ConBind ("of" ty=Ty)?;
	public ConDeclElements getConDeclAccess() {
		return (pConDecl != null) ? pConDecl : (pConDecl = new ConDeclElements());
	}
	
	public ParserRule getConDeclRule() {
		return getConDeclAccess().getRule();
	}

	//Ty:
	//	value=Int | PIPE value=Int PIPE | value=Qid ("[" tyBind+=TyBind ("," tyBind+=TyBind)* "]")? | "{" elements+=TyElement
	//	("," elements+=TyElement)* "}";
	public TyElements getTyAccess() {
		return (pTy != null) ? pTy : (pTy = new TyElements());
	}
	
	public ParserRule getTyRule() {
		return getTyAccess().getRule();
	}

	//TyElement:
	//	name=Name ":" value=Ty;
	public TyElementElements getTyElementAccess() {
		return (pTyElement != null) ? pTyElement : (pTyElement = new TyElementElements());
	}
	
	public ParserRule getTyElementRule() {
		return getTyElementAccess().getRule();
	}

	//TyBind:
	//	key=Qid ("=" value=Ty)?;
	public TyBindElements getTyBindAccess() {
		return (pTyBind != null) ? pTyBind : (pTyBind = new TyBindElements());
	}
	
	public ParserRule getTyBindRule() {
		return getTyBindAccess().getRule();
	}

	//DecodePat:
	//	BitPat | TokPat;
	public DecodePatElements getDecodePatAccess() {
		return (pDecodePat != null) ? pDecodePat : (pDecodePat = new DecodePatElements());
	}
	
	public ParserRule getDecodePatRule() {
		return getDecodePatAccess().getRule();
	}

	//BitPat:
	//	"\'" bitpat+=PrimBitPat bitpat+=PrimBitPat* "\'";
	public BitPatElements getBitPatAccess() {
		return (pBitPat != null) ? pBitPat : (pBitPat = new BitPatElements());
	}
	
	public ParserRule getBitPatRule() {
		return getBitPatAccess().getRule();
	}

	//TokPat:
	//	tokPat=(Int | Qid);
	public TokPatElements getTokPatAccess() {
		return (pTokPat != null) ? pTokPat : (pTokPat = new TokPatElements());
	}
	
	public ParserRule getTokPatRule() {
		return getTokPatAccess().getRule();
	}

	//Exp:
	//	caseExp=CaseExp | mid=MIXID caseExp=CaseExp;
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//CaseExp:
	//	ClosedExp | "case" closedExp=ClosedExp "of" cases=Cases "end";
	public CaseExpElements getCaseExpAccess() {
		return (pCaseExp != null) ? pCaseExp : (pCaseExp = new CaseExpElements());
	}
	
	public ParserRule getCaseExpRule() {
		return getCaseExpAccess().getRule();
	}

	//ClosedExp:
	//	OrElseExp | "if" ifCaseExp=CaseExp "then" thenCaseExp=CaseExp "else" elseCaseExp=CaseExp | "do" doExp+=MonadicExp (";"
	//	doExp+=MonadicExp)* "end";
	public ClosedExpElements getClosedExpAccess() {
		return (pClosedExp != null) ? pClosedExp : (pClosedExp = new ClosedExpElements());
	}
	
	public ParserRule getClosedExpRule() {
		return getClosedExpAccess().getRule();
	}

	//MonadicExp:
	//	=> exp=Exp | name=Name "<-" exp=Exp;
	public MonadicExpElements getMonadicExpAccess() {
		return (pMonadicExp != null) ? pMonadicExp : (pMonadicExp = new MonadicExpElements());
	}
	
	public ParserRule getMonadicExpRule() {
		return getMonadicExpAccess().getRule();
	}

	//Cases:
	//	pat+=Pat ":" exp+=Exp (PIPE pat+=Pat ":" exp+=Exp)*;
	public CasesElements getCasesAccess() {
		return (pCases != null) ? pCases : (pCases = new CasesElements());
	}
	
	public ParserRule getCasesRule() {
		return getCasesAccess().getRule();
	}

	//OrElseExp:
	//	AndAlsoExp ({OrElseExp.left=current} "or" right+=AndAlsoExp)*;
	public OrElseExpElements getOrElseExpAccess() {
		return (pOrElseExp != null) ? pOrElseExp : (pOrElseExp = new OrElseExpElements());
	}
	
	public ParserRule getOrElseExpRule() {
		return getOrElseExpAccess().getRule();
	}

	//AndAlsoExp:
	//	RExp ({AndAlsoExp.left=current} "and" right+=RExp)*;
	public AndAlsoExpElements getAndAlsoExpAccess() {
		return (pAndAlsoExp != null) ? pAndAlsoExp : (pAndAlsoExp = new AndAlsoExpElements());
	}
	
	public ParserRule getAndAlsoExpRule() {
		return getAndAlsoExpAccess().getRule();
	}

	//RExp:
	//	aexp=AExp (=> sym+=SYM aexps+=AExp)*;
	public RExpElements getRExpAccess() {
		return (pRExp != null) ? pRExp : (pRExp = new RExpElements());
	}
	
	public ParserRule getRExpRule() {
		return getRExpAccess().getRule();
	}

	//AExp:
	//	mexp=MExp (sign+=("+" | "-") mexps+=MExp)*;
	public AExpElements getAExpAccess() {
		return (pAExp != null) ? pAExp : (pAExp = new AExpElements());
	}
	
	public ParserRule getAExpRule() {
		return getAExpAccess().getRule();
	}

	//MExp:
	//	applyexps+=ApplyExp ("^" applyexps+=ApplyExp)*;
	public MExpElements getMExpAccess() {
		return (pMExp != null) ? pMExp : (pMExp = new MExpElements());
	}
	
	public ParserRule getMExpRule() {
		return getMExpAccess().getRule();
	}

	//ApplyExp:
	//	neg?="~"? => exp=AtomicExp;
	public ApplyExpElements getApplyExpAccess() {
		return (pApplyExp != null) ? pApplyExp : (pApplyExp = new ApplyExpElements());
	}
	
	public ParserRule getApplyExpRule() {
		return getApplyExpAccess().getRule();
	}

	//AtomicExp:
	//	{AtomicExp} Lit | {AtomicExp} String | => id+=Qid (DOT id+=Qid)* | {AtomicExp} ConUse | "@" "{" fields+=Field (","
	//	fields+=Field)* "}" | {AtomicExp} "$" Qid | "(" exp=Exp ")" (DOT id+=Qid)* | {AtomicExp} "{" (id+=Name "=" exps+=Exp
	//	(=> id+=Name "=" exps+=Exp)*)? "}" | "let" valDecl+=ValueDecl+ "in" exp=Exp "end";
	public AtomicExpElements getAtomicExpAccess() {
		return (pAtomicExp != null) ? pAtomicExp : (pAtomicExp = new AtomicExpElements());
	}
	
	public ParserRule getAtomicExpRule() {
		return getAtomicExpAccess().getRule();
	}

	//Field:
	//	name=Name "=" exp=Exp | "~" name=Name;
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//ValueDecl:
	//	"val" Name Name* "=" Exp;
	public ValueDeclElements getValueDeclAccess() {
		return (pValueDecl != null) ? pValueDecl : (pValueDecl = new ValueDeclElements());
	}
	
	public ParserRule getValueDeclRule() {
		return getValueDeclAccess().getRule();
	}

	//String:
	//	"\"" STRCHAR* "\"";
	public StringElements getStringAccess() {
		return (pString != null) ? pString : (pString = new StringElements());
	}
	
	public ParserRule getStringRule() {
		return getStringAccess().getRule();
	}

	////DataType Rules
	//Pat:
	//	"_" | Lit | => Name | ConUse Pat?;
	public PatElements getPatAccess() {
		return (pPat != null) ? pPat : (pPat = new PatElements());
	}
	
	public ParserRule getPatRule() {
		return getPatAccess().getRule();
	}

	//Lit:
	//	Int | "\'" BITSTR? "\'";
	public LitElements getLitAccess() {
		return (pLit != null) ? pLit : (pLit = new LitElements());
	}
	
	public ParserRule getLitRule() {
		return getLitAccess().getRule();
	}

	//PrimBitPat:
	//	BITSTR | Qid BitPatOrInt?;
	public PrimBitPatElements getPrimBitPatAccess() {
		return (pPrimBitPat != null) ? pPrimBitPat : (pPrimBitPat = new PrimBitPatElements());
	}
	
	public ParserRule getPrimBitPatRule() {
		return getPrimBitPatAccess().getRule();
	}

	//BitPatOrInt:
	//	":" POSINT | "@" BITSTR;
	public BitPatOrIntElements getBitPatOrIntAccess() {
		return (pBitPatOrInt != null) ? pBitPatOrInt : (pBitPatOrInt = new BitPatOrIntElements());
	}
	
	public ParserRule getBitPatOrIntRule() {
		return getBitPatOrIntAccess().getRule();
	}

	//Int:
	//	POSINT | NEGINT;
	public IntElements getIntAccess() {
		return (pInt != null) ? pInt : (pInt = new IntElements());
	}
	
	public ParserRule getIntRule() {
		return getIntAccess().getRule();
	}

	//Name:
	//	ID;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//ConBind:
	//	CONS;
	public ConBindElements getConBindAccess() {
		return (pConBind != null) ? pConBind : (pConBind = new ConBindElements());
	}
	
	public ParserRule getConBindRule() {
		return getConBindAccess().getRule();
	}

	//ConUse:
	//	CONS;
	public ConUseElements getConUseAccess() {
		return (pConUse != null) ? pConUse : (pConUse = new ConUseElements());
	}
	
	public ParserRule getConUseRule() {
		return getConUseAccess().getRule();
	}

	//Qid:
	//	ID;
	public QidElements getQidAccess() {
		return (pQid != null) ? pQid : (pQid = new QidElements());
	}
	
	public ParserRule getQidRule() {
		return getQidAccess().getRule();
	}

	//POSINT:
	//	NUM | HEXNUM;
	public POSINTElements getPOSINTAccess() {
		return (pPOSINT != null) ? pPOSINT : (pPOSINT = new POSINTElements());
	}
	
	public ParserRule getPOSINTRule() {
		return getPOSINTAccess().getRule();
	}

	//NEGINT:
	//	"~" NUM;
	public NEGINTElements getNEGINTAccess() {
		return (pNEGINT != null) ? pNEGINT : (pNEGINT = new NEGINTElements());
	}
	
	public ParserRule getNEGINTRule() {
		return getNEGINTAccess().getRule();
	}

	//NUM:
	//	=> DIG+;
	public NUMElements getNUMAccess() {
		return (pNUM != null) ? pNUM : (pNUM = new NUMElements());
	}
	
	public ParserRule getNUMRule() {
		return getNUMAccess().getRule();
	}

	//HEXNUM:
	//	"0x" => HEXDIGIT+;
	public HEXNUMElements getHEXNUMAccess() {
		return (pHEXNUM != null) ? pHEXNUM : (pHEXNUM = new HEXNUMElements());
	}
	
	public ParserRule getHEXNUMRule() {
		return getHEXNUMAccess().getRule();
	}

	//SYMID:
	//	SYM+;
	public SYMIDElements getSYMIDAccess() {
		return (pSYMID != null) ? pSYMID : (pSYMID = new SYMIDElements());
	}
	
	public ParserRule getSYMIDRule() {
		return getSYMIDAccess().getRule();
	}

	//BITSTR:
	//	=> BINARY+;
	public BITSTRElements getBITSTRAccess() {
		return (pBITSTR != null) ? pBITSTR : (pBITSTR = new BITSTRElements());
	}
	
	public ParserRule getBITSTRRule() {
		return getBITSTRAccess().getRule();
	}

	//MIXID:
	//	"_" => IDCHAR+;
	public MIXIDElements getMIXIDAccess() {
		return (pMIXID != null) ? pMIXID : (pMIXID = new MIXIDElements());
	}
	
	public ParserRule getMIXIDRule() {
		return getMIXIDAccess().getRule();
	}

	//CONS:
	//	ULETTER => IDCHAR*;
	public CONSElements getCONSAccess() {
		return (pCONS != null) ? pCONS : (pCONS = new CONSElements());
	}
	
	public ParserRule getCONSRule() {
		return getCONSAccess().getRule();
	}

	//ID:
	//	LETTER => IDCHAR*;
	public IDElements getIDAccess() {
		return (pID != null) ? pID : (pID = new IDElements());
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	////TODO
	//STRCHAR:
	//	LETTER;
	public STRCHARElements getSTRCHARAccess() {
		return (pSTRCHAR != null) ? pSTRCHAR : (pSTRCHAR = new STRCHARElements());
	}
	
	public ParserRule getSTRCHARRule() {
		return getSTRCHARAccess().getRule();
	}

	//HEXDIGIT:
	//	DIG | HEXCHAR;
	public HEXDIGITElements getHEXDIGITAccess() {
		return (pHEXDIGIT != null) ? pHEXDIGIT : (pHEXDIGIT = new HEXDIGITElements());
	}
	
	public ParserRule getHEXDIGITRule() {
		return getHEXDIGITAccess().getRule();
	}

	//HEXCHAR:
	//	LHEXCHAR | UHEXCHAR;
	public HEXCHARElements getHEXCHARAccess() {
		return (pHEXCHAR != null) ? pHEXCHAR : (pHEXCHAR = new HEXCHARElements());
	}
	
	public ParserRule getHEXCHARRule() {
		return getHEXCHARAccess().getRule();
	}

	//ULETTER:
	//	UHEXCHAR | UNHEXCHAR;
	public ULETTERElements getULETTERAccess() {
		return (pULETTER != null) ? pULETTER : (pULETTER = new ULETTERElements());
	}
	
	public ParserRule getULETTERRule() {
		return getULETTERAccess().getRule();
	}

	//LETTER:
	//	LHEXCHAR | LNHEXCHAR | ULETTER | SLASH;
	public LETTERElements getLETTERAccess() {
		return (pLETTER != null) ? pLETTER : (pLETTER = new LETTERElements());
	}
	
	public ParserRule getLETTERRule() {
		return getLETTERAccess().getRule();
	}

	//IDCHAR:
	//	LETTER | DIG | CHARSYM;
	public IDCHARElements getIDCHARAccess() {
		return (pIDCHAR != null) ? pIDCHAR : (pIDCHAR = new IDCHARElements());
	}
	
	public ParserRule getIDCHARRule() {
		return getIDCHARAccess().getRule();
	}

	//BINARY:
	//	BINDIG | BS | DOT | PIPE;
	public BINARYElements getBINARYAccess() {
		return (pBINARY != null) ? pBINARY : (pBINARY = new BINARYElements());
	}
	
	public ParserRule getBINARYRule() {
		return getBINARYAccess().getRule();
	}

	//DIG:
	//	BINDIG | NBINDIG;
	public DIGElements getDIGAccess() {
		return (pDIG != null) ? pDIG : (pDIG = new DIGElements());
	}
	
	public ParserRule getDIGRule() {
		return getDIGAccess().getRule();
	}

	//SYM:
	//	BS | SLASH | DOT | CHARSYM | OTHERSYM;
	public SYMElements getSYMAccess() {
		return (pSYM != null) ? pSYM : (pSYM = new SYMElements());
	}
	
	public ParserRule getSYMRule() {
		return getSYMAccess().getRule();
	}

	////Terminal symbols	
	////terminal BITSTRIDCHAR: 'bistridchar';//LETTER | DIG | '_' | '-' | '?' | '!';
	////terminal BITSTRID: 'bitstrid';//LETTER BITSTRIDCHAR*;
	////terminal ESC: 'esc';//'\\' (('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\"') | (DIG DIG DIG));
	////terminal SGOOD: 'sgoodtodo'; //TODO
	//terminal BINDIG:
	//	"0" | "1";
	public TerminalRule getBINDIGRule() {
		return (tBINDIG != null) ? tBINDIG : (tBINDIG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BINDIG"));
	} 

	//terminal NBINDIG:
	//	"2".."9";
	public TerminalRule getNBINDIGRule() {
		return (tNBINDIG != null) ? tNBINDIG : (tNBINDIG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NBINDIG"));
	} 

	//terminal LHEXCHAR:
	//	"a".."f";
	public TerminalRule getLHEXCHARRule() {
		return (tLHEXCHAR != null) ? tLHEXCHAR : (tLHEXCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LHEXCHAR"));
	} 

	//terminal UHEXCHAR:
	//	"A".."F";
	public TerminalRule getUHEXCHARRule() {
		return (tUHEXCHAR != null) ? tUHEXCHAR : (tUHEXCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UHEXCHAR"));
	} 

	//terminal LNHEXCHAR:
	//	"g".."z";
	public TerminalRule getLNHEXCHARRule() {
		return (tLNHEXCHAR != null) ? tLNHEXCHAR : (tLNHEXCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LNHEXCHAR"));
	} 

	//terminal UNHEXCHAR:
	//	"G".."Z";
	public TerminalRule getUNHEXCHARRule() {
		return (tUNHEXCHAR != null) ? tUNHEXCHAR : (tUNHEXCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNHEXCHAR"));
	} 

	//terminal BS:
	//	"\\";
	public TerminalRule getBSRule() {
		return (tBS != null) ? tBS : (tBS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BS"));
	} 

	//terminal SLASH:
	//	"/";
	public TerminalRule getSLASHRule() {
		return (tSLASH != null) ? tSLASH : (tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SLASH"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal PIPE:
	//	"|";
	public TerminalRule getPIPERule() {
		return (tPIPE != null) ? tPIPE : (tPIPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PIPE"));
	} 

	//terminal CHARSYM:
	//	"_" | "-" | "?" | "\'" | "!";
	public TerminalRule getCHARSYMRule() {
		return (tCHARSYM != null) ? tCHARSYM : (tCHARSYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARSYM"));
	} 

	//terminal OTHERSYM:
	//	"%" | "&" | "$" | "+" | ":" | "<" | "=" | ">" | "@" | "~" | "`" | "^" | "#" | "*";
	public TerminalRule getOTHERSYMRule() {
		return (tOTHERSYM != null) ? tOTHERSYM : (tOTHERSYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OTHERSYM"));
	} 

	////TODO
	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ML_COMMENT:
	//	"(*"->"*)";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"#" !"\n"* "\n";
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 
}
