/**
 * generated by Xtext
 */
package gdsl.plugin.generator;

import com.google.common.base.Objects;
import gdsl.plugin.generator.RunCompiler;
import gdsl.plugin.preferences.plugin.GDSLPluginPreferences;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GDSLGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    StringBuilder commandBuilder = new StringBuilder();
    String _compilerInvocation = GDSLPluginPreferences.getCompilerInvocation();
    commandBuilder.append(_compilerInvocation);
    commandBuilder.append(" -o");
    String _outputName = GDSLPluginPreferences.getOutputName(resource);
    String _plus = (" " + _outputName);
    commandBuilder.append(_plus);
    commandBuilder.append(" --runtime=");
    String _runtimeTemplates = GDSLPluginPreferences.getRuntimeTemplates(resource);
    commandBuilder.append(_runtimeTemplates);
    final String prefix = GDSLPluginPreferences.getPrefix(resource);
    boolean _notEquals = (!Objects.equal(null, prefix));
    if (_notEquals) {
      commandBuilder.append((" --prefix=" + prefix));
    }
    boolean _isTypeCheckerEnabled = GDSLPluginPreferences.isTypeCheckerEnabled();
    if (_isTypeCheckerEnabled) {
      int _typeCheckerIteration = GDSLPluginPreferences.getTypeCheckerIteration();
      String _plus_1 = (" --maxIter=" + Integer.valueOf(_typeCheckerIteration));
      commandBuilder.append(_plus_1);
    } else {
      commandBuilder.append(" -t");
    }
    IProject _obtainProject = GDSLPluginPreferences.obtainProject(resource);
    final IPath projectPath = _obtainProject.getLocation();
    IWorkspace _workspace = ResourcesPlugin.getWorkspace();
    final IWorkspaceRoot workspaceRoot = _workspace.getRoot();
    String _recursiveGetMLFiles = this.recursiveGetMLFiles(projectPath, workspaceRoot);
    commandBuilder.append(_recursiveGetMLFiles);
    String _string = commandBuilder.toString();
    RunCompiler.compileAndSetMarkers(_string, projectPath);
  }
  
  private String recursiveGetMLFiles(final IPath path, final IWorkspaceRoot root) {
    final IContainer container = root.getContainerForLocation(path);
    StringBuilder result = new StringBuilder();
    try {
      IResource[] _members = container.members();
      for (final IResource r : _members) {
        {
          String _fileExtension = r.getFileExtension();
          boolean _equals = "ml".equals(_fileExtension);
          if (_equals) {
            IPath _location = r.getLocation();
            String _oSString = _location.toOSString();
            String _plus = (" " + _oSString);
            result.append(_plus);
          }
          int _type = r.getType();
          boolean _equals_1 = (_type == IResource.FOLDER);
          if (_equals_1) {
            IPath _location_1 = r.getLocation();
            String _recursiveGetMLFiles = this.recursiveGetMLFiles(_location_1, root);
            result.append(_recursiveGetMLFiles);
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof CoreException) {
        final CoreException e = (CoreException)_t;
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return result.toString();
  }
}
