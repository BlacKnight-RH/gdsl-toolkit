/**
 * generated by Xtext
 */
package gdsl.plugin.generator;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GDSLGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
  }
  
  /**
   * Builds a string containing all files found under the specified path with the extension .ml
   * 
   * @param path
   * 			The path to search for files
   * @param root
   * 			The workspace root (ResourcesPlugin.getWorkspace().getRoot())
   * @return
   * 			A string containing all the files found separated by a space
   */
  private String recursiveGetMLFiles(final IPath path, final IWorkspaceRoot root) {
    final IContainer container = root.getContainerForLocation(path);
    StringBuilder result = new StringBuilder();
    try {
      IResource[] _members = container.members();
      for (final IResource r : _members) {
        {
          String _fileExtension = r.getFileExtension();
          boolean _equals = "ml".equals(_fileExtension);
          if (_equals) {
            IPath _location = r.getLocation();
            String _oSString = _location.toOSString();
            String _plus = (" " + _oSString);
            result.append(_plus);
          }
          int _type = r.getType();
          boolean _equals_1 = (_type == IResource.FOLDER);
          if (_equals_1) {
            IPath _location_1 = r.getLocation();
            String _recursiveGetMLFiles = this.recursiveGetMLFiles(_location_1, root);
            result.append(_recursiveGetMLFiles);
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof CoreException) {
        final CoreException e = (CoreException)_t;
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return result.toString();
  }
}
