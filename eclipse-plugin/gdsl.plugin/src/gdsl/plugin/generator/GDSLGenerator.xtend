/*
 * generated by Xtext
 */
package gdsl.plugin.generator

import gdsl.plugin.preferences.plugin.GDSLPluginPreferences
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.core.resources.ResourcesPlugin

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class GDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))\

		val projectPath = GDSLPluginPreferences.obtainProject(resource).fullPath;
		val workspacePath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString()
		val fullProjectPath = workspacePath + projectPath + "/"
		
		var commandBuilder = new StringBuilder()
		
		//Compiler invocation
		commandBuilder.append(GDSLPluginPreferences.compilerInvocation);
		
		//Output name
		commandBuilder.append(" -o");
		commandBuilder.append(" " + GDSLPluginPreferences.getOutputName(resource));
		
		//Runtime templates
		commandBuilder.append(" --runtime=");
		commandBuilder.append(makeAbsolute(fullProjectPath, GDSLPluginPreferences.getRuntimeTemplates(resource)));
		
		//Prefix
		val prefix = GDSLPluginPreferences.getPrefix(resource); 
		if(null != prefix){
			commandBuilder.append(" --prefix=" + prefix);		
		}
		
		//Typechecker
		if(GDSLPluginPreferences.typeCheckerEnabled){
			commandBuilder.append(" --maxIter=" + GDSLPluginPreferences.typeCheckerIteration);		
		}
		else{
			commandBuilder.append(" -t");
		}
		
		// TODO append files

		RunCompiler.compile("echo " + commandBuilder.toString)
		
	}
	
	private def String makeAbsolute(String projectPath, String relativePath){
		if(relativePath.startsWith("/")){
			return relativePath;
		}
		return projectPath + relativePath;
	}
}
