/*
 * generated by Xtext
 */
package gdsl.plugin.generator

import gdsl.plugin.preferences.plugin.GDSLPluginPreferences
import org.eclipse.core.resources.IResource
import org.eclipse.core.resources.IWorkspaceRoot
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.CoreException
import org.eclipse.core.runtime.IPath
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class GDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))\

		var commandBuilder = new StringBuilder()
		
		//Compiler invocation
		commandBuilder.append(GDSLPluginPreferences.compilerInvocation);
		
		//Output name
		commandBuilder.append(" -o");
		commandBuilder.append(" " + GDSLPluginPreferences.getOutputName(resource));
		
		//Runtime templates
		commandBuilder.append(" --runtime=");
		commandBuilder.append(GDSLPluginPreferences.getRuntimeTemplates(resource));
		
		//Prefix
		val prefix = GDSLPluginPreferences.getPrefix(resource); 
		if(null != prefix){
			commandBuilder.append(" --prefix=" + prefix);		
		}
		
		//Typechecker
		if(GDSLPluginPreferences.typeCheckerEnabled){
			commandBuilder.append(" --maxIter=" + GDSLPluginPreferences.typeCheckerIteration);		
		}
		else{
			commandBuilder.append(" -t");
		}
		
		//Files
		val projectPath = GDSLPluginPreferences.obtainProject(resource).location;
		val workspaceRoot = ResourcesPlugin.workspace.root;
		commandBuilder.append(recursiveGetMLFiles(projectPath, workspaceRoot));

		RunCompiler.compileAndSetMarkers(commandBuilder.toString, projectPath);
		
	}
		
	private def String recursiveGetMLFiles(IPath path, IWorkspaceRoot root){
		val container = root.getContainerForLocation(path);
		var result = new StringBuilder();
		try{
			for(IResource r : container.members){
				if("ml".equals(r.fileExtension)){
					result.append(" " + r.location.toOSString);
				}
				if(r.type == IResource.FOLDER){
					result.append(recursiveGetMLFiles(r.location, root));
				}
			}
		}
		catch(CoreException e){
		}
		return result.toString;
	}
}
