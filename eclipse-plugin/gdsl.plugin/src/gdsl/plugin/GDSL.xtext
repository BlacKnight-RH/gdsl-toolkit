/**
 * Grammar for the GDSL language
 * 
 * @author Daniel Endress
 */

grammar gdsl.plugin.GDSL hidden(WS, ML_COMMENT, SL_COMMENT)

generate gDSL "http://www.plugin.gdsl/GDSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	decl += Decl (';'? decl += Decl)*
;

Decl:
	DeclExport | DeclType | DeclVal
;

DeclExport:
	'export' name=[Val] (tyVars=TyVars)? ':' type=Ty
;

DeclType returns Type:
	'type' name=(ID | S) (tyVars=TyVars)? '=' (
			=>(conDecl+=ConDecl ('|' conDecl+=ConDecl)*) 
			| value=Ty
		)
;

DeclVal returns Val:
	'val'
	(=>((name=(ID | S) | name=SYM) (attr += (ID | S))* '=' exp=Exp) |
	((mid+=MID attr+=(ID | S))* '=' exp=Exp) |
	( name=(ID | S) '[' decPat+=DECODEPAT* ']' (('=' exp=Exp) | ('|' exps+=Exp '=' exps+=Exp)+) ) )
;

TyVars:
	'[' attr+=TyVar (',' attr+=TyVar)* ']'
;

TyVar returns Type:
	name=(ID | S)
;

ConDecl:
	name=CONS ('of' ty=Ty)?
;

Ty:
	value=(INTEGER|BINS) |
	'|' value=INTEGER '|' |
	'|' typeRef=[Type] '|' |
	(typeRef=[Type] | type=('int'|'string'|'unit')) ('[' tyBind+=TyBind (',' tyBind+=TyBind)* ']')? |
	{Ty} '{' (elements+=TyElement (',' elements+=TyElement)*)? '}' |
	'(' param+=Ty (',' param+=Ty)* ')' '->' resType=Ty |
	{Ty} '()' ('->' resType=Ty)? |
	S r=Ty LESS in=Ty '=>' out=Ty GREATER
;

TyBind:
	name=(ID | S) ('=' value=Ty)?
;

TyElement:
	name=(ID | S) ':' value=Ty
;

Exp: 
	name=CaseExp | (mid+=MID caseExps+=CaseExp)+
;

CaseExp:
	ClosedExp |
	name='case' closedExp=ClosedExp 'of' (pat+=PAT ':' exp+=Exp ('|' pat+=PAT ':' exp+=Exp)*) 'end'
;

ClosedExp:
	OrElseExp |
	name='if' ifCaseExp=CaseExp 'then' thenCaseExp=CaseExp 'else' elseCaseExp=CaseExp |
	name='do' doExp+=MonadicExp (';' doExp+=MonadicExp)* 'end'
;

MonadicExp:
	exp=Exp |
	name=(ID | S) '<-' exp=Exp
;

OrElseExp:
	AndAlsoExp ({OrElseExp.left=current} name='or' right+=AndAlsoExp)*
;

AndAlsoExp:
	RExp ({AndAlsoExp.left=current} name='and' right+=RExp)*
;

RExp:
	AExp (=>sym+=SYM aexps+=AExp)*
;

AExp:
	MExp (sign+=('+'|'-') mexps+=MExp)*
;

MExp:
	SelectExp (symbol+=('*'|'%') applyexps+=ApplyExp)*
;

SelectExp:
	ApplyExp ('^' applyexps+=ApplyExp)*
;

ApplyExp:
	'~' AtomicExp |
	atomicExp=AtomicExp args=Args
;

Args:
	{Args} (
		args+=AtomicExp* 
		| '()'
	)
;

AtomicExp:
	name=LIT |
	name=STRING |
	name=(ID | S) (=>DOT id+=(ID | S))* |
	name='@' '{' fields+=Field (',' fields+=Field)* '}' |
	'$' name=(ID | S) |
	'(' expr=Exp ')' (=>DOT id+=(ID | S))* |
	{AtomicExp} '{' (id+=(ID | S) '=' exps+=Exp (',' id+=(ID | S) '=' exps+=Exp)*)? '}' |
	name='let' valDecl+=ValueDecl+ 'in' expr=Exp 'end'
;

Field:
	name=(ID | S) '=' exp=Exp |
	'~' name=(ID | S)
;

ValueDecl:
	'val' (name=(ID | S) | name=SYM) ids+=(ID | S)* '=' exp=Exp
;

PAT: uscore=USCORE | 
	=>(int=INTEGER) | 
	=>(id=(ID | S) pat=PAT?) | 
	"'"bitpat=BITPAT"'"
;
CONS: conName=(ID | S);

DECODEPAT: "'"BITPAT+"'" | TOKPAT;
TOKPAT: HEXINT | (ID | S);
BITPAT: BINARY | ((ID | S) (BITPATORINT)?);
BITPATORINT: (':' POSINT) | ('@' BINARY);
LIT: INTEGER | "'"BINARY?"'";
MID: MIXID | USCORE;
SYM: USCORE | BS | DOT | LESS | GREATER | SYM_WO_USCORE_SLASH_BS_DOT_LESS_GREATER;
INTEGER: POSINT | HEXINT | NEGINT;
POSINT: POSINT_WO_DUALS | DUALS;
BINARY: DUALS | BINS | BS | DOT;

terminal USCORE:'_';
terminal BS:'\\';
terminal DOT:'.';
terminal S: 'S';
terminal LESS: '<';
terminal GREATER: '>';
terminal MIXID:'_'(USCORE|IDCHAR)*;
terminal ID:('A'..'Z'|'a'..'z'|'/') (USCORE|IDCHAR)*;
terminal SYM_WO_USCORE_SLASH_BS_DOT_LESS_GREATER: (CHARSYM|OTHERSYM)+;
terminal STRING:'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
terminal fragment IDCHAR:('A'..'Z'|'a'..'z'|'/'|'0'..'9'|CHARSYM);
terminal fragment CHARSYM:'-'|'?'|'!';
terminal fragment OTHERSYM:'%'|'&'|'$'|'+'|'/'|':'|'<'|'='|'>'|'@'|'~'|'`'|'^'|'|'|'#'|'*'|'\\';
terminal DUALS: ('0'|'1')+;
terminal BINS:('0'|'1'|'\\'|'.'|'|')*;
terminal POSINT_WO_DUALS: ('0'..'9')+;
terminal HEXINT: '0x'('A'..'F'|'a'..'f'|'0'..'9')+;
terminal NEGINT: '~'('0'..'9')+;

terminal WS: (' '|'\t'|'\r'|'\n')+;
terminal ML_COMMENT	: '(*' -> '*)';
terminal SL_COMMENT 	: '#' !('\n')* '\n';

