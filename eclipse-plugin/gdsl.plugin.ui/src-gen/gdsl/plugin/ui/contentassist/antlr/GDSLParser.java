/*
* generated by Xtext
*/
package gdsl.plugin.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import gdsl.plugin.services.GDSLGrammarAccess;

public class GDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private GDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected gdsl.plugin.ui.contentassist.antlr.internal.InternalGDSLParser createParser() {
		gdsl.plugin.ui.contentassist.antlr.internal.InternalGDSLParser result = new gdsl.plugin.ui.contentassist.antlr.internal.InternalGDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclAccess().getAlternatives(), "rule__Decl__Alternatives");
					put(grammarAccess.getDeclTypeAccess().getAlternatives(), "rule__DeclType__Alternatives");
					put(grammarAccess.getDeclTypeAccess().getValueAlternatives_0_3_0(), "rule__DeclType__ValueAlternatives_0_3_0");
					put(grammarAccess.getTyAccess().getAlternatives(), "rule__Ty__Alternatives");
					put(grammarAccess.getIntAccess().getAlternatives(), "rule__Int__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getDeclGranularityAccess().getGroup(), "rule__DeclGranularity__Group__0");
					put(grammarAccess.getDeclExportAccess().getGroup(), "rule__DeclExport__Group__0");
					put(grammarAccess.getDeclTypeAccess().getGroup_0(), "rule__DeclType__Group_0__0");
					put(grammarAccess.getDeclTypeAccess().getGroup_1(), "rule__DeclType__Group_1__0");
					put(grammarAccess.getDeclTypeAccess().getGroup_1_4(), "rule__DeclType__Group_1_4__0");
					put(grammarAccess.getDeclValAccess().getGroup(), "rule__DeclVal__Group__0");
					put(grammarAccess.getExportAccess().getGroup(), "rule__Export__Group__0");
					put(grammarAccess.getExportAccess().getGroup_1(), "rule__Export__Group_1__0");
					put(grammarAccess.getExportAccess().getGroup_1_2(), "rule__Export__Group_1_2__0");
					put(grammarAccess.getConDeclsAccess().getGroup(), "rule__ConDecls__Group__0");
					put(grammarAccess.getConDeclsAccess().getGroup_1(), "rule__ConDecls__Group_1__0");
					put(grammarAccess.getConDeclAccess().getGroup(), "rule__ConDecl__Group__0");
					put(grammarAccess.getConDeclAccess().getGroup_1(), "rule__ConDecl__Group_1__0");
					put(grammarAccess.getTyAccess().getGroup_1(), "rule__Ty__Group_1__0");
					put(grammarAccess.getTyAccess().getGroup_2(), "rule__Ty__Group_2__0");
					put(grammarAccess.getTyAccess().getGroup_2_1(), "rule__Ty__Group_2_1__0");
					put(grammarAccess.getTyAccess().getGroup_2_1_2(), "rule__Ty__Group_2_1_2__0");
					put(grammarAccess.getTyAccess().getGroup_3(), "rule__Ty__Group_3__0");
					put(grammarAccess.getTyAccess().getGroup_3_2(), "rule__Ty__Group_3_2__0");
					put(grammarAccess.getTyElementAccess().getGroup(), "rule__TyElement__Group__0");
					put(grammarAccess.getTyBindAccess().getGroup(), "rule__TyBind__Group__0");
					put(grammarAccess.getTyBindAccess().getGroup_1(), "rule__TyBind__Group_1__0");
					put(grammarAccess.getModelAccess().getDeclAssignment_0(), "rule__Model__DeclAssignment_0");
					put(grammarAccess.getModelAccess().getDeclAssignment_1_1(), "rule__Model__DeclAssignment_1_1");
					put(grammarAccess.getDeclGranularityAccess().getNameAssignment_0(), "rule__DeclGranularity__NameAssignment_0");
					put(grammarAccess.getDeclGranularityAccess().getGranularityAssignment_2(), "rule__DeclGranularity__GranularityAssignment_2");
					put(grammarAccess.getDeclExportAccess().getNameAssignment_0(), "rule__DeclExport__NameAssignment_0");
					put(grammarAccess.getDeclExportAccess().getExportsAssignment_2(), "rule__DeclExport__ExportsAssignment_2");
					put(grammarAccess.getDeclTypeAccess().getNameAssignment_0_1(), "rule__DeclType__NameAssignment_0_1");
					put(grammarAccess.getDeclTypeAccess().getValueAssignment_0_3(), "rule__DeclType__ValueAssignment_0_3");
					put(grammarAccess.getDeclTypeAccess().getNameAssignment_1_1(), "rule__DeclType__NameAssignment_1_1");
					put(grammarAccess.getDeclTypeAccess().getAttrNameAssignment_1_3(), "rule__DeclType__AttrNameAssignment_1_3");
					put(grammarAccess.getDeclTypeAccess().getAttrNameAssignment_1_4_1(), "rule__DeclType__AttrNameAssignment_1_4_1");
					put(grammarAccess.getDeclTypeAccess().getValueAssignment_1_7(), "rule__DeclType__ValueAssignment_1_7");
					put(grammarAccess.getDeclValAccess().getNameAssignment_1(), "rule__DeclVal__NameAssignment_1");
					put(grammarAccess.getDeclValAccess().getAttrAssignment_2(), "rule__DeclVal__AttrAssignment_2");
					put(grammarAccess.getExportAccess().getNameAssignment_0(), "rule__Export__NameAssignment_0");
					put(grammarAccess.getExportAccess().getAttrNameAssignment_1_1(), "rule__Export__AttrNameAssignment_1_1");
					put(grammarAccess.getExportAccess().getAttrNameAssignment_1_2_1(), "rule__Export__AttrNameAssignment_1_2_1");
					put(grammarAccess.getConDeclsAccess().getConDeclsAssignment_0(), "rule__ConDecls__ConDeclsAssignment_0");
					put(grammarAccess.getConDeclsAccess().getConDeclsAssignment_1_1(), "rule__ConDecls__ConDeclsAssignment_1_1");
					put(grammarAccess.getConDeclAccess().getNameAssignment_0(), "rule__ConDecl__NameAssignment_0");
					put(grammarAccess.getConDeclAccess().getTyAssignment_1_1(), "rule__ConDecl__TyAssignment_1_1");
					put(grammarAccess.getTyAccess().getValueAssignment_0(), "rule__Ty__ValueAssignment_0");
					put(grammarAccess.getTyAccess().getValueAssignment_1_1(), "rule__Ty__ValueAssignment_1_1");
					put(grammarAccess.getTyAccess().getValueAssignment_2_0(), "rule__Ty__ValueAssignment_2_0");
					put(grammarAccess.getTyAccess().getTyBindAssignment_2_1_1(), "rule__Ty__TyBindAssignment_2_1_1");
					put(grammarAccess.getTyAccess().getTyBindAssignment_2_1_2_1(), "rule__Ty__TyBindAssignment_2_1_2_1");
					put(grammarAccess.getTyAccess().getElementsAssignment_3_1(), "rule__Ty__ElementsAssignment_3_1");
					put(grammarAccess.getTyAccess().getElementsAssignment_3_2_1(), "rule__Ty__ElementsAssignment_3_2_1");
					put(grammarAccess.getTyElementAccess().getNameAssignment_0(), "rule__TyElement__NameAssignment_0");
					put(grammarAccess.getTyElementAccess().getValueAssignment_2(), "rule__TyElement__ValueAssignment_2");
					put(grammarAccess.getTyBindAccess().getKeyAssignment_0(), "rule__TyBind__KeyAssignment_0");
					put(grammarAccess.getTyBindAccess().getValueAssignment_1_1(), "rule__TyBind__ValueAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			gdsl.plugin.ui.contentassist.antlr.internal.InternalGDSLParser typedParser = (gdsl.plugin.ui.contentassist.antlr.internal.InternalGDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
