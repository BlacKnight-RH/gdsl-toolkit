/*
* generated by Xtext
*/
package gdsl.plugin.ui.quickfix

import gdsl.plugin.gDSL.Decl
import gdsl.plugin.gDSL.GDSLFactory
import gdsl.plugin.gDSL.GDSLPackage
import gdsl.plugin.gDSL.Model
import gdsl.plugin.validation.GDSLValidator
import org.eclipse.xtext.diagnostics.Diagnostic
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

import static extension org.eclipse.xtext.EcoreUtil2.*

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class GDSLQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}

	@Fix(GDSLValidator::UPPERCASE_CONS)
	def capitalizeCons(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			'Capitalize constructor',
			'Capitalize first letter of "' + issue.data.get(0) + '".',
			'',
			[context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
		])
	}
	
	@Fix(GDSLValidator::PATTERN_MISPLACEMENT)
	def patternMisplacement(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			'Capitalize "' + issue.data.get(0) + '" to make it a constructor.',
			'Capitalize "' + issue.data.get(0) + '" to make it a constructor.',
			'',
			[context |
				val xtextDocument = context.xtextDocument
				val consOffset = xtextDocument.get.lastIndexOf(issue.data.get(0), issue.offset)
				val firstLetter = xtextDocument.get(consOffset, 1)
				xtextDocument.replace(consOffset, 1, firstLetter.toUpperCase)
			]
		)
		acceptor.accept(issue,
			'Remove pattern "' + issue.data.get(1) + '".',
			'Remove pattern "' + issue.data.get(1) + '".',
			'',
			[context |
				val xtextDocument = context.xtextDocument
				xtextDocument.replace(issue.offset, issue.length, '')
			]
		)
	}
	
//	@Fix(Diagnostic::LINKING_DIAGNOSTIC)
//	def createMissingDecl(Issue issue, IssueResolutionAcceptor acceptor){
//		if(issue.message.contains('reference to ' + GDSLPackage::eINSTANCE.^val.name)){
//			acceptor.accept(issue,
//				'Create new val',
//				'Create new val',
//				'',
//				[element, context |
//					val decl = element.getContainerOfType(typeof(Decl))
//					val model = decl.eContainer as Model
//					model.decl.add(
//						model.decl.indexOf(decl) + 1,
//						GDSLFactory::eINSTANCE.createDecl() => [
//							^val = GDSLFactory::eINSTANCE.createVal() => [
//								name = context.xtextDocument.get(issue.offset, issue.length)
//							]
//						]
//					)
//				]
//			)
//		}
//		if(issue.message.contains('reference to ' + GDSLPackage::eINSTANCE.type.name)){
//			acceptor.accept(issue,
//				'Create new type',
//				'Create new type',
//				'',
//				[element, context |
//					
//				]
//			)
//		}
//	}
//	
}
