###### -685
Initial RREIL instructions:
T0 = [64](R15)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](R13)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SI)
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [32](DI)
BX/32 = [32](0)
DI = [32](4212089)
DI/32 = [32](0)
T0 = [64](SP-40)
LTU = <u[64->1](SP,40)
LEU = <=u[64->1](SP,40)
LTS = <s[64->1](SP,40)
LES = <=s[64->1](SP,40)
EQ = ==[64->1](SP,40)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,40)
} else {
FLAGS = <u[64->1](SP,40)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,40)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-685)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [32](DI)
BX/32 = [32](0)
DI = [32](4212089)
DI/32 = [32](0)
T0 = [64](SP-40)
LTS = <s[64->1](SP,40)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,40)
} else {
FLAGS = <u[64->1](SP,40)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,40)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-685)


###### 221
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](221+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](221+IP) else goto [64](IP)


###### 13
###### 0
Initial RREIL instructions:
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](13+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [32](BX-1)
LTS = <s[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](13+IP) else goto [64](IP)


###### 183
###### 0
Initial RREIL instructions:
T0 = *[64->64](BP+8)
AX = [64](T0)
T0 = *[64->8](AX)
T1 = [8](T0-45)
LTU = <u[8->1](T0,45)
LEU = <=u[8->1](T0,45)
LTS = <s[8->1](T0,45)
LES = <=s[8->1](T0,45)
EQ = ==[8->1](T0,45)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,45)
} else {
FLAGS = <u[8->1](T0,45)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,45)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](183+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+8)
AX = [64](T0)
T0 = *[64->8](AX)
T1 = [8](T0-45)
LTS = <s[8->1](T0,45)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,45)
} else {
FLAGS = <u[8->1](T0,45)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,45)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](183+IP) else goto [64](IP)


###### 2610
Initial RREIL instructions:
T0 = *[64->64](BP+0)
DI = [64](T0)
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
T0 = [64](BP+8)
LTU = <u[64->1](BP,8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
R12 = [32](1)
R12/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+2610)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+0)
DI = [64](T0)
T0 = [32](BX-1)
if (0) {
} else {
}
BX = [32](T0)
BX/32 = [32](0)
T0 = [64](BP+8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
R12 = [32](1)
R12/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+2610)


###### -269
Initial RREIL instructions:
SI = [32](4213601)
SI/32 = [32](0)
DI = [32](6)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-269)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](4213601)
SI/32 = [32](0)
DI = [32](6)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-269)


###### -620
Initial RREIL instructions:
SI = [32](4212105)
SI/32 = [32](0)
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-620)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](4212105)
SI/32 = [32](0)
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-620)


###### -662
Initial RREIL instructions:
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-662)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-662)


###### 10800
Initial RREIL instructions:
DI = [32](4201136)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+10800)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [32](4201136)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+10800)


###### 63
###### 0
Initial RREIL instructions:
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](63+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[8,63],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](63+IP) else goto [64](IP)


###### -476
Initial RREIL instructions:
T0 = *[64->64](BP+0)
DI = [64](T0)
T0 = *[64->64](IP+2117549)
SI = [64](T0)
T0 = [64](BP+8)
LTU = <u[64->1](BP,8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-476)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+0)
DI = [64](T0)
T0 = *[64->64](IP+2117549)
SI = [64](T0)
T0 = [64](BP+8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-476)


###### 34
###### 0
Initial RREIL instructions:
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
if (FLAGS/6) goto [64](34+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [32](BX-1)
LTS = <s[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
if (FLAGS/6) goto [64](34+IP) else goto [64](IP)


###### 1102
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2117528)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTU = <u[64->1](AX,T0)
LEU = <=u[64->1](AX,T0)
LTS = <s[64->1](AX,T0)
LES = <=s[64->1](AX,T0)
EQ = ==[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](1102+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2117528)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTS = <s[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](1102+IP) else goto [64](IP)


###### -59
Initial RREIL instructions:
*[64](AX+0) = [8](32)
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
goto [JUMP] [64](IP+-59)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](AX+0) = [8](32)
T0 = [64](AX+1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
goto [JUMP] [64](IP+-59)


###### 32
###### 0
Initial RREIL instructions:
T0 = and[8](R12,R12)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](32+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],[0,7],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R12,R12)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](32+IP) else goto [64](IP)


###### 1021
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2117489)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTU = <u[64->1](AX,T0)
LEU = <=u[64->1](AX,T0)
LTS = <s[64->1](AX,T0)
LES = <=s[64->1](AX,T0)
EQ = ==[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](1021+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2117489)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTS = <s[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](1021+IP) else goto [64](IP)


###### -335
Initial RREIL instructions:
*[64](AX+0) = [8](10)
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-335)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](AX+0) = [8](10)
T0 = [64](AX+1)
if (0) {
} else {
}
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-335)


###### -193
###### 0
Initial RREIL instructions:
T0 = *[64->8](AX+1)
T1 = [8](T0-110)
LTU = <u[8->1](T0,110)
LEU = <=u[8->1](T0,110)
LTS = <s[8->1](T0,110)
LES = <=s[8->1](T0,110)
EQ = ==[8->1](T0,110)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,110)
} else {
FLAGS = <u[8->1](T0,110)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,110)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-193+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](AX+1)
T1 = [8](T0-110)
LTS = <s[8->1](T0,110)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,110)
} else {
FLAGS = <u[8->1](T0,110)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,110)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-193+IP) else goto [64](IP)


###### -203
###### 0
Initial RREIL instructions:
T0 = *[64->8](AX+2)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-203+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](AX+2)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-203+IP) else goto [64](IP)


###### 2420
Initial RREIL instructions:
T0 = *[64->64](BP+0)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+2420)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+0)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+2420)


###### -459
Initial RREIL instructions:
SI = [32](4213601)
SI/32 = [32](0)
DI = [32](6)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-459)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](4213601)
SI/32 = [32](0)
DI = [32](6)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-459)


###### -810
Initial RREIL instructions:
SI = [32](4212105)
SI/32 = [32](0)
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-810)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](4212105)
SI/32 = [32](0)
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-810)


###### -852
Initial RREIL instructions:
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-852)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [32](4212075)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-852)


###### 10610
Initial RREIL instructions:
DI = [32](4201136)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+10610)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [32](4201136)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+10610)


###### 729
###### 0
Initial RREIL instructions:
T0 = [32](BX-2)
LTU = <u[32->1](BX,2)
LEU = <=u[32->1](BX,2)
LTS = <s[32->1](BX,2)
LES = <=s[32->1](BX,2)
EQ = ==[32->1](BX,2)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,2)
} else {
FLAGS = <u[32->1](BX,2)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,2)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
if (FLAGS/6) goto [64](729+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [32](BX-2)
LTS = <s[32->1](BX,2)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,2)
} else {
FLAGS = <u[32->1](BX,2)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,2)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
if (FLAGS/6) goto [64](729+IP) else goto [64](IP)


###### 860
###### 0
Initial RREIL instructions:
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
T0 = [64](BP+8)
LTU = <u[64->1](BP,8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](860+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [32](BX-1)
if (0) {
} else {
}
BX = [32](T0)
BX/32 = [32](0)
T0 = [64](BP+8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
if (0) {
} else {
}
BP = [64](T0)
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](860+IP) else goto [64](IP)


###### 847
###### 0
Initial RREIL instructions:
T0 = *[64->64](BP+0)
SI = [64](T0)
T0 = *[64->8](SI)
T1 = [8](T0-45)
LTU = <u[8->1](T0,45)
LEU = <=u[8->1](T0,45)
LTS = <s[8->1](T0,45)
LES = <=s[8->1](T0,45)
EQ = ==[8->1](T0,45)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,45)
} else {
FLAGS = <u[8->1](T0,45)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,45)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](847+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+0)
SI = [64](T0)
T0 = *[64->8](SI)
T1 = [8](T0-45)
LTS = <s[8->1](T0,45)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,45)
} else {
FLAGS = <u[8->1](T0,45)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,45)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](847+IP) else goto [64](IP)


###### 21
###### 0
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
R12 = [32](1)
R12/32 = [32](0)
R9 = [32](1)
R9/32 = [32](0)
R8 = [64](2203318222849)
T0 = *[64->8](SI+1)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = zx[64->64](SI+1)
DX = [64](T0)
T0 = and[8](CX,CX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](21+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
DI = [32](T0)
DI/32 = [32](0)
R12 = [32](1)
R12/32 = [32](0)
R9 = [32](1)
R9/32 = [32](0)
R8 = [64](2203318222849)
T0 = *[64->8](SI+1)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = zx[64->64](SI+1)
DX = [64](T0)
T0 = and[8](CX,CX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](21+IP) else goto [64](IP)


###### 164
###### 0
Initial RREIL instructions:
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = [32](CX-69)
LTU = <u[32->1](CX,69)
LEU = <=u[32->1](CX,69)
LTS = <s[32->1](CX,69)
LES = <=s[32->1](CX,69)
EQ = ==[32->1](CX,69)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](CX,69)
} else {
FLAGS = <u[32->1](CX,69)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,CX)
T5 = xor[32](T5,69)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-41)
LTU = <u[8->1](CX,41)
LEU = <=u[8->1](CX,41)
LTS = <s[8->1](CX,41)
LES = <=s[8->1](CX,41)
EQ = ==[8->1](CX,41)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,41)
} else {
FLAGS = <u[8->1](CX,41)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,41)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](164+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,31],},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](AX,AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [32](CX-69)
if (0) {
} else {
}
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-41)
LTS = <s[8->1](CX,41)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,41)
} else {
FLAGS = <u[8->1](CX,41)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,41)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](164+IP) else goto [64](IP)


###### -293
###### 0
Initial RREIL instructions:
T0 = and[8](BX/8,BX/8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-293+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[8,15],[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](BX/8,BX/8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-293+IP) else goto [64](IP)


###### -234
###### 0
Initial RREIL instructions:
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-234+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-234+IP) else goto [64](IP)


###### 43
Initial RREIL instructions:
T0 = *[64->64](BP+0)
R15 = [64](T0)
goto [JUMP] [64](IP+43)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+0)
R15 = [64](T0)
goto [JUMP] [64](IP+43)


###### 749
###### 0
Initial RREIL instructions:
T0 = zx[8->32](AX)
SI = [32](T0)
SI/32 = [32](0)
T0 = *[64->64](IP+2117246)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTU = <u[64->1](AX,T0)
LEU = <=u[64->1](AX,T0)
LTS = <s[64->1](AX,T0)
LES = <=s[64->1](AX,T0)
EQ = ==[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](749+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](AX)
SI = [32](T0)
SI/32 = [32](0)
T0 = *[64->64](IP+2117246)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTS = <s[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](749+IP) else goto [64](IP)


###### 482
###### 0
Initial RREIL instructions:
*[64](AX+0) = [8](DX/8)
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
R15 = [64](R13)
T0 = *[64->8](R15)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = zx[64->64](R15+1)
R13 = [64](T0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](482+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](AX+0) = [8](DX/8)
if (0) {
} else {
}
*[64](DI+40+0) = [64](AX)
R15 = [64](R13)
T0 = *[64->8](R15)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = zx[64->64](R15+1)
R13 = [64](T0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](482+IP) else goto [64](IP)


###### -58
###### 0
Initial RREIL instructions:
T0 = [8](AX-92)
LTU = <u[8->1](AX,92)
LEU = <=u[8->1](AX,92)
LTS = <s[8->1](AX,92)
LES = <=s[8->1](AX,92)
EQ = ==[8->1](AX,92)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,92)
} else {
FLAGS = <u[8->1](AX,92)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,92)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-58+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [8](AX-92)
LTS = <s[8->1](AX,92)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,92)
} else {
FLAGS = <u[8->1](AX,92)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,92)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-58+IP) else goto [64](IP)


###### -70
###### 0
Initial RREIL instructions:
T0 = *[64->8](R15+1)
T1 = zx[8->32](T0)
R14 = [32](T1)
R14/32 = [32](0)
SI = [32](92)
SI/32 = [32](0)
T0 = and[8](R14,R14)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-70+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R15+1)
T1 = zx[8->32](T0)
R14 = [32](T1)
R14/32 = [32](0)
SI = [32](92)
SI/32 = [32](0)
T0 = and[8](R14,R14)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-70+IP) else goto [64](IP)


###### 172
###### 0
Initial RREIL instructions:
T0 = zx[64->32](R14+-48)
AX = [32](T0)
AX/32 = [32](0)
DX = [32](R14)
DX/32 = [32](0)
T0 = zx[64->64](R15+2)
R13 = [64](T0)
T0 = [8](AX-72)
LTU = <u[8->1](AX,72)
LEU = <=u[8->1](AX,72)
LTS = <s[8->1](AX,72)
LES = <=s[8->1](AX,72)
EQ = ==[8->1](AX,72)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,72)
} else {
FLAGS = <u[8->1](AX,72)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,72)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](172+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],[0,31],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->32](R14+-48)
AX = [32](T0)
AX/32 = [32](0)
DX = [32](R14)
DX/32 = [32](0)
T0 = zx[64->64](R15+2)
R13 = [64](T0)
T0 = [8](AX-72)
LTS = <s[8->1](AX,72)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,72)
} else {
FLAGS = <u[8->1](AX,72)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,72)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](172+IP) else goto [64](IP)


###### 670
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2117157)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTU = <u[64->1](AX,T0)
LEU = <=u[64->1](AX,T0)
LTS = <s[64->1](AX,T0)
LES = <=s[64->1](AX,T0)
EQ = ==[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](670+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2117157)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTS = <s[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](670+IP) else goto [64](IP)


###### -127
Initial RREIL instructions:
*[64](AX+0) = [8](92)
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = zx[8->32](R14)
SI = [32](T0)
SI/32 = [32](0)
*[64](DI+40+0) = [64](AX)
goto [JUMP] [64](IP+-127)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],[0,7],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](AX+0) = [8](92)
T0 = [64](AX+1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = zx[8->32](R14)
SI = [32](T0)
SI/32 = [32](0)
*[64](DI+40+0) = [64](AX)
goto [JUMP] [64](IP+-127)


###### -179
###### 0
Initial RREIL instructions:
R10 = [64](R9)
T0 = [6](CX)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](R10,T0)
T2 = <u[8->1](64,CX)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](R10,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
R10 = [64](T1)
T0 = and[64](R10,R8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-179+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],[0,7],[0,5],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T2:{},T1:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
R10 = [64](R9)
T0 = [6](CX)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](R10,T0)
T2 = <u[8->1](64,CX)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
R10 = [64](T1)
T0 = and[64](R10,R8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-179+IP) else goto [64](IP)


###### -208
###### 0
Initial RREIL instructions:
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = *[64->8](SI+AX+1)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = and[8](CX,CX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-208+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX+1)
if (0) {
} else {
}
AX = [64](T0)
T0 = *[64->8](SI+AX+1)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = and[8](CX,CX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-208+IP) else goto [64](IP)


###### -205
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-205+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-205+IP) else goto [64](IP)


###### 37
###### 0
Initial RREIL instructions:
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](37+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](37+IP) else goto [64](IP)


###### 389
###### 0
Initial RREIL instructions:
T0 = [64](DX+1)
LTU = <u[64->1](DX,1)
T1 = xor[64](T0,DX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,DX)
} else {
FLAGS = <u[64->1](T0,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](T0)
T0 = [8](AX-101)
LTU = <u[8->1](AX,101)
LEU = <=u[8->1](AX,101)
LTS = <s[8->1](AX,101)
LES = <=s[8->1](AX,101)
EQ = ==[8->1](AX,101)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,101)
} else {
FLAGS = <u[8->1](AX,101)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,101)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
if (FLAGS/6) goto [64](389+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](DX+1)
if (0) {
} else {
}
DX = [64](T0)
T0 = [8](AX-101)
LTS = <s[8->1](AX,101)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,101)
} else {
FLAGS = <u[8->1](AX,101)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,101)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
if (FLAGS/6) goto [64](389+IP) else goto [64](IP)


###### 397
###### 0
Initial RREIL instructions:
T0 = [8](AX-110)
LTU = <u[8->1](AX,110)
LEU = <=u[8->1](AX,110)
LTS = <s[8->1](AX,110)
LES = <=s[8->1](AX,110)
EQ = ==[8->1](AX,110)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,110)
} else {
FLAGS = <u[8->1](AX,110)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,110)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
if (FLAGS/6) goto [64](397+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [8](AX-110)
LTS = <s[8->1](AX,110)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,110)
} else {
FLAGS = <u[8->1](AX,110)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,110)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
if (FLAGS/6) goto [64](397+IP) else goto [64](IP)


###### -37
###### 0
Initial RREIL instructions:
T0 = [8](AX-69)
LTU = <u[8->1](AX,69)
LEU = <=u[8->1](AX,69)
LTS = <s[8->1](AX,69)
LES = <=s[8->1](AX,69)
EQ = ==[8->1](AX,69)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,69)
} else {
FLAGS = <u[8->1](AX,69)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,69)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
AX = [32](0)
AX/32 = [32](0)
T0 = [32](DI)
if (FLAGS/6) {
T0 = [32](AX)
} else {
}
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-37+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [8](AX-69)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
} else {
}
AX = [32](0)
T0 = [32](DI)
if (FLAGS/6) {
T0 = [32](AX)
} else {
}
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-37+IP) else goto [64](IP)


###### -269
###### 0
Initial RREIL instructions:
T0 = [64](BP+8)
LTU = <u[64->1](BP,8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
if (FLAGS/6) goto [64](-269+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BP+8)
if (0) {
} else {
}
BP = [64](T0)
T0 = [32](BX-1)
LTS = <s[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
if (FLAGS/6) goto [64](-269+IP) else goto [64](IP)


###### -315
###### 0
Initial RREIL instructions:
T0 = *[64->64](BP+0)
SI = [64](T0)
T0 = *[64->8](SI)
T1 = [8](T0-45)
LTU = <u[8->1](T0,45)
LEU = <=u[8->1](T0,45)
LTS = <s[8->1](T0,45)
LES = <=s[8->1](T0,45)
EQ = ==[8->1](T0,45)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,45)
} else {
FLAGS = <u[8->1](T0,45)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,45)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](-315+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+0)
SI = [64](T0)
T0 = *[64->8](SI)
T1 = [8](T0-45)
LTS = <s[8->1](T0,45)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,45)
} else {
FLAGS = <u[8->1](T0,45)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,45)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](-315+IP) else goto [64](IP)


###### -287
Initial RREIL instructions:
goto [JUMP] [64](IP+-287)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-287)


Initial RREIL instructions:
T0 = zx[8->32](AX)
AX = [32](T0)
AX/32 = [32](0)
T1 = *[64->64](8*AX+4210136)
goto [JUMP] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,7],},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](AX)
AX = [32](T0)
AX/32 = [32](0)
T1 = *[64->64](8*AX+4210136)
goto [JUMP] [64](T1)


###### -289
###### 0
Initial RREIL instructions:
T0 = *[64->8](R15+2)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
T0 = zx[64->32](DX+-48)
AX = [32](T0)
AX/32 = [32](0)
T0 = [8](AX-7)
LTU = <u[8->1](AX,7)
LEU = <=u[8->1](AX,7)
LTS = <s[8->1](AX,7)
LES = <=s[8->1](AX,7)
EQ = ==[8->1](AX,7)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,7)
} else {
FLAGS = <u[8->1](AX,7)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,7)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](-289+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R15+2)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = xor[32](SI,SI)
SI = [32](T0)
SI/32 = [32](0)
T0 = zx[64->32](DX+-48)
AX = [32](T0)
AX/32 = [32](0)
T0 = [8](AX-7)
LTS = <s[8->1](AX,7)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](AX,7)
} else {
FLAGS = <u[8->1](AX,7)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,AX)
T5 = xor[8](T5,7)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](-289+IP) else goto [64](IP)


###### -316
###### 0
Initial RREIL instructions:
T0 = zx[64->64](R15+3)
R13 = [64](T0)
T0 = *[64->8](R13+0)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = [32](DX-48)
LTU = <u[32->1](DX,48)
LEU = <=u[32->1](DX,48)
LTS = <s[32->1](DX,48)
LES = <=s[32->1](DX,48)
EQ = ==[32->1](DX,48)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](DX,48)
} else {
FLAGS = <u[32->1](DX,48)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,DX)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
DX = [32](T0)
DX/32 = [32](0)
T0 = zx[8->32](DX)
SI = [32](T0)
SI/32 = [32](0)
T0 = zx[64->32](AX+-48)
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-7)
LTU = <u[8->1](CX,7)
LEU = <=u[8->1](CX,7)
LTS = <s[8->1](CX,7)
LES = <=s[8->1](CX,7)
EQ = ==[8->1](CX,7)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,7)
} else {
FLAGS = <u[8->1](CX,7)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,7)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](-316+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,31],},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](R15+3)
R13 = [64](T0)
T0 = *[64->8](R13+0)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = [32](DX-48)
if (0) {
} else {
}
DX = [32](T0)
DX/32 = [32](0)
T0 = zx[8->32](DX)
SI = [32](T0)
SI/32 = [32](0)
T0 = zx[64->32](AX+-48)
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-7)
LTS = <s[8->1](CX,7)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,7)
} else {
FLAGS = <u[8->1](CX,7)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,7)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](-316+IP) else goto [64](IP)


###### 477
###### 0
Initial RREIL instructions:
T0 = *[64->8](R13+1)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = zx[64->32](AX+8*DX+-48)
AX = [32](T0)
AX/32 = [32](0)
T0 = [32](CX-48)
LTU = <u[32->1](CX,48)
LEU = <=u[32->1](CX,48)
LTS = <s[32->1](CX,48)
LES = <=s[32->1](CX,48)
EQ = ==[32->1](CX,48)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](CX,48)
} else {
FLAGS = <u[32->1](CX,48)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,CX)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-7)
LTU = <u[8->1](CX,7)
LEU = <=u[8->1](CX,7)
LTS = <s[8->1](CX,7)
LES = <=s[8->1](CX,7)
EQ = ==[8->1](CX,7)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,7)
} else {
FLAGS = <u[8->1](CX,7)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,7)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](477+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R13+1)
T1 = zx[8->32](T0)
CX = [32](T1)
T0 = zx[64->32](AX+8*DX+-48)
AX = [32](T0)
AX/32 = [32](0)
T0 = [32](CX-48)
if (0) {
} else {
}
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-7)
LTS = <s[8->1](CX,7)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,7)
} else {
FLAGS = <u[8->1](CX,7)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,7)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](477+IP) else goto [64](IP)


###### -352
Initial RREIL instructions:
T0 = zx[64->32](CX+8*AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](R13+2)
LTU = <u[64->1](R13,2)
T1 = xor[64](T0,R13)
T2 = xor[64](T0,2)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R13)
} else {
FLAGS = <u[64->1](T0,R13)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R13)
T5 = xor[64](T5,2)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R13 = [64](T0)
T0 = zx[8->32](AX)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-352)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->32](CX+8*AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](R13+2)
T1 = xor[64](T0,R13)
T2 = xor[64](T0,2)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R13)
} else {
FLAGS = <u[64->1](T0,R13)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R13)
T5 = xor[64](T5,2)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R13 = [64](T0)
T0 = zx[8->32](AX)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-352)


###### -825
Initial RREIL instructions:
T0 = *[64->8](R15+2)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
*[64](SP+24+0) = [8](CX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-825)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R15+2)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
*[64](SP+24+0) = [8](CX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-825)


###### -299
###### 0
Initial RREIL instructions:
T0 = *[64->8](SP+24)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = *[64->64](AX)
DX = [64](T0)
T0 = zx[8->32](CX)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->8](DX+2*AX+1)
T1 = and[8](T0,16)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-299+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](SP+24)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = *[64->64](AX)
DX = [64](T0)
T0 = zx[8->32](CX)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->8](DX+2*AX+1)
T1 = and[8](T0,16)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-299+IP) else goto [64](IP)


###### 692
Initial RREIL instructions:
T0 = zx[8->32](CX)
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+24+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+692)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],[0,7],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](CX)
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+24+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+692)


###### 240
###### 0
Initial RREIL instructions:
T0 = *[64->8](R15+3)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = *[64->64](SP+24)
DX = [64](T0)
T0 = zx[8->32](CX)
SI = [32](T0)
SI/32 = [32](0)
T0 = *[64->8](DX+2*SI+1)
T1 = and[8](T0,16)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](240+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R15+3)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = *[64->64](SP+24)
DX = [64](T0)
T0 = zx[8->32](CX)
SI = [32](T0)
SI/32 = [32](0)
T0 = *[64->8](DX+2*SI+1)
T1 = and[8](T0,16)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](240+IP) else goto [64](IP)


###### -437
Initial RREIL instructions:
T0 = zx[64->64](R15+3)
R13 = [64](T0)
goto [JUMP] [64](IP+-437)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](R15+3)
R13 = [64](T0)
goto [JUMP] [64](IP+-437)


###### -444
Initial RREIL instructions:
SI = [32](11)
SI/32 = [32](0)
goto [JUMP] [64](IP+-444)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](11)
SI/32 = [32](0)
goto [JUMP] [64](IP+-444)


###### -454
Initial RREIL instructions:
SI = [32](9)
SI/32 = [32](0)
goto [JUMP] [64](IP+-454)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](9)
SI/32 = [32](0)
goto [JUMP] [64](IP+-454)


###### -464
Initial RREIL instructions:
SI = [32](13)
SI/32 = [32](0)
goto [JUMP] [64](IP+-464)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](13)
SI/32 = [32](0)
goto [JUMP] [64](IP+-464)


###### -474
Initial RREIL instructions:
SI = [32](10)
SI/32 = [32](0)
goto [JUMP] [64](IP+-474)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](10)
SI/32 = [32](0)
goto [JUMP] [64](IP+-474)


###### -484
Initial RREIL instructions:
SI = [32](12)
SI/32 = [32](0)
goto [JUMP] [64](IP+-484)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](12)
SI/32 = [32](0)
goto [JUMP] [64](IP+-484)


###### -494
Initial RREIL instructions:
SI = [32](27)
SI/32 = [32](0)
goto [JUMP] [64](IP+-494)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](27)
SI/32 = [32](0)
goto [JUMP] [64](IP+-494)


###### -504
Initial RREIL instructions:
SI = [32](8)
SI/32 = [32](0)
goto [JUMP] [64](IP+-504)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](8)
SI/32 = [32](0)
goto [JUMP] [64](IP+-504)


###### -514
Initial RREIL instructions:
SI = [32](7)
SI/32 = [32](0)
goto [JUMP] [64](IP+-514)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](7)
SI/32 = [32](0)
goto [JUMP] [64](IP+-514)


###### -524
Initial RREIL instructions:
SI = [32](92)
SI/32 = [32](0)
goto [JUMP] [64](IP+-524)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](92)
SI/32 = [32](0)
goto [JUMP] [64](IP+-524)


###### -794
###### 0
Initial RREIL instructions:
T0 = [64](BP+8)
LTU = <u[64->1](BP,8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
if (FLAGS/6) goto [64](-794+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BP+8)
if (0) {
} else {
}
BP = [64](T0)
T0 = [32](BX-1)
LTS = <s[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
if (FLAGS/6) goto [64](-794+IP) else goto [64](IP)


###### 259
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2116700)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTU = <u[64->1](AX,T0)
LEU = <=u[64->1](AX,T0)
LTS = <s[64->1](AX,T0)
LES = <=s[64->1](AX,T0)
EQ = ==[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](259+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2116700)
DI = [64](T0)
T0 = *[64->64](DI+40)
AX = [64](T0)
T0 = *[64->64](DI+48)
T1 = [64](AX-T0)
LTS = <s[64->1](AX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](AX,T0)
} else {
FLAGS = <u[64->1](AX,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](259+IP) else goto [64](IP)


###### -597
Initial RREIL instructions:
*[64](AX+0) = [8](32)
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
goto [JUMP] [64](IP+-597)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](AX+0) = [8](32)
T0 = [64](AX+1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](DI+40+0) = [64](AX)
goto [JUMP] [64](IP+-597)


###### -418
Initial RREIL instructions:
DI = [32](1)
DI/32 = [32](0)
goto [JUMP] [64](IP+-418)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [32](1)
DI/32 = [32](0)
goto [JUMP] [64](IP+-418)


###### -432
Initial RREIL instructions:
T0 = xor[32](R12,R12)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R12 = [32](T0)
R12/32 = [32](0)
goto [JUMP] [64](IP+-432)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,31],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R12,R12)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R12 = [32](T0)
R12/32 = [32](0)
goto [JUMP] [64](IP+-432)


###### -1361
Initial RREIL instructions:
T0 = *[64->64](BP+8)
BX = [64](T0)
SI = [32](4212123)
SI/32 = [32](0)
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1361)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+8)
BX = [64](T0)
SI = [32](4212123)
SI/32 = [32](0)
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1361)


###### 62
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](62+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](62+IP) else goto [64](IP)


###### -1378
Initial RREIL instructions:
SI = [32](4212130)
SI/32 = [32](0)
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1378)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](4212130)
SI/32 = [32](0)
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1378)


###### 52
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](52+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](52+IP) else goto [64](IP)


###### -766
Initial RREIL instructions:
T0 = [64](BP+8)
LTU = <u[64->1](BP,8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
BX = [32](1)
BX/32 = [32](0)
goto [JUMP] [64](IP+-766)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BP+8)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
BX = [32](1)
BX/32 = [32](0)
goto [JUMP] [64](IP+-766)


###### 410
Initial RREIL instructions:
T0 = [5](4)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](AX,T0)
T2 = <u[8->1](32,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](32-T0)
T2 = shr[32](AX,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/31,FLAGS)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [32](T1)
AX/32 = [32](0)
T0 = zx[8->32](CX)
DI = [32](T0)
DI/32 = [32](0)
T0 = zx[64->64](R15+4)
R13 = [64](T0)
R14 = [32](AX)
R14/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+410)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],[0,7],},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[8,63],[8,10],[3,5],[1,1],[0,1],[0,0],},IP:{[0,63],},T2:{},T1:{[31,31],[0,31],[0,7],},T0:{},}

RREIL instructions after LV (greedy):
T0 = [5](4)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](AX,T0)
T2 = <u[8->1](32,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](32-T0)
T2 = shr[32](AX,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/31,FLAGS)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [32](T1)
AX/32 = [32](0)
T0 = zx[8->32](CX)
DI = [32](T0)
DI/32 = [32](0)
T0 = zx[64->64](R15+4)
R13 = [64](T0)
R14 = [32](AX)
R14/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+410)


###### -696
Initial RREIL instructions:
T0 = zx[64->32](R14+AX)
SI = [32](T0)
SI/32 = [32](0)
T0 = zx[8->32](DX/8)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-696)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[8,15],[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](DX/8)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-696)


###### 518
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+518)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+518)


###### 8373
Initial RREIL instructions:
T0 = *[64->64](IP+2116543)
DI = [64](T0)
T0 = *[64->64](IP+2116456)
CX = [64](T0)
R9 = [32](4212140)
R9/32 = [32](0)
R8 = [32](4212151)
R8/32 = [32](0)
DX = [32](4212071)
DX/32 = [32](0)
SI = [32](4212001)
SI/32 = [32](0)
*[64](SP+0) = [64](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+8373)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2116543)
DI = [64](T0)
T0 = *[64->64](IP+2116456)
CX = [64](T0)
R9 = [32](4212140)
R9/32 = [32](0)
R8 = [32](4212151)
R8/32 = [32](0)
DX = [32](4212071)
DX/32 = [32](0)
SI = [32](4212001)
SI/32 = [32](0)
*[64](SP+0) = [64](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+8373)


###### -1298
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1298)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1298)


###### -1085
Initial RREIL instructions:
R12 = [32](1)
R12/32 = [32](0)
goto [JUMP] [64](IP+-1085)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
R12 = [32](1)
R12/32 = [32](0)
goto [JUMP] [64](IP+-1085)


###### -1634
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1634)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1634)


###### -748
Initial RREIL instructions:
goto [JUMP] [64](IP+-748)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-748)


###### -1649
Initial RREIL instructions:
SI = [32](92)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1649)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](92)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1649)


###### -799
Initial RREIL instructions:
T0 = zx[8->32](R14)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-799)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],[0,7],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](R14)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-799)


###### -1668
Initial RREIL instructions:
SI = [32](10)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1668)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](10)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1668)


###### -1025
Initial RREIL instructions:
goto [JUMP] [64](IP+-1025)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-1025)


###### -826
Initial RREIL instructions:
T0 = [64](R13+1)
LTU = <u[64->1](R13,1)
T1 = xor[64](T0,R13)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R13)
} else {
FLAGS = <u[64->1](T0,R13)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R13)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R13 = [64](T0)
T0 = zx[8->32](AX)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-826)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R13+1)
T1 = xor[64](T0,R13)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R13)
} else {
FLAGS = <u[64->1](T0,R13)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R13)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R13 = [64](T0)
T0 = zx[8->32](AX)
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-826)


###### -1695
Initial RREIL instructions:
SI = [32](32)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1695)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](32)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1695)


###### -855
Initial RREIL instructions:
goto [JUMP] [64](IP+-855)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-855)


###### -1710
Initial RREIL instructions:
SI = [32](32)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1710)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](32)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1710)


###### -1165
Initial RREIL instructions:
T0 = [16](AX)
AX = [16](AX)
AX = [16](T0)
goto [JUMP] [64](IP+-1165)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[16,63],[0,15],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = [16](AX)
AX = [16](T0)
goto [JUMP] [64](IP+-1165)


###### -1697
Initial RREIL instructions:
T0 = xor[32](BP,BP)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BP = [32](T0)
BP/32 = [32](0)
R9 = [64](DX)
T0 = *[64->64](SP)
SP = [64](SP+8)
SI = [64](T0)
DX = [64](SP)
T0 = and[64](SP,240)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/63)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
SP = [64](T0)
T0 = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
R8 = [64](4209680)
CX = [64](4209536)
DI = [64](4198768)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1697)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,31],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](BP,BP)
FLAGS/4 = arbitrary[1]
BP = [32](T0)
BP/32 = [32](0)
R9 = [64](DX)
T0 = *[64->64](SP)
SP = [64](SP+8)
SI = [64](T0)
DX = [64](SP)
T0 = and[64](SP,240)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/63)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
R8 = [64](4209680)
CX = [64](4209536)
DI = [64](4198768)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1697)


###### 2
###### 0
Initial RREIL instructions:
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2115865)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
T0 = *[64->64](IP+2115865)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2+IP) else goto [64](IP)


Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](AX)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](AX)


Initial RREIL instructions:
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 75
###### 0
Initial RREIL instructions:
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SP)
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->8](IP+2116328)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](75+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
T0 = *[64->8](IP+2116328)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](75+IP) else goto [64](IP)


###### 36
###### 0
Initial RREIL instructions:
BX = [32](6315576)
BX/32 = [32](0)
T0 = *[64->64](IP+2116322)
AX = [64](T0)
T0 = [64](BX-6315568)
LTU = <u[64->1](BX,6315568)
LEU = <=u[64->1](BX,6315568)
LTS = <s[64->1](BX,6315568)
LES = <=s[64->1](BX,6315568)
EQ = ==[64->1](BX,6315568)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,6315568)
} else {
FLAGS = <u[64->1](BX,6315568)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,6315568)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = [6](3)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](T0-1)
T1 = shrs[64](BX,T2)
T3 = <u[8->1](64,3)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shrs[64](T1,1)
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = [1](0)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
BX = [64](T1)
T0 = [64](BX-1)
LTU = <u[64->1](BX,1)
LEU = <=u[64->1](BX,1)
LTS = <s[64->1](BX,1)
LES = <=s[64->1](BX,1)
EQ = ==[64->1](BX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,1)
} else {
FLAGS = <u[64->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = [64](AX-BX)
LTU = <u[64->1](AX,BX)
LEU = <=u[64->1](AX,BX)
LTS = <s[64->1](AX,BX)
LES = <=s[64->1](AX,BX)
EQ = ==[64->1](AX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,BX)
} else {
FLAGS = <u[64->1](AX,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](36+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T3:{},T2:{},T1:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
BX = [32](6315576)
BX/32 = [32](0)
T0 = *[64->64](IP+2116322)
AX = [64](T0)
T0 = [64](BX-6315568)
if (0) {
} else {
}
BX = [64](T0)
T0 = [6](3)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](T0-1)
T1 = shrs[64](BX,T2)
T3 = <u[8->1](64,3)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shrs[64](T1,1)
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
BX = [64](T1)
T0 = [64](BX-1)
if (0) {
} else {
}
BX = [64](T0)
T0 = [64](AX-BX)
LTS = <s[64->1](AX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,BX)
} else {
FLAGS = <u[64->1](AX,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](36+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](IP+2116285+0) = [64](AX)
T1 = *[64->64](8*AX+6315568)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX+1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](IP+2116285+0) = [64](AX)
T1 = *[64->64](8*AX+6315568)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](T1)


###### -30
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2116271)
AX = [64](T0)
T0 = [64](AX-BX)
LTU = <u[64->1](AX,BX)
LEU = <=u[64->1](AX,BX)
LTS = <s[64->1](AX,BX)
LES = <=s[64->1](AX,BX)
EQ = ==[64->1](AX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,BX)
} else {
FLAGS = <u[64->1](AX,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS) goto [64](-30+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2116271)
AX = [64](T0)
T0 = [64](AX-BX)
LTS = <s[64->1](AX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,BX)
} else {
FLAGS = <u[64->1](AX,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS) goto [64](-30+IP) else goto [64](IP)


Initial RREIL instructions:
*[64](IP+2116251+0) = [8](1)
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](IP+2116251+0) = [8](1)
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 18
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2115320)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SP)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115320)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SP)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


###### 8
###### 0
Initial RREIL instructions:
AX = [32](0)
AX/32 = [32](0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](8+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [32](0)
AX/32 = [32](0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](8+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
DI = [32](6315584)
DI/32 = [32](0)
goto [JUMP] [64](AX)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
DI = [32](6315584)
DI/32 = [32](0)
goto [JUMP] [64](AX)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 8
###### 0
Initial RREIL instructions:
T0 = zx[64->32](DI+-65)
DX = [32](T0)
DX/32 = [32](0)
T0 = [8](DX-37)
LTU = <u[8->1](DX,37)
LEU = <=u[8->1](DX,37)
LTS = <s[8->1](DX,37)
LES = <=s[8->1](DX,37)
EQ = ==[8->1](DX,37)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,37)
} else {
FLAGS = <u[8->1](DX,37)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,37)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](8+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->32](DI+-65)
DX = [32](T0)
DX/32 = [32](0)
T0 = [8](DX-37)
LTS = <s[8->1](DX,37)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,37)
} else {
FLAGS = <u[8->1](DX,37)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,37)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](8+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = zx[8->32](BX/8)
DI = [32](T0)
DI/32 = [32](0)
T0 = zx[64->32](DI+-48)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[8,15],[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](BX/8)
DI = [32](T0)
DI/32 = [32](0)
T0 = zx[64->32](DI+-48)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = zx[8->32](DX)
DX = [32](T0)
DX/32 = [32](0)
T1 = *[64->64](8*DX+4209832)
goto [JUMP] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,7],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](DX)
DX = [32](T0)
DX/32 = [32](0)
T1 = *[64->64](8*DX+4209832)
goto [JUMP] [64](T1)


Initial RREIL instructions:
AX = [32](15)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](15)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
AX = [32](10)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](10)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
AX = [32](11)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](11)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
AX = [32](12)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](12)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
AX = [32](13)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](13)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
AX = [32](14)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](14)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 44
###### 0
Initial RREIL instructions:
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [32](DI)
BX/32 = [32](0)
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = and[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](IP+2116066)
BP = [64](T0)
if (FLAGS/6) goto [64](44+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [32](DI)
BX/32 = [32](0)
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
T0 = and[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](IP+2116066)
BP = [64](T0)
if (FLAGS/6) goto [64](44+IP) else goto [64](IP)


###### -2196
Initial RREIL instructions:
SI = [32](4210720)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2196)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SI = [32](4210720)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2196)


###### -1789
Initial RREIL instructions:
T0 = *[64->64](IP+2116005)
DI = [64](T0)
DX = [64](AX)
CX = [64](BP)
SI = [32](1)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1789)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2116005)
DI = [64](T0)
DX = [64](AX)
CX = [64](BP)
SI = [32](1)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1789)


###### -1828
Initial RREIL instructions:
DI = [32](BX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1828)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [32](BX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1828)


###### -2240
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4210760)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2240)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4210760)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2240)


###### -1925
Initial RREIL instructions:
CX = [64](BP)
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1925)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](BP)
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1925)


###### -2285
Initial RREIL instructions:
T0 = *[64->64](IP+2115924)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4210824)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2285)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115924)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4210824)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2285)


###### -2120
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2120)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2120)


###### -2320
Initial RREIL instructions:
T0 = *[64->64](IP+2115889)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4210920)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2320)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115889)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4210920)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2320)


###### -2155
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2155)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2155)


###### -2355
Initial RREIL instructions:
T0 = *[64->64](IP+2115854)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211056)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2355)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115854)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211056)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2355)


###### -2190
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2190)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2190)


###### -2390
Initial RREIL instructions:
T0 = *[64->64](IP+2115819)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211104)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2390)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115819)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211104)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2390)


###### -2225
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2225)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2225)


###### -2425
Initial RREIL instructions:
T0 = *[64->64](IP+2115784)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211160)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2425)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115784)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211160)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2425)


###### -2260
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2260)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2260)


###### -2460
Initial RREIL instructions:
T0 = *[64->64](IP+2115749)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211224)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2460)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115749)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211224)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2460)


###### -2295
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2295)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2295)


###### -2495
Initial RREIL instructions:
T0 = *[64->64](IP+2115714)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211456)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2495)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115714)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211456)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2495)


###### -2330
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2330)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2330)


###### -2523
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4211568)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2523)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4211568)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2523)


###### -2207
Initial RREIL instructions:
DX = [32](4212001)
DX/32 = [32](0)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2207)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [32](4212001)
DX/32 = [32](0)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2207)


###### 485
Initial RREIL instructions:
T0 = *[64->64](IP+2115698)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+485)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115698)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+485)


###### -2575
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
BP = [64](AX)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212006)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2575)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
BP = [64](AX)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212006)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2575)


###### -2262
Initial RREIL instructions:
CX = [32](4212029)
CX/32 = [32](0)
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2262)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [32](4212029)
CX/32 = [32](0)
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2262)


###### -2615
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212051)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2615)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212051)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2615)


###### -2304
Initial RREIL instructions:
CX = [32](4211760)
CX/32 = [32](0)
SI = [64](AX)
DX = [32](4212071)
DX/32 = [32](0)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2304)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [32](4211760)
CX/32 = [32](0)
SI = [64](AX)
DX = [32](4212071)
DX/32 = [32](0)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2304)


###### -2664
Initial RREIL instructions:
T0 = *[64->64](IP+2115545)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211800)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2664)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115545)
BP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SI = [32](4211800)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2664)


###### -2499
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2499)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2499)


###### -2367
Initial RREIL instructions:
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
DI = [32](5)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2367)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,31],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
DI = [32](5)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2367)


###### 22
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](22+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](22+IP) else goto [64](IP)


###### -2806
Initial RREIL instructions:
DX = [32](3)
DX/32 = [32](0)
SI = [32](4212085)
SI/32 = [32](0)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2806)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DX = [32](3)
DX/32 = [32](0)
SI = [32](4212085)
SI/32 = [32](0)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2806)


###### 55
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](55+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](55+IP) else goto [64](IP)


###### 314
Initial RREIL instructions:
T0 = *[64->64](IP+2115527)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+314)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115527)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+314)


###### -2746
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
BP = [64](AX)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4211936)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2746)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
BP = [64](AX)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4211936)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2746)


###### -2428
Initial RREIL instructions:
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2428)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2428)


###### -548
Initial RREIL instructions:
goto [JUMP] [64](IP+-548)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-548)


###### 259
Initial RREIL instructions:
T0 = *[64->64](IP+2115472)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+259)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115472)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+259)


###### -2801
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
BP = [64](AX)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4211864)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2801)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
BP = [64](AX)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4211864)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2801)


###### -2483
Initial RREIL instructions:
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2483)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](BP)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2483)


###### -107
Initial RREIL instructions:
goto [JUMP] [64](IP+-107)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-107)


Initial RREIL instructions:
*[64](IP+2115393+0) = [64](DI)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](IP+2115393+0) = [64](DI)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
*[64](IP+2115385+0) = [8](BX/8)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](IP+2115385+0) = [8](BX/8)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 7871
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-16)
LTU = <u[64->1](SP,16)
LEU = <=u[64->1](SP,16)
LTS = <s[64->1](SP,16)
LES = <=s[64->1](SP,16)
EQ = ==[64->1](SP,16)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,16)
} else {
FLAGS = <u[64->1](SP,16)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2115316)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+7871)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-16)
LTS = <s[64->1](SP,16)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,16)
} else {
FLAGS = <u[64->1](SP,16)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2115316)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+7871)


###### 19
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](19+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](19+IP) else goto [64](IP)


###### 32
###### 0
Initial RREIL instructions:
T0 = *[64->8](IP+2115348)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](32+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](IP+2115348)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](32+IP) else goto [64](IP)


###### -3011
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3011)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3011)


###### 22
###### 0
Initial RREIL instructions:
T0 = *[64->32](AX)
T1 = [32](T0-32)
LTU = <u[32->1](T0,32)
LEU = <=u[32->1](T0,32)
LTS = <s[32->1](T0,32)
LES = <=s[32->1](T0,32)
EQ = ==[32->1](T0,32)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,32)
} else {
FLAGS = <u[32->1](T0,32)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,32)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](22+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](AX)
T1 = [32](T0-32)
LTS = <s[32->1](T0,32)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,32)
} else {
FLAGS = <u[32->1](T0,32)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,32)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](22+IP) else goto [64](IP)


###### 7836
Initial RREIL instructions:
T0 = *[64->64](IP+2115297)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+7836)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115297)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+7836)


###### 77
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](77+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](77+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = [64](SP+16)
LTU = <u[64->1](SP,16)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+16)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -2943
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212166)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2943)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212166)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2943)


###### 50
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2115282)
DI = [64](T0)
BX = [64](AX)
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](50+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2115282)
DI = [64](T0)
BX = [64](AX)
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](50+IP) else goto [64](IP)


###### 5453
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+5453)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+5453)


###### -3085
Initial RREIL instructions:
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3085)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3085)


###### -2645
Initial RREIL instructions:
T0 = *[64->64](SP+8)
CX = [64](T0)
T0 = *[64->32](AX)
SI = [32](T0)
SI/32 = [32](0)
R8 = [64](BX)
DX = [32](4212178)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2645)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+8)
CX = [64](T0)
T0 = *[64->32](AX)
SI = [32](T0)
SI/32 = [32](0)
R8 = [64](BX)
DX = [32](4212178)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
DI = [32](T0)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2645)


###### -3088
Initial RREIL instructions:
T0 = *[64->32](IP+2115117)
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3088)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](IP+2115117)
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3088)


###### -3125
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3125)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3125)


###### -2680
Initial RREIL instructions:
T0 = *[64->32](AX)
SI = [32](T0)
SI/32 = [32](0)
CX = [64](BX)
DX = [32](4212182)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2680)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](AX)
SI = [32](T0)
SI/32 = [32](0)
CX = [64](BX)
DX = [32](4212182)
DX/32 = [32](0)
T0 = xor[32](DI,DI)
DI = [32](T0)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2680)


###### -37
Initial RREIL instructions:
goto [JUMP] [64](IP+-37)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-37)


###### 17
###### 0
Initial RREIL instructions:
T0 = *[64->8](DI)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
AX = [64](DI)
T0 = [8](DX-47)
LTU = <u[8->1](DX,47)
LEU = <=u[8->1](DX,47)
LTS = <s[8->1](DX,47)
LES = <=s[8->1](DX,47)
EQ = ==[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](17+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](DI)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
AX = [64](DI)
T0 = [8](DX-47)
LTS = <s[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](17+IP) else goto [64](IP)


###### -12
###### 0
Initial RREIL instructions:
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = *[64->8](AX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = [8](DX-47)
LTU = <u[8->1](DX,47)
LEU = <=u[8->1](DX,47)
LTS = <s[8->1](DX,47)
LES = <=s[8->1](DX,47)
EQ = ==[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
if (FLAGS/6) goto [64](-12+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX+1)
if (0) {
} else {
}
AX = [64](T0)
T0 = *[64->8](AX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = [8](DX-47)
LTS = <s[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
if (FLAGS/6) goto [64](-12+IP) else goto [64](IP)


###### 58
###### 0
Initial RREIL instructions:
T0 = and[8](DX,DX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](58+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],[0,7],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](DX,DX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](58+IP) else goto [64](IP)


###### 30
Initial RREIL instructions:
CX = [64](AX)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+30)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,31],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](AX)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+30)


###### 5
###### 0
Initial RREIL instructions:
T0 = and[8](DX/8,DX/8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](5+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[8,15],[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](DX/8,DX/8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](5+IP) else goto [64](IP)


###### 21
###### 0
Initial RREIL instructions:
AX = [64](CX)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
T0 = [64](CX+1)
LTU = <u[64->1](CX,1)
T1 = xor[64](T0,CX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,CX)
} else {
FLAGS = <u[64->1](T0,CX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,CX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
CX = [64](T0)
T0 = *[64->8](CX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = and[8](DX,DX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](21+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [64](CX)
T0 = xor[32](SI,SI)
SI = [32](T0)
SI/32 = [32](0)
T0 = [64](CX+1)
if (0) {
} else {
}
CX = [64](T0)
T0 = *[64->8](CX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = and[8](DX,DX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](21+IP) else goto [64](IP)


###### -26
###### 0
Initial RREIL instructions:
T0 = [8](DX-47)
LTU = <u[8->1](DX,47)
LEU = <=u[8->1](DX,47)
LTS = <s[8->1](DX,47)
LES = <=s[8->1](DX,47)
EQ = ==[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-26+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],[0,7],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [8](DX-47)
LTS = <s[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-26+IP) else goto [64](IP)


###### -21
###### 0
Initial RREIL instructions:
T0 = [64](CX+1)
LTU = <u[64->1](CX,1)
T1 = xor[64](T0,CX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,CX)
} else {
FLAGS = <u[64->1](T0,CX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,CX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
CX = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->8](CX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = and[8](DX,DX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-21+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](CX+1)
if (0) {
} else {
}
CX = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->8](CX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = and[8](DX,DX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-21+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -3113
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3113)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3113)


###### 7
###### 0
Initial RREIL instructions:
T0 = [64](AX-1)
LTU = <u[64->1](AX,1)
LEU = <=u[64->1](AX,1)
LTS = <s[64->1](AX,1)
LES = <=s[64->1](AX,1)
EQ = ==[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](7+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-1)
LTS = <s[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](7+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->8](BX+AX+-1)
T1 = [8](T0-47)
LTU = <u[8->1](T0,47)
LEU = <=u[8->1](T0,47)
LTS = <s[8->1](T0,47)
LES = <=s[8->1](T0,47)
EQ = ==[8->1](T0,47)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,47)
} else {
FLAGS = <u[8->1](T0,47)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,47)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](BX+AX+-1)
T1 = [8](T0-47)
LTS = <s[8->1](T0,47)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,47)
} else {
FLAGS = <u[8->1](T0,47)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,47)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](10+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -27
###### 0
Initial RREIL instructions:
T0 = [64](AX-1)
LTU = <u[64->1](AX,1)
LEU = <=u[64->1](AX,1)
LTS = <s[64->1](AX,1)
LES = <=s[64->1](AX,1)
EQ = ==[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = [64](AX-1)
LTU = <u[64->1](AX,1)
LEU = <=u[64->1](AX,1)
LTS = <s[64->1](AX,1)
LES = <=s[64->1](AX,1)
EQ = ==[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-27+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-1)
if (0) {
} else {
}
AX = [64](T0)
T0 = [64](AX-1)
LTS = <s[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-27+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 106
###### 0
Initial RREIL instructions:
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
if (FLAGS/6) goto [64](106+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
if (FLAGS/6) goto [64](106+IP) else goto [64](IP)


###### -3107
Initial RREIL instructions:
SI = [32](47)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3107)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](47)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3107)


###### 75
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](75+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](75+IP) else goto [64](IP)


###### 59
###### 0
Initial RREIL instructions:
T0 = zx[64->64](AX+1)
DX = [64](T0)
CX = [64](DX)
T0 = [64](CX-BX)
LTU = <u[64->1](CX,BX)
LEU = <=u[64->1](CX,BX)
LTS = <s[64->1](CX,BX)
LES = <=s[64->1](CX,BX)
EQ = ==[64->1](CX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](CX,BX)
} else {
FLAGS = <u[64->1](CX,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,CX)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
CX = [64](T0)
T0 = [64](CX-6)
LTU = <u[64->1](CX,6)
LEU = <=u[64->1](CX,6)
LTS = <s[64->1](CX,6)
LES = <=s[64->1](CX,6)
EQ = ==[64->1](CX,6)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](CX,6)
} else {
FLAGS = <u[64->1](CX,6)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,CX)
T5 = xor[64](T5,6)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](59+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](AX+1)
DX = [64](T0)
CX = [64](DX)
T0 = [64](CX-BX)
if (0) {
} else {
}
CX = [64](T0)
T0 = [64](CX-6)
LTS = <s[64->1](CX,6)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](CX,6)
} else {
FLAGS = <u[64->1](CX,6)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,CX)
T5 = xor[64](T5,6)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](59+IP) else goto [64](IP)


###### 41
###### 0
Initial RREIL instructions:
T0 = zx[64->64](AX+-6)
SI = [64](T0)
DI = [32](4212248)
DI/32 = [32](0)
CX = [32](7)
CX/32 = [32](0)
T1 = /=[64->1](CX,0)
T0 = [1](T1)
T2 = [1](T0)
while (T2) {
T3 = *[64->8](SI)
T4 = *[64->8](DI)
T5 = [8](T3-T4)
LTU = <u[8->1](T3,T4)
LEU = <=u[8->1](T3,T4)
LTS = <s[8->1](T3,T4)
LES = <=s[8->1](T3,T4)
EQ = ==[8->1](T3,T4)
FLAGS/7 = <s[8->1](T5,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T5,0)
if (0) {
FLAGS = <=u[8->1](T3,T4)
} else {
FLAGS = <u[8->1](T3,T4)
}
T9 = [8](T5)
FLAGS/2 = ==[1->1](T9/7,T9/6)
FLAGS/2 = ==[1->1](FLAGS/2,T9/5)
FLAGS/2 = ==[1->1](FLAGS/2,T9/4)
FLAGS/2 = ==[1->1](FLAGS/2,T9/3)
FLAGS/2 = ==[1->1](FLAGS/2,T9/2)
FLAGS/2 = ==[1->1](FLAGS/2,T9/1)
FLAGS/2 = ==[1->1](FLAGS/2,T9)
T10 = xor[8](T5,T3)
T10 = xor[8](T10,T4)
T10 = and[8](T10,16)
FLAGS/4 = /=[8->1](T10,0)
T6 = xor[1](FLAGS/10,1)
if (T6) {
SI = [64](SI+1)
} else {
SI = [64](SI-1)
}
T6 = xor[1](FLAGS/10,1)
if (T6) {
DI = [64](DI+1)
} else {
DI = [64](DI-1)
}
CX = [64](CX-1)
T3 = /=[64->1](CX,0)
T4 = xor[1](FLAGS/6,1)
T5 = and[1](T3,T4)
T0 = [1](T5)
T2 = [1](T0)
}
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](41+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[10,10],[6,6],[0,63],},IP:{[0,63],},LTU:{},LTS:{},LEU:{},LES:{},EQ:{},T10:{},T9:{},T6:{},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](AX+-6)
SI = [64](T0)
DI = [32](4212248)
DI/32 = [32](0)
CX = [32](7)
CX/32 = [32](0)
T1 = /=[64->1](CX,0)
T0 = [1](T1)
T2 = [1](T0)
while (T2) {
T3 = *[64->8](SI)
T4 = *[64->8](DI)
T5 = [8](T3-T4)
LTU = <u[8->1](T3,T4)
LEU = <=u[8->1](T3,T4)
LTS = <s[8->1](T3,T4)
LES = <=s[8->1](T3,T4)
EQ = ==[8->1](T3,T4)
FLAGS/7 = <s[8->1](T5,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T5,0)
if (0) {
} else {
}
T6 = xor[1](FLAGS/10,1)
if (T6) {
} else {
}
T6 = xor[1](FLAGS/10,1)
if (T6) {
} else {
}
}
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](41+IP) else goto [64](IP)


###### 11
###### 0
Initial RREIL instructions:
CX = [32](3)
CX/32 = [32](0)
SI = [64](DX)
DI = [32](4212256)
DI/32 = [32](0)
T1 = /=[64->1](CX,0)
T0 = [1](T1)
T2 = [1](T0)
while (T2) {
T3 = *[64->8](SI)
T4 = *[64->8](DI)
T5 = [8](T3-T4)
LTU = <u[8->1](T3,T4)
LEU = <=u[8->1](T3,T4)
LTS = <s[8->1](T3,T4)
LES = <=s[8->1](T3,T4)
EQ = ==[8->1](T3,T4)
FLAGS/7 = <s[8->1](T5,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T5,0)
if (0) {
FLAGS = <=u[8->1](T3,T4)
} else {
FLAGS = <u[8->1](T3,T4)
}
T9 = [8](T5)
FLAGS/2 = ==[1->1](T9/7,T9/6)
FLAGS/2 = ==[1->1](FLAGS/2,T9/5)
FLAGS/2 = ==[1->1](FLAGS/2,T9/4)
FLAGS/2 = ==[1->1](FLAGS/2,T9/3)
FLAGS/2 = ==[1->1](FLAGS/2,T9/2)
FLAGS/2 = ==[1->1](FLAGS/2,T9/1)
FLAGS/2 = ==[1->1](FLAGS/2,T9)
T10 = xor[8](T5,T3)
T10 = xor[8](T10,T4)
T10 = and[8](T10,16)
FLAGS/4 = /=[8->1](T10,0)
T6 = xor[1](FLAGS/10,1)
if (T6) {
SI = [64](SI+1)
} else {
SI = [64](SI-1)
}
T6 = xor[1](FLAGS/10,1)
if (T6) {
DI = [64](DI+1)
} else {
DI = [64](DI-1)
}
CX = [64](CX-1)
T3 = /=[64->1](CX,0)
T4 = xor[1](FLAGS/6,1)
T5 = and[1](T3,T4)
T0 = [1](T5)
T2 = [1](T0)
}
BX = [64](DX)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
T3 = zx[1->8](T2)
DX/8 = [8](T3)
T0 = zx[1->8](FLAGS)
CX = [8](T0)
T0 = [8](DX/8-CX)
LTU = <u[8->1](DX/8,CX)
LEU = <=u[8->1](DX/8,CX)
LTS = <s[8->1](DX/8,CX)
LES = <=s[8->1](DX/8,CX)
EQ = ==[8->1](DX/8,CX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX/8,CX)
} else {
FLAGS = <u[8->1](DX/8,CX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX/8)
T5 = xor[8](T5,CX)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](11+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[16,63],[0,63],[0,7],},CX:{},BX:{},AX:{[0,63],},FLAGS:{[12,63],[10,10],[8,10],[6,6],[5,5],[3,3],[1,1],[0,0],},IP:{[0,63],},LTU:{},LTS:{},LEU:{},LES:{},EQ:{},T10:{},T9:{},T6:{},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [32](3)
CX/32 = [32](0)
SI = [64](DX)
DI = [32](4212256)
DI/32 = [32](0)
T1 = /=[64->1](CX,0)
T0 = [1](T1)
T2 = [1](T0)
while (T2) {
T3 = *[64->8](SI)
T4 = *[64->8](DI)
T5 = [8](T3-T4)
LTU = <u[8->1](T3,T4)
LEU = <=u[8->1](T3,T4)
LTS = <s[8->1](T3,T4)
LES = <=s[8->1](T3,T4)
EQ = ==[8->1](T3,T4)
FLAGS/7 = <s[8->1](T5,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T5,0)
if (0) {
} else {
}
T6 = xor[1](FLAGS/10,1)
if (T6) {
} else {
}
T6 = xor[1](FLAGS/10,1)
if (T6) {
} else {
}
}
BX = [64](DX)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
T3 = zx[1->8](T2)
DX/8 = [8](T3)
T0 = zx[1->8](FLAGS)
CX = [8](T0)
T0 = [8](DX/8-CX)
LTS = <s[8->1](DX/8,CX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX/8,CX)
} else {
FLAGS = <u[8->1](DX/8,CX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX/8)
T5 = xor[8](T5,CX)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](11+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = zx[64->64](AX+4)
BX = [64](T0)
*[64](IP+2114893+0) = [64](BX)
*[64](IP+2114958+0) = [64](BX)
*[64](IP+2114903+0) = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
*[64](IP+2114893+0) = [64](BX)
*[64](IP+2114958+0) = [64](BX)
*[64](IP+2114903+0) = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -2910
Initial RREIL instructions:
T0 = *[64->64](IP+2114902)
CX = [64](T0)
DX = [32](55)
DX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
DI = [32](4212192)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2910)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2114902)
CX = [64](T0)
DX = [32](55)
DX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
DI = [32](4212192)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-2910)


###### -3459
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3459)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3459)


###### 71
###### 0
Initial RREIL instructions:
T0 = [64](SP-72)
LTU = <u[64->1](SP,72)
LEU = <=u[64->1](SP,72)
LTS = <s[64->1](SP,72)
LES = <=s[64->1](SP,72)
EQ = ==[64->1](SP,72)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,72)
} else {
FLAGS = <u[64->1](SP,72)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,72)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
DX = [64](DI)
CX = [32](7)
CX/32 = [32](0)
DI = [64](SP)
T0 = [32](SI-8)
LTU = <u[32->1](SI,8)
LEU = <=u[32->1](SI,8)
LTS = <s[32->1](SI,8)
LES = <=s[32->1](SI,8)
EQ = ==[32->1](SI,8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](SI,8)
} else {
FLAGS = <u[32->1](SI,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,SI)
T5 = xor[32](T5,8)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
T1 = /=[64->1](CX,0)
T0 = [1](T1)
T2 = [1](T0)
while (T2) {
*[64](DI) = [64](AX)
T3 = xor[1](FLAGS/10,1)
if (T3) {
DI = [64](DI+8)
} else {
DI = [64](DI-8)
}
CX = [64](CX-1)
T3 = /=[64->1](CX,0)
T4 = and[1](T3,1)
T0 = [1](T4)
T2 = [1](T0)
}
if (FLAGS/6) goto [64](71+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],[0,31],},DX:{},CX:{},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[10,10],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-72)
if (0) {
} else {
}
SP = [64](T0)
T0 = xor[32](AX,AX)
AX = [32](T0)
AX/32 = [32](0)
DX = [64](DI)
CX = [32](7)
CX/32 = [32](0)
DI = [64](SP)
T0 = [32](SI-8)
LTS = <s[32->1](SI,8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](SI,8)
} else {
FLAGS = <u[32->1](SI,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,SI)
T5 = xor[32](T5,8)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
T1 = /=[64->1](CX,0)
T0 = [1](T1)
T2 = [1](T0)
while (T2) {
*[64](DI) = [64](AX)
T3 = xor[1](FLAGS/10,1)
if (T3) {
} else {
}
}
if (FLAGS/6) goto [64](71+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
AX = [64](T0)
*[64](DX+0) = [64](AX)
T0 = *[64->64](SP+8)
AX = [64](T0)
*[64](DX+0) = [32](SI)
*[64](DX+8+0) = [64](AX)
T0 = *[64->64](SP+16)
AX = [64](T0)
*[64](DX+16+0) = [64](AX)
T0 = *[64->64](SP+24)
AX = [64](T0)
*[64](DX+24+0) = [64](AX)
T0 = *[64->64](SP+32)
AX = [64](T0)
*[64](DX+32+0) = [64](AX)
T0 = *[64->64](SP+40)
AX = [64](T0)
*[64](DX+40+0) = [64](AX)
T0 = *[64->64](SP+48)
AX = [64](T0)
*[64](DX+48+0) = [64](AX)
AX = [64](DX)
T0 = [64](SP+72)
LTU = <u[64->1](SP,72)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,72)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,72)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
*[64](DX+0) = [64](AX)
T0 = *[64->64](SP+8)
*[64](DX+0) = [32](SI)
*[64](DX+8+0) = [64](AX)
T0 = *[64->64](SP+16)
*[64](DX+16+0) = [64](AX)
T0 = *[64->64](SP+24)
*[64](DX+24+0) = [64](AX)
T0 = *[64->64](SP+32)
*[64](DX+32+0) = [64](AX)
T0 = *[64->64](SP+40)
*[64](DX+40+0) = [64](AX)
T0 = *[64->64](SP+48)
*[64](DX+48+0) = [64](AX)
AX = [64](DX)
T0 = [64](SP+72)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,72)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,72)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -3573
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3573)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3573)


###### -3560
Initial RREIL instructions:
T0 = [64](R15)
SP = [64](SP-8)
*[64](SP) = [64](T0)
R10 = [64](DX)
R15 = [64](SI)
T0 = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](R13)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-232)
LTU = <u[64->1](SP,232)
LEU = <=u[64->1](SP,232)
LTS = <s[64->1](SP,232)
LES = <=s[64->1](SP,232)
EQ = ==[64->1](SP,232)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,232)
} else {
FLAGS = <u[64->1](SP,232)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,232)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP+288)
AX = [64](T0)
*[64](SP+160+0) = [32](R9)
T0 = *[64->64](FS+40)
DX = [64](T0)
*[64](SP+216+0) = [64](DX)
T0 = xor[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
*[64](SP+40+0) = [64](R10)
*[64](SP+64+0) = [64](DI)
*[64](SP+72+0) = [64](AX)
T0 = *[64->64](SP+296)
AX = [64](T0)
*[64](SP+92+0) = [32](R8)
*[64](SP+32+0) = [64](CX)
*[64](SP+144+0) = [64](AX)
T0 = *[64->64](SP+304)
AX = [64](T0)
*[64](SP+128+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3560)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
R10 = [64](DX)
R15 = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-232)
if (0) {
} else {
}
SP = [64](T0)
T0 = *[64->64](SP+288)
*[64](SP+160+0) = [32](R9)
T0 = *[64->64](FS+40)
DX = [64](T0)
*[64](SP+216+0) = [64](DX)
T0 = xor[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
*[64](SP+40+0) = [64](R10)
*[64](SP+64+0) = [64](DI)
*[64](SP+72+0) = [64](AX)
T0 = *[64->64](SP+296)
*[64](SP+92+0) = [32](R8)
*[64](SP+32+0) = [64](CX)
*[64](SP+144+0) = [64](AX)
T0 = *[64->64](SP+304)
AX = [64](T0)
*[64](SP+128+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3560)


###### 11
###### 0
Initial RREIL instructions:
T0 = *[64->8](SP+160)
T1 = and[8](T0,2)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+136+0) = [64](AX)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
R9 = [8](T1)
T0 = *[64->32](SP+92)
T1 = [32](T0-8)
LTU = <u[32->1](T0,8)
LEU = <=u[32->1](T0,8)
LTS = <s[32->1](T0,8)
LES = <=s[32->1](T0,8)
EQ = ==[32->1](T0,8)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,8)
} else {
FLAGS = <u[32->1](T0,8)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,8)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](11+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{[8,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](SP+160)
T1 = and[8](T0,2)
FLAGS/6 = ==[8->1](T1,0)
*[64](SP+136+0) = [64](AX)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
R9 = [8](T1)
T0 = *[64->32](SP+92)
T1 = [32](T0-8)
LTS = <s[32->1](T0,8)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,8)
} else {
FLAGS = <u[32->1](T0,8)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,8)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](11+IP) else goto [64](IP)


###### -3746
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3746)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3746)


Initial RREIL instructions:
T0 = *[64->32](SP+92)
AX = [32](T0)
AX/32 = [32](0)
T1 = *[64->64](8*AX+4212320)
goto [JUMP] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
AX = [32](T0)
AX/32 = [32](0)
T1 = *[64->64](8*AX+4212320)
goto [JUMP] [64](T1)


###### 2907
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](2907+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](2907+IP) else goto [64](IP)


###### 2584
###### 0
Initial RREIL instructions:
T0 = and[64](R15,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2584+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](R15,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2584+IP) else goto [64](IP)


###### 329
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
BX = [32](1)
BX/32 = [32](0)
*[64](DI+0) = [8](34)
T0 = *[64->32](SP+160)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->32](SP+160)
DX = [32](T0)
DX/32 = [32](0)
T0 = xor[32](BP,BP)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BP = [32](T0)
BP/32 = [32](0)
R14 = [64](R10)
T0 = and[32](AX,4)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[32](DX,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
DX = [32](T0)
DX/32 = [32](0)
*[64](SP+176+0) = [32](AX)
*[64](SP+164+0) = [32](DX)
goto [JUMP] [64](IP+329)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,31],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
BX = [32](1)
BX/32 = [32](0)
*[64](DI+0) = [8](34)
T0 = *[64->32](SP+160)
AX = [32](T0)
T0 = *[64->32](SP+160)
DX = [32](T0)
T0 = xor[32](BP,BP)
FLAGS/4 = arbitrary[1]
BP = [32](T0)
BP/32 = [32](0)
R14 = [64](R10)
T0 = and[32](AX,4)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[32](DX,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
DX = [32](T0)
DX/32 = [32](0)
*[64](SP+176+0) = [32](AX)
*[64](SP+164+0) = [32](DX)
goto [JUMP] [64](IP+329)


###### 346
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+80)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](346+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+80)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](346+IP) else goto [64](IP)


###### 71
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+80)
AX = [64](T0)
T0 = xor[32](R8,R8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R8 = [32](T0)
R8/32 = [32](0)
T0 = zx[64->64](R14+BP)
R10 = [64](T0)
T0 = [64](AX+BP)
LTU = <u[64->1](AX,BP)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,BP)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = [64](R11-AX)
LTU = <u[64->1](R11,AX)
LEU = <=u[64->1](R11,AX)
LTS = <s[64->1](R11,AX)
LES = <=s[64->1](R11,AX)
EQ = ==[64->1](R11,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,AX)
} else {
FLAGS = <u[64->1](R11,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS) goto [64](71+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,31],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+80)
AX = [64](T0)
T0 = xor[32](R8,R8)
R8 = [32](T0)
R8/32 = [32](0)
T0 = zx[64->64](R14+BP)
R10 = [64](T0)
T0 = [64](AX+BP)
if (0) {
} else {
}
AX = [64](T0)
T0 = [64](R11-AX)
LTS = <s[64->1](R11,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,AX)
} else {
FLAGS = <u[64->1](R11,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS) goto [64](71+IP) else goto [64](IP)


###### -3649
Initial RREIL instructions:
T0 = *[64->64](SP+80)
DX = [64](T0)
T0 = *[64->64](SP+120)
SI = [64](T0)
DI = [64](R10)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3649)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+80)
DX = [64](T0)
T0 = *[64->64](SP+120)
SI = [64](T0)
DI = [64](R10)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3649)


###### 15
###### 0
Initial RREIL instructions:
T0 = xor[32](R8,R8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R8 = [32](T0)
R8/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](15+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{},R8:{[0,31],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R8,R8)
R8 = [32](T0)
R8/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](15+IP) else goto [64](IP)


###### 1039
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](1039+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](1039+IP) else goto [64](IP)


###### 262
###### 0
Initial RREIL instructions:
R8 = [32](1)
R8/32 = [32](0)
T0 = *[64->8](R10)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = [8](R12-126)
LTU = <u[8->1](R12,126)
LEU = <=u[8->1](R12,126)
LTS = <s[8->1](R12,126)
LES = <=s[8->1](R12,126)
EQ = ==[8->1](R12,126)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](R12,126)
} else {
FLAGS = <u[8->1](R12,126)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,R12)
T5 = xor[8](T5,126)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](262+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R8 = [32](1)
R8/32 = [32](0)
T0 = *[64->8](R10)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = [8](R12-126)
LTS = <s[8->1](R12,126)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](R12,126)
} else {
FLAGS = <u[8->1](R12,126)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,R12)
T5 = xor[8](T5,126)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](262+IP) else goto [64](IP)


###### 1668
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+136)
T1 = [64](T0-1)
LTU = <u[64->1](T0,1)
LEU = <=u[64->1](T0,1)
LTS = <s[64->1](T0,1)
LES = <=s[64->1](T0,1)
EQ = ==[64->1](T0,1)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,1)
} else {
FLAGS = <u[64->1](T0,1)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,1)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](1668+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+136)
T1 = [64](T0-1)
LTS = <s[64->1](T0,1)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,1)
} else {
FLAGS = <u[64->1](T0,1)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,1)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](1668+IP) else goto [64](IP)


###### -3416
Initial RREIL instructions:
*[64](SP+56+0) = [8](R8)
*[64](SP+48+0) = [8](R9)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3416)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](SP+56+0) = [8](R8)
*[64](SP+48+0) = [8](R9)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3416)


###### 861
###### 0
Initial RREIL instructions:
T0 = *[64->64](AX)
AX = [64](T0)
T0 = zx[8->32](R12)
DX = [32](T0)
DX/32 = [32](0)
T0 = *[64->8](SP+56)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
*[64](SP+112+0) = [64](1)
T0 = *[64->8](AX+2*DX+1)
T1 = and[8](T0,64)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
*[64](SP+96+0) = [8](T1)
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](861+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{[0,63],[0,7],},R11:{},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](AX)
AX = [64](T0)
T0 = zx[8->32](R12)
DX = [32](T0)
DX/32 = [32](0)
T0 = *[64->8](SP+56)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
*[64](SP+112+0) = [64](1)
T0 = *[64->8](AX+2*DX+1)
*[64](SP+96+0) = [8](T1)
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](861+IP) else goto [64](IP)


###### 1886
###### 0
Initial RREIL instructions:
T0 = *[64->8](SP+96)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
AX = [64](BX)
if (FLAGS/6) goto [64](1886+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](SP+96)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
AX = [64](BX)
if (FLAGS/6) goto [64](1886+IP) else goto [64](IP)


###### 29
###### 0
Initial RREIL instructions:
BX = [64](AX)
T0 = *[64->64](SP+72)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](29+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
BX = [64](AX)
T0 = *[64->64](SP+72)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](29+IP) else goto [64](IP)


###### 5
###### 0
Initial RREIL instructions:
DX = [32](R12)
DX/32 = [32](0)
T0 = *[64->64](SP+72)
DI = [64](T0)
AX = [32](1)
AX/32 = [32](0)
T0 = [5](5)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](DX,T2)
T3 = <u[8->1](8,5)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
T2 = [8](DX)
FLAGS/11 = [1](T2/7)
} else {
T2 = /=[8->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
DX = [8](T1)
CX = [32](R12)
CX/32 = [32](0)
T0 = zx[8->32](DX)
DX = [32](T0)
DX/32 = [32](0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](AX,T0)
T2 = <u[8->1](32,CX)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](32-T0)
T2 = shr[32](AX,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/31,FLAGS)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [32](T1)
AX/32 = [32](0)
T0 = *[64->32](DI+4*DX)
T1 = and[32](T0,AX)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](5+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],[0,31],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T3:{},T2:{},T1:{[8,31],[0,31],[0,7],},T0:{},}

RREIL instructions after LV (greedy):
DX = [32](R12)
T0 = *[64->64](SP+72)
DI = [64](T0)
AX = [32](1)
T0 = [5](5)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](DX,T2)
T3 = <u[8->1](8,5)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
} else {
T2 = /=[8->1](T0,0)
if (T2) {
} else {
}
}
DX = [8](T1)
CX = [32](R12)
CX/32 = [32](0)
T0 = zx[8->32](DX)
DX = [32](T0)
DX/32 = [32](0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](AX,T0)
T2 = <u[8->1](32,CX)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
} else {
T2 = /=[32->1](T0,0)
if (T2) {
} else {
}
}
AX = [32](T1)
AX/32 = [32](0)
T0 = *[64->32](DI+4*DX)
T1 = and[32](T0,AX)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](5+IP) else goto [64](IP)


###### 29
###### 0
Initial RREIL instructions:
T0 = and[8](R8,R8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](29+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],[0,7],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R8,R8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](29+IP) else goto [64](IP)


###### 853
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](853+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](853+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = [16](AX)
AX = [16](AX)
AX = [16](T0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[16,63],[0,15],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = [16](AX)
AX = [16](T0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](92)
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = [64](BP+1)
LTU = <u[64->1](BP,1)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](92)
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = [64](BP+1)
if (0) {
} else {
}
BP = [64](T0)
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


###### 1331
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](R12)
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = [64](BP-R11)
LTU = <u[64->1](BP,R11)
LEU = <=u[64->1](BP,R11)
LTS = <s[64->1](BP,R11)
LES = <=s[64->1](BP,R11)
EQ = ==[64->1](BP,R11)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BP,R11)
} else {
FLAGS = <u[64->1](BP,R11)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,R11)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = [64](R11-255)
LTU = <u[64->1](R11,255)
LEU = <=u[64->1](R11,255)
LTS = <s[64->1](R11,255)
LES = <=s[64->1](R11,255)
EQ = ==[64->1](R11,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,255)
} else {
FLAGS = <u[64->1](R11,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](1331+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[8,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](R12)
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = [64](BP-R11)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
} else {
}
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = [64](R11-255)
LTS = <s[64->1](R11,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,255)
} else {
FLAGS = <u[64->1](R11,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](1331+IP) else goto [64](IP)


###### 1339
###### 0
Initial RREIL instructions:
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](1339+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](1339+IP) else goto [64](IP)


###### -358
###### 0
Initial RREIL instructions:
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-358+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-358+IP) else goto [64](IP)


###### -262
###### 0
Initial RREIL instructions:
T0 = zx[64->64](R14+BP)
R10 = [64](T0)
T0 = xor[32](R8,R8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->8](R10)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = [8](R12-126)
LTU = <u[8->1](R12,126)
LEU = <=u[8->1](R12,126)
LTS = <s[8->1](R12,126)
LES = <=s[8->1](R12,126)
EQ = ==[8->1](R12,126)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](R12,126)
} else {
FLAGS = <u[8->1](R12,126)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,R12)
T5 = xor[8](T5,126)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](-262+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,31],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](R14+BP)
R10 = [64](T0)
T0 = xor[32](R8,R8)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->8](R10)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = [8](R12-126)
LTS = <s[8->1](R12,126)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](R12,126)
} else {
FLAGS = <u[8->1](R12,126)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,R12)
T5 = xor[8](T5,126)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](-262+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = zx[8->32](R12)
AX = [32](T0)
AX/32 = [32](0)
T1 = *[64->64](8*AX+4212392)
goto [JUMP] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],[0,7],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[8->32](R12)
AX = [32](T0)
AX/32 = [32](0)
T1 = *[64->64](8*AX+4212392)
goto [JUMP] [64](T1)


###### 2380
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](2380+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](2380+IP) else goto [64](IP)


###### 2054
###### 0
Initial RREIL instructions:
T0 = and[64](R15,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2054+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](R15,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2054+IP) else goto [64](IP)


###### -495
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
BX = [32](1)
BX/32 = [32](0)
*[64](DI+0) = [8](39)
goto [JUMP] [64](IP+-495)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
BX = [32](1)
BX/32 = [32](0)
*[64](DI+0) = [8](39)
goto [JUMP] [64](IP+-495)


###### -537
Initial RREIL instructions:
R9 = [32](1)
R9/32 = [32](0)
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
*[64](SP+92+0) = [32](2)
goto [JUMP] [64](IP+-537)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [32](1)
R9/32 = [32](0)
T0 = xor[32](R13,R13)
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
*[64](SP+92+0) = [32](2)
goto [JUMP] [64](IP+-537)


###### 144
###### 0
Initial RREIL instructions:
if (FLAGS/6) goto [64](144+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[6,6],[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
if (FLAGS/6) goto [64](144+IP) else goto [64](IP)


###### -4271
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212264)
SI/32 = [32](0)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4271)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212264)
SI/32 = [32](0)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4271)


###### 1985
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-7)
LTU = <u[32->1](T0,7)
LEU = <=u[32->1](T0,7)
LTS = <s[32->1](T0,7)
LES = <=s[32->1](T0,7)
EQ = ==[32->1](T0,7)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,7)
} else {
FLAGS = <u[32->1](T0,7)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,7)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
*[64](SP+144+0) = [64](AX)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
T0 = zx[1->8](FLAGS/6)
BX = [8](T0)
T0 = [64](AX-4212264)
LTU = <u[64->1](AX,4212264)
LEU = <=u[64->1](AX,4212264)
LTS = <s[64->1](AX,4212264)
LES = <=s[64->1](AX,4212264)
EQ = ==[64->1](AX,4212264)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,4212264)
} else {
FLAGS = <u[64->1](AX,4212264)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,4212264)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](1985+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[8,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
} else {
}
*[64](SP+144+0) = [64](AX)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
T0 = zx[1->8](FLAGS/6)
BX = [8](T0)
T0 = [64](AX-4212264)
LTS = <s[64->1](AX,4212264)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,4212264)
} else {
FLAGS = <u[64->1](AX,4212264)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,4212264)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](1985+IP) else goto [64](IP)


###### -4347
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212262)
SI/32 = [32](0)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4347)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212262)
SI/32 = [32](0)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4347)


###### 1888
###### 0
Initial RREIL instructions:
T0 = [64](AX-4212262)
LTU = <u[64->1](AX,4212262)
LEU = <=u[64->1](AX,4212262)
LTS = <s[64->1](AX,4212262)
LES = <=s[64->1](AX,4212262)
EQ = ==[64->1](AX,4212262)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,4212262)
} else {
FLAGS = <u[64->1](AX,4212262)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,4212262)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
*[64](SP+128+0) = [64](AX)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
if (FLAGS/6) goto [64](1888+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-4212262)
LTS = <s[64->1](AX,4212262)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,4212262)
} else {
FLAGS = <u[64->1](AX,4212262)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,4212262)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
*[64](SP+128+0) = [64](AX)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
if (FLAGS/6) goto [64](1888+IP) else goto [64](IP)


###### 46
###### 0
Initial RREIL instructions:
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](46+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](BX,BX)
BX = [32](T0)
BX/32 = [32](0)
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](46+IP) else goto [64](IP)


###### 31
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+144)
DX = [64](T0)
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](31+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+144)
DX = [64](T0)
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](31+IP) else goto [64](IP)


###### 3
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
CX = [64](T0)
T0 = [64](R15-BX)
LTU = <u[64->1](R15,BX)
LEU = <=u[64->1](R15,BX)
LTS = <s[64->1](R15,BX)
LES = <=s[64->1](R15,BX)
EQ = ==[64->1](R15,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,BX)
} else {
FLAGS = <u[64->1](R15,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](3+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
CX = [64](T0)
T0 = [64](R15-BX)
LTS = <s[64->1](R15,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,BX)
} else {
FLAGS = <u[64->1](R15,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](3+IP) else goto [64](IP)


###### -20
###### 0
Initial RREIL instructions:
*[64](CX+BX+0) = [8](AX)
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = *[64->8](DX+BX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-20+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](CX+BX+0) = [8](AX)
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = *[64->8](DX+BX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-20+IP) else goto [64](IP)


###### -4438
Initial RREIL instructions:
T0 = *[64->64](SP+128)
DI = [64](T0)
*[64](SP+48+0) = [8](R9)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4438)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+128)
DI = [64](T0)
*[64](SP+48+0) = [8](R9)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+40+0) = [64](R10)
*[64](SP+32+0) = [64](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4438)


###### -813
Initial RREIL instructions:
*[64](SP+80+0) = [64](AX)
T0 = *[64->64](SP+128)
AX = [64](T0)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
*[64](SP+120+0) = [64](AX)
goto [JUMP] [64](IP+-813)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+80+0) = [64](AX)
T0 = *[64->64](SP+128)
AX = [64](T0)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
R10 = [64](T0)
T0 = *[64->64](SP+32)
R11 = [64](T0)
*[64](SP+120+0) = [64](AX)
goto [JUMP] [64](IP+-813)


###### -844
Initial RREIL instructions:
T0 = xor[32](R9,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R9 = [32](T0)
R9/32 = [32](0)
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](0)
*[64](SP+120+0) = [64](0)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-844)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,31],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R9,R9)
R9 = [32](T0)
R9/32 = [32](0)
T0 = xor[32](R13,R13)
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](0)
*[64](SP+120+0) = [64](0)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-844)


###### -889
Initial RREIL instructions:
R9 = [32](1)
R9/32 = [32](0)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
*[64](SP+92+0) = [32](3)
goto [JUMP] [64](IP+-889)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [32](1)
R9/32 = [32](0)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
*[64](SP+92+0) = [32](3)
goto [JUMP] [64](IP+-889)


###### -923
Initial RREIL instructions:
T0 = xor[32](R9,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R9 = [32](T0)
R9/32 = [32](0)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](0)
*[64](SP+120+0) = [64](0)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-923)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,31],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R9,R9)
R9 = [32](T0)
R9/32 = [32](0)
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](0)
*[64](SP+120+0) = [64](0)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-923)


###### 230
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS/6) goto [64](230+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS/6) goto [64](230+IP) else goto [64](IP)


###### 154
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-3)
LTU = <u[32->1](T0,3)
LEU = <=u[32->1](T0,3)
LTS = <s[32->1](T0,3)
LES = <=s[32->1](T0,3)
EQ = ==[32->1](T0,3)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,3)
} else {
FLAGS = <u[32->1](T0,3)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,3)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](154+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-3)
LTS = <s[32->1](T0,3)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,3)
} else {
FLAGS = <u[32->1](T0,3)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,3)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](154+IP) else goto [64](IP)


###### 139
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+176)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](139+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+176)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](139+IP) else goto [64](IP)


###### 126
###### 0
Initial RREIL instructions:
T0 = zx[64->64](BP+2)
AX = [64](T0)
T0 = [64](R11-AX)
LTU = <u[64->1](R11,AX)
LEU = <=u[64->1](R11,AX)
LTS = <s[64->1](R11,AX)
LES = <=s[64->1](R11,AX)
EQ = ==[64->1](R11,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,AX)
} else {
FLAGS = <u[64->1](R11,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](126+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](BP+2)
AX = [64](T0)
T0 = [64](R11-AX)
LTS = <s[64->1](R11,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,AX)
} else {
FLAGS = <u[64->1](R11,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](126+IP) else goto [64](IP)


###### 118
###### 0
Initial RREIL instructions:
T0 = *[64->8](R14+BP+1)
T1 = [8](T0-63)
LTU = <u[8->1](T0,63)
LEU = <=u[8->1](T0,63)
LTS = <s[8->1](T0,63)
LES = <=s[8->1](T0,63)
EQ = ==[8->1](T0,63)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,63)
} else {
FLAGS = <u[8->1](T0,63)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,63)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](118+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R14+BP+1)
T1 = [8](T0-63)
LTS = <s[8->1](T0,63)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,63)
} else {
FLAGS = <u[8->1](T0,63)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,63)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](118+IP) else goto [64](IP)


###### 108
###### 0
Initial RREIL instructions:
T0 = *[64->8](R14+AX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = [8](DX-62)
LTU = <u[8->1](DX,62)
LEU = <=u[8->1](DX,62)
LTS = <s[8->1](DX,62)
LES = <=s[8->1](DX,62)
EQ = ==[8->1](DX,62)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,62)
} else {
FLAGS = <u[8->1](DX,62)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,62)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](108+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R14+AX)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = [8](DX-62)
LTS = <s[8->1](DX,62)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,62)
} else {
FLAGS = <u[8->1](DX,62)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,62)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](108+IP) else goto [64](IP)


###### 92
###### 0
Initial RREIL instructions:
CX = [64](8070630310989004800)
T0 = [6](DX)
T0/6 = [58](0)
T1 = shr[64](CX,T0)
FLAGS = [1](T1)
FLAGS/11 = arbitrary[1]
FLAGS/7 = arbitrary[1]
FLAGS/4 = arbitrary[1]
FLAGS/2 = arbitrary[1]
T0 = xor[1](FLAGS,1)
if (T0) goto [64](92+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],[0,5],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,6],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](8070630310989004800)
T0 = [6](DX)
T0/6 = [58](0)
T1 = shr[64](CX,T0)
FLAGS = [1](T1)
FLAGS/11 = arbitrary[1]
FLAGS/7 = arbitrary[1]
FLAGS/4 = arbitrary[1]
FLAGS/2 = arbitrary[1]
T0 = xor[1](FLAGS,1)
if (T0) goto [64](92+IP) else goto [64](IP)


###### 163
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](163+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](163+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R12 = [32](DX)
R12/32 = [32](0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],[0,31],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R12 = [32](DX)
R12/32 = [32](0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](63)
T0 = zx[64->64](BX+1)
DX = [64](T0)
T0 = [64](R15-DX)
LTU = <u[64->1](R15,DX)
LEU = <=u[64->1](R15,DX)
LTS = <s[64->1](R15,DX)
LES = <=s[64->1](R15,DX)
EQ = ==[64->1](R15,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,DX)
} else {
FLAGS = <u[64->1](R15,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](63)
T0 = zx[64->64](BX+1)
DX = [64](T0)
T0 = [64](R15-DX)
LTS = <s[64->1](R15,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,DX)
} else {
FLAGS = <u[64->1](R15,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+1+0) = [8](34)
T0 = zx[64->64](BX+2)
DX = [64](T0)
T0 = [64](R15-DX)
LTU = <u[64->1](R15,DX)
LEU = <=u[64->1](R15,DX)
LTS = <s[64->1](R15,DX)
LES = <=s[64->1](R15,DX)
EQ = ==[64->1](R15,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,DX)
} else {
FLAGS = <u[64->1](R15,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+1+0) = [8](34)
T0 = zx[64->64](BX+2)
DX = [64](T0)
T0 = [64](R15-DX)
LTS = <s[64->1](R15,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,DX)
} else {
FLAGS = <u[64->1](R15,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+2+0) = [8](34)
T0 = zx[64->64](BX+3)
DX = [64](T0)
T0 = [64](R15-DX)
LTU = <u[64->1](R15,DX)
LEU = <=u[64->1](R15,DX)
LTS = <s[64->1](R15,DX)
LES = <=s[64->1](R15,DX)
EQ = ==[64->1](R15,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,DX)
} else {
FLAGS = <u[64->1](R15,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+2+0) = [8](34)
T0 = zx[64->64](BX+3)
DX = [64](T0)
T0 = [64](R15-DX)
LTS = <s[64->1](R15,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,DX)
} else {
FLAGS = <u[64->1](R15,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


###### -833
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+3+0) = [8](63)
T0 = [64](BX+4)
LTU = <u[64->1](BX,4)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,4)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,4)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
BP = [64](AX)
T0 = [16](AX)
AX = [16](AX)
AX = [16](T0)
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-833+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[16,63],[0,63],[0,15],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+3+0) = [8](63)
T0 = [64](BX+4)
if (0) {
} else {
}
BX = [64](T0)
BP = [64](AX)
T0 = [16](AX)
AX = [16](T0)
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-833+IP) else goto [64](IP)


###### -805
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-805+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-805+IP) else goto [64](IP)


###### -847
Initial RREIL instructions:
goto [JUMP] [64](IP+-847)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-847)


###### 1199
###### 0
Initial RREIL instructions:
T0 = [64](R11-1)
LTU = <u[64->1](R11,1)
LEU = <=u[64->1](R11,1)
LTS = <s[64->1](R11,1)
LES = <=s[64->1](R11,1)
EQ = ==[64->1](R11,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,1)
} else {
FLAGS = <u[64->1](R11,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = [64](R11-255)
LTU = <u[64->1](R11,255)
LEU = <=u[64->1](R11,255)
LTS = <s[64->1](R11,255)
LES = <=s[64->1](R11,255)
EQ = ==[64->1](R11,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,255)
} else {
FLAGS = <u[64->1](R11,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](1199+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[8,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R11-1)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
} else {
}
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = [64](R11-255)
LTS = <s[64->1](R11,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,255)
} else {
FLAGS = <u[64->1](R11,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](1199+IP) else goto [64](IP)


###### -53
###### 0
Initial RREIL instructions:
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-53+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-53+IP) else goto [64](IP)


###### -58
###### 0
Initial RREIL instructions:
T0 = and[64](BP,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-58+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](BP,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-58+IP) else goto [64](IP)


###### -65
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-65+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-65+IP) else goto [64](IP)


###### -70
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-70+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-70+IP) else goto [64](IP)


###### -1497
Initial RREIL instructions:
R10 = [64](R14)
T0 = *[64->64](SP+128)
AX = [64](T0)
T0 = *[64->32](SP+160)
R9 = [32](T0)
R9/32 = [32](0)
CX = [64](R11)
T0 = *[64->32](SP+92)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->64](SP+64)
DI = [64](T0)
DX = [64](R10)
SI = [64](R15)
*[64](SP+0) = [64](0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](SP+144)
AX = [64](T0)
T0 = and[32](R9,253)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
R9 = [32](T0)
R9/32 = [32](0)
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1497)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[3,5],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R10 = [64](R14)
T0 = *[64->64](SP+128)
T0 = *[64->32](SP+160)
R9 = [32](T0)
CX = [64](R11)
T0 = *[64->32](SP+92)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->64](SP+64)
DI = [64](T0)
DX = [64](R10)
SI = [64](R15)
*[64](SP+0) = [64](0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](SP+144)
AX = [64](T0)
T0 = and[32](R9,253)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
R9 = [32](T0)
R9/32 = [32](0)
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1497)


###### 1600
###### 0
Initial RREIL instructions:
BX = [64](AX)
T0 = *[64->64](SP+216)
DX = [64](T0)
T0 = *[64->64](FS+40)
T1 = xor[64](DX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [64](T1)
AX = [64](BX)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](1600+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
BX = [64](AX)
T0 = *[64->64](SP+216)
DX = [64](T0)
T0 = *[64->64](FS+40)
T1 = xor[64](DX,T0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [64](T1)
AX = [64](BX)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](1600+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = [64](SP+232)
LTU = <u[64->1](SP,232)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,232)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,232)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R12 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R13 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R14 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R15 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+232)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,232)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,232)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R12 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R13 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R14 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
R15 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 48
###### 0
Initial RREIL instructions:
AX = [32](114)
AX/32 = [32](0)
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS/6) goto [64](48+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [32](114)
AX/32 = [32](0)
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS/6) goto [64](48+IP) else goto [64](IP)


###### -220
###### 0
Initial RREIL instructions:
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-220+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-220+IP) else goto [64](IP)


###### -1019
Initial RREIL instructions:
R12 = [32](AX)
R12/32 = [32](0)
goto [JUMP] [64](IP+-1019)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
R12 = [32](AX)
R12/32 = [32](0)
goto [JUMP] [64](IP+-1019)


###### -27
Initial RREIL instructions:
AX = [32](102)
AX/32 = [32](0)
goto [JUMP] [64](IP+-27)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](102)
AX/32 = [32](0)
goto [JUMP] [64](IP+-27)


###### -48
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
AX = [32](116)
AX/32 = [32](0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-48+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
AX = [32](116)
AX/32 = [32](0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-48+IP) else goto [64](IP)


###### -53
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-53+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-53+IP) else goto [64](IP)


###### -198
Initial RREIL instructions:
goto [JUMP] [64](IP+-198)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-198)


###### -75
Initial RREIL instructions:
AX = [32](98)
AX/32 = [32](0)
goto [JUMP] [64](IP+-75)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](98)
AX/32 = [32](0)
goto [JUMP] [64](IP+-75)


###### -91
Initial RREIL instructions:
AX = [32](97)
AX/32 = [32](0)
goto [JUMP] [64](IP+-91)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](97)
AX/32 = [32](0)
goto [JUMP] [64](IP+-91)


###### 895
###### 0
Initial RREIL instructions:
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](895+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](895+IP) else goto [64](IP)


###### -258
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-258+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-258+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


###### -1207
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](92)
T0 = zx[64->64](BP+1)
DX = [64](T0)
T0 = zx[64->64](BX+1)
AX = [64](T0)
R12 = [32](48)
R12/32 = [32](0)
T0 = [64](R11-DX)
LTU = <u[64->1](R11,DX)
LEU = <=u[64->1](R11,DX)
LTS = <s[64->1](R11,DX)
LES = <=s[64->1](R11,DX)
EQ = ==[64->1](R11,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,DX)
} else {
FLAGS = <u[64->1](R11,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-1207+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](92)
T0 = zx[64->64](BP+1)
DX = [64](T0)
T0 = zx[64->64](BX+1)
AX = [64](T0)
R12 = [32](48)
R12/32 = [32](0)
T0 = [64](R11-DX)
LTS = <s[64->1](R11,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,DX)
} else {
FLAGS = <u[64->1](R11,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-1207+IP) else goto [64](IP)


###### -1222
###### 0
Initial RREIL instructions:
T0 = *[64->8](R14+BP+1)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = [8](DX-47)
LTU = <u[8->1](DX,47)
LEU = <=u[8->1](DX,47)
LTS = <s[8->1](DX,47)
LES = <=s[8->1](DX,47)
EQ = ==[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](-1222+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R14+BP+1)
T1 = zx[8->32](T0)
DX = [32](T1)
DX/32 = [32](0)
T0 = [8](DX-47)
LTS = <s[8->1](DX,47)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,47)
} else {
FLAGS = <u[8->1](DX,47)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,47)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = /=[1->1](FLAGS/7,FLAGS/11)
T1 = or[1](FLAGS/6,T0)
if (T1) goto [64](-1222+IP) else goto [64](IP)


###### -1231
###### 0
Initial RREIL instructions:
T0 = [8](DX-57)
LTU = <u[8->1](DX,57)
LEU = <=u[8->1](DX,57)
LTS = <s[8->1](DX,57)
LES = <=s[8->1](DX,57)
EQ = ==[8->1](DX,57)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,57)
} else {
FLAGS = <u[8->1](DX,57)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,57)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
T1 = ==[1->1](FLAGS/7,FLAGS/11)
T2 = and[1](T0,T1)
if (T2) goto [64](-1231+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],[0,7],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [8](DX-57)
LTS = <s[8->1](DX,57)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](DX,57)
} else {
FLAGS = <u[8->1](DX,57)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,DX)
T5 = xor[8](T5,57)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS/6,1)
T1 = ==[1->1](FLAGS/7,FLAGS/11)
T2 = and[1](T0,T1)
if (T2) goto [64](-1231+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = [64](R15-AX)
LTU = <u[64->1](R15,AX)
LEU = <=u[64->1](R15,AX)
LTS = <s[64->1](R15,AX)
LES = <=s[64->1](R15,AX)
EQ = ==[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R15-AX)
LTS = <s[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](9+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+AX+0) = [8](48)
T0 = zx[64->64](BX+2)
AX = [64](T0)
T0 = [64](R15-AX)
LTU = <u[64->1](R15,AX)
LEU = <=u[64->1](R15,AX)
LTS = <s[64->1](R15,AX)
LES = <=s[64->1](R15,AX)
EQ = ==[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+AX+0) = [8](48)
T0 = zx[64->64](BX+2)
AX = [64](T0)
T0 = [64](R15-AX)
LTS = <s[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


###### -1279
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+2+0) = [8](48)
T0 = zx[64->64](BX+3)
AX = [64](T0)
R12 = [32](48)
R12/32 = [32](0)
goto [JUMP] [64](IP+-1279)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+2+0) = [8](48)
T0 = zx[64->64](BX+3)
AX = [64](T0)
R12 = [32](48)
R12/32 = [32](0)
goto [JUMP] [64](IP+-1279)


###### -249
###### 0
Initial RREIL instructions:
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](92)
AX/32 = [32](0)
if (FLAGS/6) goto [64](-249+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](92)
AX/32 = [32](0)
if (FLAGS/6) goto [64](-249+IP) else goto [64](IP)


###### -258
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-258+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-258+IP) else goto [64](IP)


###### -270
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+80)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](-270+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+80)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](-270+IP) else goto [64](IP)


###### -1241
Initial RREIL instructions:
goto [JUMP] [64](IP+-1241)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-1241)


###### -507
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-507+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-507+IP) else goto [64](IP)


###### -438
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [16](AX)
AX = [16](AX)
AX = [16](T0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-438+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[16,63],[0,15],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [16](AX)
AX = [16](T0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-438+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](9+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](39)
T0 = zx[64->64](BX+1)
AX = [64](T0)
T0 = [64](R15-AX)
LTU = <u[64->1](R15,AX)
LEU = <=u[64->1](R15,AX)
LTS = <s[64->1](R15,AX)
LES = <=s[64->1](R15,AX)
EQ = ==[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](39)
T0 = zx[64->64](BX+1)
AX = [64](T0)
T0 = [64](R15-AX)
LTS = <s[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+1+0) = [8](92)
T0 = zx[64->64](BX+2)
AX = [64](T0)
T0 = [64](R15-AX)
LTU = <u[64->1](R15,AX)
LEU = <=u[64->1](R15,AX)
LTS = <s[64->1](R15,AX)
LES = <=s[64->1](R15,AX)
EQ = ==[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+1+0) = [8](92)
T0 = zx[64->64](BX+2)
AX = [64](T0)
T0 = [64](R15-AX)
LTS = <s[64->1](R15,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,AX)
} else {
FLAGS = <u[64->1](R15,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](10+IP) else goto [64](IP)


###### -579
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+2+0) = [8](39)
T0 = [64](BX+3)
LTU = <u[64->1](BX,3)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,3)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,3)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
goto [JUMP] [64](IP+-579)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+2+0) = [8](39)
T0 = [64](BX+3)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,3)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,3)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
goto [JUMP] [64](IP+-579)


###### -374
Initial RREIL instructions:
AX = [32](118)
AX/32 = [32](0)
goto [JUMP] [64](IP+-374)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](118)
AX/32 = [32](0)
goto [JUMP] [64](IP+-374)


###### -397
Initial RREIL instructions:
AX = [32](110)
AX/32 = [32](0)
goto [JUMP] [64](IP+-397)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
AX = [32](110)
AX/32 = [32](0)
goto [JUMP] [64](IP+-397)


###### -1339
###### 0
Initial RREIL instructions:
T0 = *[64->8](R14+BP)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-1339+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[8,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R14+BP)
T1 = [8](T0-0)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
} else {
}
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-1339+IP) else goto [64](IP)


###### 16
###### 0
Initial RREIL instructions:
T0 = and[64](BX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R10 = [64](R14)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](16+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](BX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R10 = [64](R14)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](16+IP) else goto [64](IP)


###### 9
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](9+IP) else goto [64](IP)


###### -573
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-573+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-573+IP) else goto [64](IP)


###### 52
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+120)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](52+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+120)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](52+IP) else goto [64](IP)


###### 47
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](47+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](47+IP) else goto [64](IP)


###### 35
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+120)
DX = [64](T0)
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](35+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+120)
DX = [64](T0)
T0 = *[64->8](DX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](35+IP) else goto [64](IP)


###### 3
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+64)
CX = [64](T0)
T0 = [64](DX-BX)
LTU = <u[64->1](DX,BX)
LEU = <=u[64->1](DX,BX)
LTS = <s[64->1](DX,BX)
LES = <=s[64->1](DX,BX)
EQ = ==[64->1](DX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DX,BX)
} else {
FLAGS = <u[64->1](DX,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](T0)
T0 = [64](R15-BX)
LTU = <u[64->1](R15,BX)
LEU = <=u[64->1](R15,BX)
LTS = <s[64->1](R15,BX)
LES = <=s[64->1](R15,BX)
EQ = ==[64->1](R15,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,BX)
} else {
FLAGS = <u[64->1](R15,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](3+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
CX = [64](T0)
T0 = [64](DX-BX)
if (0) {
} else {
}
DX = [64](T0)
T0 = [64](R15-BX)
LTS = <s[64->1](R15,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,BX)
} else {
FLAGS = <u[64->1](R15,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,BX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](3+IP) else goto [64](IP)


###### -20
###### 0
Initial RREIL instructions:
*[64](CX+BX+0) = [8](AX)
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = *[64->8](DX+BX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-20+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](CX+BX+0) = [8](AX)
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = *[64->8](DX+BX)
T1 = zx[8->32](T0)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-20+IP) else goto [64](IP)


###### -569
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](-569+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](-569+IP) else goto [64](IP)


###### -583
Initial RREIL instructions:
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](0)
goto [JUMP] [64](IP+-583)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
DI = [64](T0)
*[64](DI+BX+0) = [8](0)
goto [JUMP] [64](IP+-583)


###### 592
###### 0
Initial RREIL instructions:
T0 = [64](R11-255)
LTU = <u[64->1](R11,255)
LEU = <=u[64->1](R11,255)
LTS = <s[64->1](R11,255)
LES = <=s[64->1](R11,255)
EQ = ==[64->1](R11,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,255)
} else {
FLAGS = <u[64->1](R11,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
*[64](SP+208+0) = [64](0)
if (FLAGS/6) goto [64](592+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R11-255)
LTS = <s[64->1](R11,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R11,255)
} else {
FLAGS = <u[64->1](R11,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R11)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
*[64](SP+208+0) = [64](0)
if (FLAGS/6) goto [64](592+IP) else goto [64](IP)


###### -5612
Initial RREIL instructions:
*[64](SP+181+0) = [8](R13)
*[64](SP+152+0) = [64](R15)
R13 = [64](R11)
*[64](SP+96+0) = [8](1)
*[64](SP+112+0) = [64](0)
R15 = [32](R9)
R15/32 = [32](0)
*[64](SP+168+0) = [64](BX)
*[64](SP+182+0) = [8](R12)
*[64](SP+183+0) = [8](R8)
*[64](SP+184+0) = [64](R10)
T0 = *[64->64](SP+112)
R12 = [64](T0)
DX = [64](R13)
T0 = zx[64->64](SP+208)
CX = [64](T0)
T0 = zx[64->64](SP+204)
DI = [64](T0)
T0 = [64](R12+BP)
LTU = <u[64->1](R12,BP)
T1 = xor[64](T0,R12)
T2 = xor[64](T0,BP)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R12)
} else {
FLAGS = <u[64->1](T0,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R12)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R12 = [64](T0)
T0 = zx[64->64](R14)
BX = [64](T0)
T0 = [64](DX-R12)
LTU = <u[64->1](DX,R12)
LEU = <=u[64->1](DX,R12)
LTS = <s[64->1](DX,R12)
LES = <=s[64->1](DX,R12)
EQ = ==[64->1](DX,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DX,R12)
} else {
FLAGS = <u[64->1](DX,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,R12)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](T0)
SI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-5612)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,31],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+181+0) = [8](R13)
*[64](SP+152+0) = [64](R15)
R13 = [64](R11)
*[64](SP+96+0) = [8](1)
*[64](SP+112+0) = [64](0)
R15 = [32](R9)
R15/32 = [32](0)
*[64](SP+168+0) = [64](BX)
*[64](SP+182+0) = [8](R12)
*[64](SP+183+0) = [8](R8)
*[64](SP+184+0) = [64](R10)
T0 = *[64->64](SP+112)
R12 = [64](T0)
DX = [64](R13)
T0 = zx[64->64](SP+208)
CX = [64](T0)
T0 = zx[64->64](SP+204)
DI = [64](T0)
T0 = [64](R12+BP)
if (0) {
} else {
}
R12 = [64](T0)
T0 = zx[64->64](R14)
BX = [64](T0)
T0 = [64](DX-R12)
LTS = <s[64->1](DX,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DX,R12)
} else {
FLAGS = <u[64->1](DX,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,R12)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](T0)
SI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-5612)


###### 103
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [64](AX)
if (FLAGS/6) goto [64](103+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [64](AX)
if (FLAGS/6) goto [64](103+IP) else goto [64](IP)


###### 635
###### 0
Initial RREIL instructions:
T0 = [64](AX-255)
LTU = <u[64->1](AX,255)
LEU = <=u[64->1](AX,255)
LTS = <s[64->1](AX,255)
LES = <=s[64->1](AX,255)
EQ = ==[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](635+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-255)
LTS = <s[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](635+IP) else goto [64](IP)


###### 684
###### 0
Initial RREIL instructions:
T0 = [64](AX-254)
LTU = <u[64->1](AX,254)
LEU = <=u[64->1](AX,254)
LTS = <s[64->1](AX,254)
LES = <=s[64->1](AX,254)
EQ = ==[64->1](AX,254)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,254)
} else {
FLAGS = <u[64->1](AX,254)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,254)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](684+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-254)
LTS = <s[64->1](AX,254)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,254)
} else {
FLAGS = <u[64->1](AX,254)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,254)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](684+IP) else goto [64](IP)


###### 11
###### 0
Initial RREIL instructions:
T0 = and[8](R15,R15)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](11+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],[0,7],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R15,R15)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](11+IP) else goto [64](IP)


###### 344
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTU = <u[32->1](T0,2)
LEU = <=u[32->1](T0,2)
LTS = <s[32->1](T0,2)
LES = <=s[32->1](T0,2)
EQ = ==[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS/6) goto [64](344+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+92)
T1 = [32](T0-2)
LTS = <s[32->1](T0,2)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,2)
} else {
FLAGS = <u[32->1](T0,2)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,2)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS/6) goto [64](344+IP) else goto [64](IP)


###### -5273
Initial RREIL instructions:
T0 = *[64->32](SP+204)
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+56+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-5273)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+204)
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+56+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-5273)


###### -5331
Initial RREIL instructions:
T0 = *[64->8](SP+96)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = zx[64->64](SP+208)
DI = [64](T0)
AX = [32](0)
AX/32 = [32](0)
T0 = *[64->64](SP+56)
DX = [64](T0)
T0 = [32](CX)
if (FLAGS/6) {
T0 = [32](AX)
} else {
}
CX = [32](T0)
CX/32 = [32](0)
T0 = *[64->64](SP+112)
T1 = [64](T0+DX)
LTU = <u[64->1](T0,DX)
T2 = xor[64](T1,T0)
T3 = xor[64](T1,DX)
T4 = and[64](T2,T3)
FLAGS/11 = <s[64->1](T4,0)
FLAGS/7 = <s[64->1](T1,0)
EQ = ==[64->1](T1,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T1,T0)
} else {
FLAGS = <u[64->1](T1,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,DX)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
*[64](SP+112+0) = [64](T1)
*[64](SP+96+0) = [8](CX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-5331)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T6:{},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](SP+96)
T1 = zx[8->32](T0)
CX = [32](T1)
T0 = and[32](AX,AX)
FLAGS/6 = ==[32->1](T0,0)
T0 = zx[64->64](SP+208)
DI = [64](T0)
AX = [32](0)
AX/32 = [32](0)
T0 = *[64->64](SP+56)
DX = [64](T0)
T0 = [32](CX)
if (FLAGS/6) {
T0 = [32](AX)
} else {
}
CX = [32](T0)
CX/32 = [32](0)
T0 = *[64->64](SP+112)
T1 = [64](T0+DX)
T2 = xor[64](T1,T0)
T3 = xor[64](T1,DX)
T4 = and[64](T2,T3)
FLAGS/11 = <s[64->1](T4,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T1,T0)
} else {
FLAGS = <u[64->1](T1,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,DX)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
*[64](SP+112+0) = [64](T1)
*[64](SP+96+0) = [8](CX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-5331)


###### -153
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-153+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-153+IP) else goto [64](IP)


###### -1909
###### 0
Initial RREIL instructions:
R11 = [64](R13)
T0 = *[64->8](SP+182)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = *[64->8](SP+183)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->8](SP+181)
T1 = zx[8->32](T0)
R13 = [32](T1)
R13/32 = [32](0)
R9 = [32](R15)
R9/32 = [32](0)
T0 = *[64->64](SP+168)
BX = [64](T0)
T0 = *[64->64](SP+152)
R15 = [64](T0)
T0 = *[64->64](SP+112)
T1 = [64](T0-1)
LTU = <u[64->1](T0,1)
LEU = <=u[64->1](T0,1)
LTS = <s[64->1](T0,1)
LES = <=s[64->1](T0,1)
EQ = ==[64->1](T0,1)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,1)
} else {
FLAGS = <u[64->1](T0,1)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,1)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-1909+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,31],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R11 = [64](R13)
T0 = *[64->8](SP+182)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = *[64->8](SP+183)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->8](SP+181)
T1 = zx[8->32](T0)
R13 = [32](T1)
R13/32 = [32](0)
R9 = [32](R15)
R9/32 = [32](0)
T0 = *[64->64](SP+168)
BX = [64](T0)
T0 = *[64->64](SP+152)
R15 = [64](T0)
T0 = *[64->64](SP+112)
T1 = [64](T0-1)
LTS = <s[64->1](T0,1)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,1)
} else {
FLAGS = <u[64->1](T0,1)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,1)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-1909+IP) else goto [64](IP)


###### 123
Initial RREIL instructions:
T0 = *[64->64](SP+112)
AX = [64](T0)
T0 = *[64->8](SP+96)
T1 = zx[8->32](T0)
DI = [32](T1)
DI/32 = [32](0)
T0 = *[64->64](SP+64)
DX = [64](T0)
T0 = [64](AX+BP)
LTU = <u[64->1](AX,BP)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,BP)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
goto [JUMP] [64](IP+123)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+112)
AX = [64](T0)
T0 = *[64->8](SP+96)
T1 = zx[8->32](T0)
DI = [32](T1)
DI/32 = [32](0)
T0 = *[64->64](SP+64)
DX = [64](T0)
T0 = [64](AX+BP)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,BP)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
goto [JUMP] [64](IP+123)


###### 119
###### 0
Initial RREIL instructions:
T0 = and[8](BX/8,BX/8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](119+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[8,15],[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](BX/8,BX/8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](119+IP) else goto [64](IP)


###### -1006
###### 0
Initial RREIL instructions:
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-1006+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],[0,7],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R9,R9)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-1006+IP) else goto [64](IP)


###### 4
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](4+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](4+IP) else goto [64](IP)


###### 16
###### 0
Initial RREIL instructions:
*[64](DX+BX+0) = [8](92)
T0 = zx[64->64](BX+1)
SI = [64](T0)
T0 = [64](R15-SI)
LTU = <u[64->1](R15,SI)
LEU = <=u[64->1](R15,SI)
LTS = <s[64->1](R15,SI)
LES = <=s[64->1](R15,SI)
EQ = ==[64->1](R15,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,SI)
} else {
FLAGS = <u[64->1](R15,SI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,SI)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](16+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](DX+BX+0) = [8](92)
T0 = zx[64->64](BX+1)
SI = [64](T0)
T0 = [64](R15-SI)
LTS = <s[64->1](R15,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,SI)
} else {
FLAGS = <u[64->1](R15,SI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,SI)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](16+IP) else goto [64](IP)


###### 19
###### 0
Initial RREIL instructions:
CX = [32](R12)
CX/32 = [32](0)
T0 = [5](6)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](CX,T2)
T3 = <u[8->1](8,6)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
T2 = [8](CX)
FLAGS/11 = [1](T2/7)
} else {
T2 = /=[8->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
CX = [8](T1)
SI = [32](CX)
SI/32 = [32](0)
T0 = [32](SI+48)
LTU = <u[32->1](SI,48)
T1 = xor[32](T0,SI)
T2 = xor[32](T0,48)
T3 = and[32](T1,T2)
FLAGS/11 = <s[32->1](T3,0)
FLAGS/7 = <s[32->1](T0,0)
EQ = ==[32->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](T0,SI)
} else {
FLAGS = <u[32->1](T0,SI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,SI)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
SI = [32](T0)
SI/32 = [32](0)
*[64](DX+BX+1+0) = [8](DX/8)
T0 = zx[64->64](BX+2)
SI = [64](T0)
T0 = [64](R15-SI)
LTU = <u[64->1](R15,SI)
LEU = <=u[64->1](R15,SI)
LTS = <s[64->1](R15,SI)
LES = <=s[64->1](R15,SI)
EQ = ==[64->1](R15,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,SI)
} else {
FLAGS = <u[64->1](R15,SI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,SI)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](19+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],[0,31],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T3:{},T2:{},T1:{[0,7],},T0:{},}

RREIL instructions after LV (greedy):
CX = [32](R12)
CX/32 = [32](0)
T0 = [5](6)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](CX,T2)
T3 = <u[8->1](8,6)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
} else {
T2 = /=[8->1](T0,0)
if (T2) {
} else {
}
}
CX = [8](T1)
if (0) {
} else {
}
*[64](DX+BX+1+0) = [8](DX/8)
T0 = zx[64->64](BX+2)
SI = [64](T0)
T0 = [64](R15-SI)
LTS = <s[64->1](R15,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R15,SI)
} else {
FLAGS = <u[64->1](R15,SI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R15)
T5 = xor[64](T5,SI)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](19+IP) else goto [64](IP)


###### -1922
###### 0
Initial RREIL instructions:
CX = [32](R12)
CX/32 = [32](0)
T0 = [5](3)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](CX,T2)
T3 = <u[8->1](8,3)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
T2 = [8](CX)
FLAGS/11 = [1](T2/7)
} else {
T2 = /=[8->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
CX = [8](T1)
SI = [32](CX)
SI/32 = [32](0)
T0 = and[32](SI,7)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
SI = [32](T0)
SI/32 = [32](0)
T0 = [32](SI+48)
LTU = <u[32->1](SI,48)
T1 = xor[32](T0,SI)
T2 = xor[32](T0,48)
T3 = and[32](T1,T2)
FLAGS/11 = <s[32->1](T3,0)
FLAGS/7 = <s[32->1](T0,0)
EQ = ==[32->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](T0,SI)
} else {
FLAGS = <u[32->1](T0,SI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,SI)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
SI = [32](T0)
SI/32 = [32](0)
*[64](DX+BX+2+0) = [8](DX/8)
T0 = and[32](R12,7)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
R12 = [32](T0)
R12/32 = [32](0)
T0 = [64](BX+3)
LTU = <u[64->1](BX,3)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,3)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,3)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = [32](R12+48)
LTU = <u[32->1](R12,48)
T1 = xor[32](T0,R12)
T2 = xor[32](T0,48)
T3 = and[32](T1,T2)
FLAGS/11 = <s[32->1](T3,0)
FLAGS/7 = <s[32->1](T0,0)
EQ = ==[32->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](T0,R12)
} else {
FLAGS = <u[32->1](T0,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R12)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
R12 = [32](T0)
R12/32 = [32](0)
T0 = [64](BP+1)
LTU = <u[64->1](BP,1)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
T0 = [64](AX-BP)
LTU = <u[64->1](AX,BP)
LEU = <=u[64->1](AX,BP)
LTS = <s[64->1](AX,BP)
LES = <=s[64->1](AX,BP)
EQ = ==[64->1](AX,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,BP)
} else {
FLAGS = <u[64->1](AX,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-1922+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,31],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T3:{},T2:{},T1:{[0,7],},T0:{},}

RREIL instructions after LV (greedy):
CX = [32](R12)
CX/32 = [32](0)
T0 = [5](3)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](CX,T2)
T3 = <u[8->1](8,3)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
} else {
T2 = /=[8->1](T0,0)
if (T2) {
} else {
}
}
CX = [8](T1)
SI = [32](CX)
T0 = and[32](SI,7)
SI = [32](T0)
T0 = [32](SI+48)
if (0) {
} else {
}
SI = [32](T0)
SI/32 = [32](0)
*[64](DX+BX+2+0) = [8](DX/8)
T0 = and[32](R12,7)
R12 = [32](T0)
T0 = [64](BX+3)
if (0) {
} else {
}
BX = [64](T0)
T0 = [32](R12+48)
if (0) {
} else {
}
R12 = [32](T0)
R12/32 = [32](0)
T0 = [64](BP+1)
if (0) {
} else {
}
BP = [64](T0)
T0 = [64](AX-BP)
LTS = <s[64->1](AX,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,BP)
} else {
FLAGS = <u[64->1](AX,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-1922+IP) else goto [64](IP)


###### 4
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](4+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](4+IP) else goto [64](IP)


###### -124
###### 0
Initial RREIL instructions:
*[64](DX+BX+0) = [8](R12)
T0 = *[64->8](R14+BP)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-124+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,7],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](DX+BX+0) = [8](R12)
T0 = *[64->8](R14+BP)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = and[8](R13,R13)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-124+IP) else goto [64](IP)


###### -41
###### 0
Initial RREIL instructions:
T0 = and[8](R8,R8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-41+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],[0,7],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](R8,R8)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-41+IP) else goto [64](IP)


###### 4
###### 0
Initial RREIL instructions:
T0 = [64](BX-R15)
LTU = <u[64->1](BX,R15)
LEU = <=u[64->1](BX,R15)
LTS = <s[64->1](BX,R15)
LES = <=s[64->1](BX,R15)
EQ = ==[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](4+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R15)
LTS = <s[64->1](BX,R15)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R15)
} else {
FLAGS = <u[64->1](BX,R15)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R15)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](4+IP) else goto [64](IP)


###### -59
Initial RREIL instructions:
*[64](DX+BX+0) = [8](92)
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = xor[32](R8,R8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R8 = [32](T0)
R8/32 = [32](0)
goto [JUMP] [64](IP+-59)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,31],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](DX+BX+0) = [8](92)
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = xor[32](R8,R8)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R8 = [32](T0)
R8/32 = [32](0)
goto [JUMP] [64](IP+-59)


###### -1230
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+164)
DX = [32](T0)
DX/32 = [32](0)
T0 = and[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-1230+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+164)
DX = [32](T0)
DX/32 = [32](0)
T0 = and[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-1230+IP) else goto [64](IP)


###### -1979
Initial RREIL instructions:
T0 = [64](BP+1)
LTU = <u[64->1](BP,1)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
goto [JUMP] [64](IP+-1979)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BP+1)
T1 = xor[64](T0,BP)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BP)
} else {
FLAGS = <u[64->1](T0,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
goto [JUMP] [64](IP+-1979)


###### -1212
Initial RREIL instructions:
T0 = *[64->8](R14+1)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
goto [JUMP] [64](IP+-1212)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[8,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R14+1)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
goto [JUMP] [64](IP+-1212)


###### -354
###### 0
Initial RREIL instructions:
T0 = [64](AX-1)
LTU = <u[64->1](AX,1)
LEU = <=u[64->1](AX,1)
LTS = <s[64->1](AX,1)
LES = <=s[64->1](AX,1)
EQ = ==[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-354+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-1)
LTS = <s[64->1](AX,1)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,1)
} else {
FLAGS = <u[64->1](AX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](-354+IP) else goto [64](IP)


###### 44
###### 0
Initial RREIL instructions:
AX = [32](1)
AX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->8](BX+AX)
T1 = zx[8->32](T0)
CX = [32](T1)
CX/32 = [32](0)
T0 = [32](CX-91)
LTU = <u[32->1](CX,91)
LEU = <=u[32->1](CX,91)
LTS = <s[32->1](CX,91)
LES = <=s[32->1](CX,91)
EQ = ==[32->1](CX,91)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](CX,91)
} else {
FLAGS = <u[32->1](CX,91)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,CX)
T5 = xor[32](T5,91)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-33)
LTU = <u[8->1](CX,33)
LEU = <=u[8->1](CX,33)
LTS = <s[8->1](CX,33)
LES = <=s[8->1](CX,33)
EQ = ==[8->1](CX,33)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,33)
} else {
FLAGS = <u[8->1](CX,33)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,33)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](44+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [32](1)
AX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->8](BX+AX)
T1 = zx[8->32](T0)
CX = [32](T1)
T0 = [32](CX-91)
if (0) {
} else {
}
CX = [32](T0)
CX/32 = [32](0)
T0 = [8](CX-33)
LTS = <s[8->1](CX,33)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T0,0)
if (0) {
FLAGS = <=u[8->1](CX,33)
} else {
FLAGS = <u[8->1](CX,33)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[8](T0,CX)
T5 = xor[8](T5,33)
T5 = and[8](T5,16)
FLAGS/4 = /=[8->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](44+IP) else goto [64](IP)


###### 20
###### 0
Initial RREIL instructions:
DI = [64](SI)
T0 = [6](CX)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](DI,T0)
T2 = <u[8->1](64,CX)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](DI,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
DI = [64](T1)
CX = [64](DI)
DI = [64](8589934635)
T0 = and[64](CX,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](20+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,7],[0,5],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T2:{},T1:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
DI = [64](SI)
T0 = [6](CX)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](DI,T0)
T2 = <u[8->1](64,CX)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
DI = [64](T1)
CX = [64](DI)
DI = [64](8589934635)
T0 = and[64](CX,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](20+IP) else goto [64](IP)


###### -1260
Initial RREIL instructions:
T0 = *[64->64](SP+152)
R15 = [64](T0)
R10 = [64](R14)
R11 = [64](R13)
goto [JUMP] [64](IP+-1260)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+152)
R15 = [64](T0)
R10 = [64](R14)
R11 = [64](R13)
goto [JUMP] [64](IP+-1260)


###### -65
###### 0
Initial RREIL instructions:
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = [64](AX-DX)
LTU = <u[64->1](AX,DX)
LEU = <=u[64->1](AX,DX)
LTS = <s[64->1](AX,DX)
LES = <=s[64->1](AX,DX)
EQ = ==[64->1](AX,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,DX)
} else {
FLAGS = <u[64->1](AX,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-65+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX+1)
if (0) {
} else {
}
AX = [64](T0)
T0 = [64](AX-DX)
LTS = <s[64->1](AX,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,DX)
} else {
FLAGS = <u[64->1](AX,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-65+IP) else goto [64](IP)


###### -438
Initial RREIL instructions:
goto [JUMP] [64](IP+-438)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-438)


###### -6149
Initial RREIL instructions:
DI = [64](R14)
*[64](SP+56+0) = [8](R8)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6149)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [64](R14)
*[64](SP+56+0) = [8](R8)
*[64](SP+48+0) = [8](R9)
*[64](SP+40+0) = [64](R10)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6149)


###### -640
Initial RREIL instructions:
T0 = *[64->64](SP+40)
R10 = [64](T0)
R11 = [64](AX)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->8](SP+56)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
goto [JUMP] [64](IP+-640)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+40)
R10 = [64](T0)
R11 = [64](AX)
T0 = *[64->8](SP+48)
T1 = zx[8->32](T0)
R9 = [32](T1)
R9/32 = [32](0)
T0 = *[64->8](SP+56)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
goto [JUMP] [64](IP+-640)


###### -2541
Initial RREIL instructions:
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
BX = [32](1)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2541)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
BX = [32](1)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2541)


###### -2575
Initial RREIL instructions:
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
BX = [32](1)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2575)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
BX = [32](1)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2575)


###### -1917
Initial RREIL instructions:
T0 = and[8](BX,BX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](4212260)
AX/32 = [32](0)
T0 = *[64->64](SP+128)
T1 = [64](AX)
if (FLAGS/6) {
T1 = [64](T0)
} else {
}
AX = [64](T1)
*[64](SP+128+0) = [64](AX)
goto [JUMP] [64](IP+-1917)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,7],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](BX,BX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](4212260)
AX/32 = [32](0)
T0 = *[64->64](SP+128)
T1 = [64](AX)
if (FLAGS/6) {
T1 = [64](T0)
} else {
}
AX = [64](T1)
*[64](SP+128+0) = [64](AX)
goto [JUMP] [64](IP+-1917)


###### -2014
Initial RREIL instructions:
T0 = and[8](BX,BX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](4212260)
AX/32 = [32](0)
T0 = *[64->64](SP+144)
T1 = [64](AX)
if (FLAGS/6) {
T1 = [64](T0)
} else {
}
AX = [64](T1)
*[64](SP+144+0) = [64](AX)
goto [JUMP] [64](IP+-2014)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],[0,7],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](BX,BX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](4212260)
AX/32 = [32](0)
T0 = *[64->64](SP+144)
T1 = [64](AX)
if (FLAGS/6) {
T1 = [64](T0)
} else {
}
AX = [64](T1)
*[64](SP+144+0) = [64](AX)
goto [JUMP] [64](IP+-2014)


###### -552
Initial RREIL instructions:
R9 = [32](R15)
R9/32 = [32](0)
R11 = [64](R13)
T0 = *[64->64](SP+168)
BX = [64](T0)
T0 = *[64->8](SP+182)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = *[64->8](SP+183)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->64](SP+152)
R15 = [64](T0)
T0 = *[64->8](SP+181)
T1 = zx[8->32](T0)
R13 = [32](T1)
R13/32 = [32](0)
*[64](SP+96+0) = [8](0)
goto [JUMP] [64](IP+-552)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,31],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [32](R15)
R9/32 = [32](0)
R11 = [64](R13)
T0 = *[64->64](SP+168)
BX = [64](T0)
T0 = *[64->8](SP+182)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = *[64->8](SP+183)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->64](SP+152)
R15 = [64](T0)
T0 = *[64->8](SP+181)
T1 = zx[8->32](T0)
R13 = [32](T1)
R13/32 = [32](0)
*[64](SP+96+0) = [8](0)
goto [JUMP] [64](IP+-552)


###### -629
###### 0
Initial RREIL instructions:
AX = [64](R12)
R11 = [64](R13)
R9 = [32](R15)
R9/32 = [32](0)
T0 = [64](AX-R11)
LTU = <u[64->1](AX,R11)
LEU = <=u[64->1](AX,R11)
LTS = <s[64->1](AX,R11)
LES = <=s[64->1](AX,R11)
EQ = ==[64->1](AX,R11)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,R11)
} else {
FLAGS = <u[64->1](AX,R11)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,R11)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](BX)
T0 = *[64->8](SP+183)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->8](SP+182)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = *[64->64](SP+168)
BX = [64](T0)
T0 = *[64->64](SP+152)
R15 = [64](T0)
T0 = *[64->8](SP+181)
T1 = zx[8->32](T0)
R13 = [32](T1)
R13/32 = [32](0)
T0 = *[64->64](SP+184)
R10 = [64](T0)
*[64](SP+96+0) = [8](0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](-629+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,31],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [64](R12)
R11 = [64](R13)
R9 = [32](R15)
R9/32 = [32](0)
T0 = [64](AX-R11)
LTS = <s[64->1](AX,R11)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,R11)
} else {
FLAGS = <u[64->1](AX,R11)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,R11)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](BX)
T0 = *[64->8](SP+183)
T1 = zx[8->32](T0)
R8 = [32](T1)
R8/32 = [32](0)
T0 = *[64->8](SP+182)
T1 = zx[8->32](T0)
R12 = [32](T1)
R12/32 = [32](0)
T0 = *[64->64](SP+168)
BX = [64](T0)
T0 = *[64->64](SP+152)
R15 = [64](T0)
T0 = *[64->8](SP+181)
T1 = zx[8->32](T0)
R13 = [32](T1)
R13/32 = [32](0)
T0 = *[64->64](SP+184)
R10 = [64](T0)
*[64](SP+96+0) = [8](0)
T0 = xor[1](FLAGS,1)
if (T0) goto [64](-629+IP) else goto [64](IP)


###### -638
###### 0
Initial RREIL instructions:
T0 = *[64->8](DX)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](-638+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](DX)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](-638+IP) else goto [64](IP)


###### 14
Initial RREIL instructions:
T0 = *[64->64](SP+112)
AX = [64](T0)
goto [JUMP] [64](IP+14)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+112)
AX = [64](T0)
goto [JUMP] [64](IP+14)


###### 13
###### 0
Initial RREIL instructions:
T0 = *[64->8](R10+AX)
T1 = [8](T0-0)
LTU = <u[8->1](T0,0)
LEU = <=u[8->1](T0,0)
LTS = <s[8->1](T0,0)
LES = <=s[8->1](T0,0)
EQ = ==[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](13+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->8](R10+AX)
T1 = [8](T0-0)
LTS = <s[8->1](T0,0)
FLAGS/7 = <s[8->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[8->1](T1,0)
if (0) {
FLAGS = <=u[8->1](T0,0)
} else {
FLAGS = <u[8->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[8](T1,T0)
T6 = xor[8](T6,0)
T6 = and[8](T6,16)
FLAGS/4 = /=[8->1](T6,0)
if (FLAGS/6) goto [64](13+IP) else goto [64](IP)


###### -20
###### 0
Initial RREIL instructions:
T0 = [64](AX+1)
LTU = <u[64->1](AX,1)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
T0 = zx[64->64](AX+BP)
DX = [64](T0)
T0 = [64](DX-R11)
LTU = <u[64->1](DX,R11)
LEU = <=u[64->1](DX,R11)
LTS = <s[64->1](DX,R11)
LES = <=s[64->1](DX,R11)
EQ = ==[64->1](DX,R11)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DX,R11)
} else {
FLAGS = <u[64->1](DX,R11)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,R11)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS) goto [64](-20+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX+1)
if (0) {
} else {
}
AX = [64](T0)
T0 = zx[64->64](AX+BP)
DX = [64](T0)
T0 = [64](DX-R11)
LTS = <s[64->1](DX,R11)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DX,R11)
} else {
FLAGS = <u[64->1](DX,R11)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,R11)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS) goto [64](-20+IP) else goto [64](IP)


###### -687
Initial RREIL instructions:
*[64](SP+112+0) = [64](AX)
*[64](SP+96+0) = [8](0)
goto [JUMP] [64](IP+-687)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](SP+112+0) = [64](AX)
*[64](SP+96+0) = [8](0)
goto [JUMP] [64](IP+-687)


###### -2855
Initial RREIL instructions:
T0 = xor[32](R13,R13)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2855)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R13,R13)
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212262)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2855)


###### -2886
Initial RREIL instructions:
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2886)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R13 = [32](1)
R13/32 = [32](0)
*[64](SP+80+0) = [64](1)
*[64](SP+120+0) = [64](4212260)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-2886)


###### -6539
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6539)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6539)


###### -6758
Initial RREIL instructions:
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
BX = [64](CX)
*[64](SP+-24+0) = [64](R13)
*[64](SP+-16+0) = [64](R14)
BP = [32](DI)
BP/32 = [32](0)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-8+0) = [64](R15)
T0 = [64](SP-120)
LTU = <u[64->1](SP,120)
LEU = <=u[64->1](SP,120)
LTS = <s[64->1](SP,120)
LES = <=s[64->1](SP,120)
EQ = ==[64->1](SP,120)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,120)
} else {
FLAGS = <u[64->1](SP,120)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
*[64](SP+40+0) = [64](SI)
*[64](SP+48+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6758)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
BX = [64](CX)
*[64](SP+-24+0) = [64](R13)
*[64](SP+-16+0) = [64](R14)
BP = [32](DI)
BP/32 = [32](0)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-8+0) = [64](R15)
T0 = [64](SP-120)
LTS = <s[64->1](SP,120)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,120)
} else {
FLAGS = <u[64->1](SP,120)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
*[64](SP+40+0) = [64](SI)
*[64](SP+48+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6758)


###### 385
###### 0
Initial RREIL instructions:
R14 = [64](AX)
T0 = *[64->32](AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[32](BP,BP)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](IP+2111468)
R13 = [64](T0)
*[64](SP+60+0) = [32](AX)
if (FLAGS/7) goto [64](385+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],[0,31],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R14 = [64](AX)
T0 = *[64->32](AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[32](BP,BP)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](IP+2111468)
R13 = [64](T0)
*[64](SP+60+0) = [32](AX)
if (FLAGS/7) goto [64](385+IP) else goto [64](IP)


###### 103
###### 0
Initial RREIL instructions:
T0 = *[64->32](IP+2111460)
T1 = [32](BP-T0)
LTU = <u[32->1](BP,T0)
LEU = <=u[32->1](BP,T0)
LTS = <s[32->1](BP,T0)
LES = <=s[32->1](BP,T0)
EQ = ==[32->1](BP,T0)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](BP,T0)
} else {
FLAGS = <u[32->1](BP,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,BP)
T6 = xor[32](T6,T0)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS) goto [64](103+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],[0,31],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](IP+2111460)
T1 = [32](BP-T0)
LTS = <s[32->1](BP,T0)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](BP,T0)
} else {
FLAGS = <u[32->1](BP,T0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,BP)
T6 = xor[32](T6,T0)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
if (FLAGS) goto [64](103+IP) else goto [64](IP)


###### 327
###### 0
Initial RREIL instructions:
T0 = zx[64->32](BP+1)
R12 = [32](T0)
R12/32 = [32](0)
R15 = [32](R12)
R15/32 = [32](0)
SI = [64](R15)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](SI,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](SI,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
SI = [64](T1)
T0 = [64](R13-6316416)
LTU = <u[64->1](R13,6316416)
LEU = <=u[64->1](R13,6316416)
LTS = <s[64->1](R13,6316416)
LES = <=s[64->1](R13,6316416)
EQ = ==[64->1](R13,6316416)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R13,6316416)
} else {
FLAGS = <u[64->1](R13,6316416)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R13)
T5 = xor[64](T5,6316416)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](327+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->32](BP+1)
R12 = [32](T0)
R12/32 = [32](0)
R15 = [32](R12)
R15/32 = [32](0)
SI = [64](R15)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](SI,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
SI = [64](T1)
T0 = [64](R13-6316416)
LTS = <s[64->1](R13,6316416)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R13,6316416)
} else {
FLAGS = <u[64->1](R13,6316416)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R13)
T5 = xor[64](T5,6316416)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](327+IP) else goto [64](IP)


###### 3656
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3656)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3656)


###### -6646
Initial RREIL instructions:
R13 = [64](AX)
*[64](IP+2111406+0) = [64](AX)
T0 = *[64->64](IP+2111415)
AX = [64](T0)
*[64](R13+0+0) = [64](AX)
T0 = *[64->64](IP+2111412)
AX = [64](T0)
*[64](R13+8+0) = [64](AX)
T0 = *[64->32](IP+2111386)
DI = [32](T0)
DI/32 = [32](0)
DX = [64](R15)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
T0 = [64](DX-DI)
LTU = <u[64->1](DX,DI)
LEU = <=u[64->1](DX,DI)
LTS = <s[64->1](DX,DI)
LES = <=s[64->1](DX,DI)
EQ = ==[64->1](DX,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DX,DI)
} else {
FLAGS = <u[64->1](DX,DI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DX)
T5 = xor[64](T5,DI)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DX = [64](T0)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](DI,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](DI,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
DI = [64](T1)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](DX,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](DX,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
DX = [64](T1)
T0 = [64](DI+R13)
LTU = <u[64->1](DI,R13)
T1 = xor[64](T0,DI)
T2 = xor[64](T0,R13)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,DI)
} else {
FLAGS = <u[64->1](T0,DI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DI)
T5 = xor[64](T5,R13)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6646)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{[8,63],},T0:{},}

RREIL instructions after LV (greedy):
R13 = [64](AX)
*[64](IP+2111406+0) = [64](AX)
T0 = *[64->64](IP+2111415)
*[64](R13+0+0) = [64](AX)
T0 = *[64->64](IP+2111412)
AX = [64](T0)
*[64](R13+8+0) = [64](AX)
T0 = *[64->32](IP+2111386)
DI = [32](T0)
DI/32 = [32](0)
DX = [64](R15)
T0 = xor[32](SI,SI)
T1 = [8](T0)
SI = [32](T0)
SI/32 = [32](0)
T0 = [64](DX-DI)
if (0) {
} else {
}
DX = [64](T0)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](DI,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
DI = [64](T1)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](DX,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
DX = [64](T1)
T0 = [64](DI+R13)
T1 = xor[64](T0,DI)
T2 = xor[64](T0,R13)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,DI)
} else {
FLAGS = <u[64->1](T0,DI)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DI)
T5 = xor[64](T5,R13)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
DI = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-6646)


###### -3410
Initial RREIL instructions:
*[64](IP+2111355+0) = [32](R12)
T0 = sx[32->64](BP)
R12 = [64](T0)
T0 = *[64->64](BX+48)
AX = [64](T0)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](R12,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](R12,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
R12 = [64](T1)
T0 = *[64->64](SP+48)
CX = [64](T0)
T0 = *[64->64](SP+40)
DX = [64](T0)
T0 = [64](R12+R13)
LTU = <u[64->1](R12,R13)
T1 = xor[64](T0,R12)
T2 = xor[64](T0,R13)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R12)
} else {
FLAGS = <u[64->1](T0,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R12)
T5 = xor[64](T5,R13)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R12 = [64](T0)
T0 = *[64->32](BX+4)
R13 = [32](T0)
R13/32 = [32](0)
T0 = zx[64->64](BX+8)
R15 = [64](T0)
T0 = *[64->64](R12)
R10 = [64](T0)
T0 = *[64->64](R12+8)
BP = [64](T0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
T0 = or[32](R13,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+0) = [64](R15)
SI = [64](R10)
R9 = [32](R13)
R9/32 = [32](0)
DI = [64](BP)
*[64](SP+32+0) = [64](R10)
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3410)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{},R9:{},R8:{},BP:{[0,31],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T2:{},T1:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
*[64](IP+2111355+0) = [32](R12)
T0 = sx[32->64](BP)
R12 = [64](T0)
T0 = *[64->64](BX+48)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](R12,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
R12 = [64](T1)
T0 = *[64->64](SP+48)
CX = [64](T0)
T0 = *[64->64](SP+40)
DX = [64](T0)
T0 = [64](R12+R13)
if (0) {
} else {
}
R12 = [64](T0)
T0 = *[64->32](BX+4)
R13 = [32](T0)
T0 = zx[64->64](BX+8)
R15 = [64](T0)
T0 = *[64->64](R12)
R10 = [64](T0)
T0 = *[64->64](R12+8)
BP = [64](T0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
T0 = or[32](R13,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS/4 = arbitrary[1]
R13 = [32](T0)
R13/32 = [32](0)
*[64](SP+0) = [64](R15)
SI = [64](R10)
R9 = [32](R13)
R9/32 = [32](0)
DI = [64](BP)
*[64](SP+32+0) = [64](R10)
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3410)


###### 107
###### 0
Initial RREIL instructions:
T0 = *[64->64](SP+32)
R10 = [64](T0)
T0 = [64](R10-AX)
LTU = <u[64->1](R10,AX)
LEU = <=u[64->1](R10,AX)
LTS = <s[64->1](R10,AX)
LES = <=s[64->1](R10,AX)
EQ = ==[64->1](R10,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R10,AX)
} else {
FLAGS = <u[64->1](R10,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R10)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](107+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+32)
R10 = [64](T0)
T0 = [64](R10-AX)
LTS = <s[64->1](R10,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R10,AX)
} else {
FLAGS = <u[64->1](R10,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R10)
T5 = xor[64](T5,AX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](107+IP) else goto [64](IP)


###### 18
###### 0
Initial RREIL instructions:
T0 = zx[64->64](AX+1)
SI = [64](T0)
T0 = [64](BP-6316608)
LTU = <u[64->1](BP,6316608)
LEU = <=u[64->1](BP,6316608)
LTS = <s[64->1](BP,6316608)
LES = <=s[64->1](BP,6316608)
EQ = ==[64->1](BP,6316608)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BP,6316608)
} else {
FLAGS = <u[64->1](BP,6316608)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,6316608)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
*[64](R12+0) = [64](SI)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](AX+1)
SI = [64](T0)
T0 = [64](BP-6316608)
LTS = <s[64->1](BP,6316608)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BP,6316608)
} else {
FLAGS = <u[64->1](BP,6316608)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,6316608)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
*[64](R12+0) = [64](SI)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


###### -7050
Initial RREIL instructions:
DI = [64](BP)
*[64](SP+32+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7050)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [64](BP)
*[64](SP+32+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7050)


###### 3412
Initial RREIL instructions:
T0 = *[64->64](SP+32)
SI = [64](T0)
DI = [64](SI)
*[64](SP+32+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3412)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+32)
SI = [64](T0)
DI = [64](SI)
*[64](SP+32+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3412)


###### -3527
Initial RREIL instructions:
*[64](R12+8+0) = [64](AX)
BP = [64](AX)
T0 = *[64->64](BX+48)
AX = [64](T0)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->64](SP+48)
CX = [64](T0)
R9 = [32](R13)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
DX = [64](T0)
T0 = *[64->64](SP+32)
SI = [64](T0)
DI = [64](BP)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
*[64](SP+0) = [64](R15)
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3527)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
*[64](R12+8+0) = [64](AX)
BP = [64](AX)
T0 = *[64->64](BX+48)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->64](SP+48)
CX = [64](T0)
R9 = [32](R13)
R9/32 = [32](0)
T0 = *[64->64](SP+40)
DX = [64](T0)
T0 = *[64->64](SP+32)
SI = [64](T0)
DI = [64](BP)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
*[64](SP+0) = [64](R15)
*[64](SP+8+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-3527)


Initial RREIL instructions:
T0 = *[64->32](SP+60)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP+72)
BX = [64](T0)
T0 = *[64->64](SP+88)
R12 = [64](T0)
T0 = *[64->64](SP+96)
R13 = [64](T0)
T0 = *[64->64](SP+112)
R15 = [64](T0)
*[64](R14+0) = [32](AX)
AX = [64](BP)
T0 = *[64->64](SP+104)
R14 = [64](T0)
T0 = *[64->64](SP+80)
BP = [64](T0)
T0 = [64](SP+120)
LTU = <u[64->1](SP,120)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,120)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+60)
T0 = *[64->64](SP+72)
BX = [64](T0)
T0 = *[64->64](SP+88)
R12 = [64](T0)
T0 = *[64->64](SP+96)
R13 = [64](T0)
T0 = *[64->64](SP+112)
R15 = [64](T0)
*[64](R14+0) = [32](AX)
AX = [64](BP)
T0 = *[64->64](SP+104)
R14 = [64](T0)
T0 = *[64->64](SP+80)
BP = [64](T0)
T0 = [64](SP+120)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,120)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 3328
Initial RREIL instructions:
DI = [64](R13)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3328)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [64](R13)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3328)


###### -311
Initial RREIL instructions:
R13 = [64](AX)
*[64](IP+2111078+0) = [64](AX)
goto [JUMP] [64](IP+-311)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
R13 = [64](AX)
*[64](IP+2111078+0) = [64](AX)
goto [JUMP] [64](IP+-311)


###### -7188
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7188)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7188)


###### -7211
Initial RREIL instructions:
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-24)
LTU = <u[64->1](SP,24)
LEU = <=u[64->1](SP,24)
LTS = <s[64->1](SP,24)
LES = <=s[64->1](SP,24)
EQ = ==[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
R12 = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7211)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-24)
LTS = <s[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
R12 = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7211)


###### 3463
Initial RREIL instructions:
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->32](AX)
BP = [32](T0)
BP/32 = [32](0)
BX = [64](AX)
AX = [32](6316544)
AX/32 = [32](0)
SI = [32](56)
SI/32 = [32](0)
T0 = [64](R12)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
R12 = [64](T0)
DI = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3463)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->32](AX)
BP = [32](T0)
BP/32 = [32](0)
BX = [64](AX)
AX = [32](6316544)
AX/32 = [32](0)
SI = [32](56)
SI/32 = [32](0)
T0 = [64](R12)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
R12 = [64](T0)
DI = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+3463)


Initial RREIL instructions:
*[64](BX+0) = [32](BP)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = [64](SP+24)
LTU = <u[64->1](SP,24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](BX+0) = [32](BP)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = [64](SP+24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = [16](AX)
AX = [16](AX)
AX = [16](T0)
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
T0 = *[64->32](DI)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
T0 = *[64->32](DI)
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
*[64](DI+0) = [32](SI)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
*[64](DI+0) = [32](SI)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
CX = [32](SI)
CX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
AX = [32](SI)
AX/32 = [32](0)
T0 = and[32](CX,31)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
CX = [32](T0)
CX/32 = [32](0)
T0 = [5](5)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](AX,T2)
T3 = <u[8->1](8,5)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
T2 = [8](AX)
FLAGS/11 = [1](T2/7)
} else {
T2 = /=[8->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [8](T1)
T0 = and[32](DX,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
DX = [32](T0)
DX/32 = [32](0)
T0 = zx[8->32](AX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->32](DI+4*R8+8)
R9 = [32](T0)
R9/32 = [32](0)
AX = [32](R9)
AX/32 = [32](0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](T0-1)
T1 = shr[32](AX,T2)
T3 = <u[8->1](32,CX)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[32](T1,1)
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
T2 = [32](AX)
FLAGS/11 = [1](T2/31)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[32](AX,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
AX = [32](T0)
AX/32 = [32](0)
T0 = xor[32](DX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](DX,T0)
T2 = <u[8->1](32,CX)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](32-T0)
T2 = shr[32](DX,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/31,FLAGS)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
DX = [32](T1)
DX/32 = [32](0)
T0 = xor[32](DX,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
*[64](DI+4*R8+8+0) = [32](DX)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],[0,31],},DX:{[0,31],},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T3:{},T2:{},T1:{[8,31],},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/6 = ==[64->1](T0,0)
AX = [32](6316544)
AX/32 = [32](0)
CX = [32](SI)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
AX = [32](SI)
T0 = and[32](CX,31)
T1 = [8](T0)
CX = [32](T0)
CX/32 = [32](0)
T0 = [5](5)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](AX,T2)
T3 = <u[8->1](8,5)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
} else {
T2 = /=[8->1](T0,0)
if (T2) {
} else {
}
}
AX = [8](T1)
T0 = and[32](DX,1)
T1 = [8](T0)
DX = [32](T0)
T0 = zx[8->32](AX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->32](DI+4*R8+8)
R9 = [32](T0)
R9/32 = [32](0)
AX = [32](R9)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](T0-1)
T1 = shr[32](AX,T2)
T3 = <u[8->1](32,CX)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[32](T1,1)
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
} else {
T2 = /=[32->1](T0,0)
if (T2) {
} else {
}
}
AX = [32](T1)
T0 = and[32](AX,1)
AX = [32](T0)
AX/32 = [32](0)
T0 = xor[32](DX,AX)
T1 = [8](T0)
DX = [32](T0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](DX,T0)
T2 = <u[8->1](32,CX)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
} else {
T2 = /=[32->1](T0,0)
if (T2) {
} else {
}
}
DX = [32](T1)
T0 = xor[32](DX,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
*[64](DI+4*R8+8+0) = [32](DX)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
T0 = *[64->32](DI+4)
AX = [32](T0)
AX/32 = [32](0)
*[64](DI+4+0) = [32](SI)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](6316544)
AX/32 = [32](0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
T0 = *[64->32](DI+4)
AX = [32](T0)
AX/32 = [32](0)
*[64](DI+4+0) = [32](SI)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 18
###### 0
Initial RREIL instructions:
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
AX = [32](6316544)
AX/32 = [32](0)
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
T0 = and[64](DX,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](DI+0) = [32](8)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
AX = [32](6316544)
AX/32 = [32](0)
T0 = and[64](DI,DI)
FLAGS/6 = ==[64->1](T0,0)
T0 = [64](DI)
if (FLAGS/6) {
T0 = [64](AX)
} else {
}
DI = [64](T0)
T0 = and[64](DX,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](DI+0) = [32](8)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


###### 13
###### 0
Initial RREIL instructions:
T0 = and[64](SI,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](13+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](SI,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](13+IP) else goto [64](IP)


Initial RREIL instructions:
*[64](DI+40+0) = [64](SI)
*[64](DI+48+0) = [64](DX)
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](DI+40+0) = [64](SI)
*[64](DI+48+0) = [64](DX)
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -7458
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7458)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7458)


###### -7524
Initial RREIL instructions:
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-24+0) = [64](R13)
R12 = [64](DI)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
R14 = [64](DX)
T0 = [64](SP-104)
LTU = <u[64->1](SP,104)
LEU = <=u[64->1](SP,104)
LTS = <s[64->1](SP,104)
LES = <=s[64->1](SP,104)
EQ = ==[64->1](SP,104)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,104)
} else {
FLAGS = <u[64->1](SP,104)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,104)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
DX = [32](6316544)
DX/32 = [32](0)
T0 = and[64](R8,R8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [64](DX)
T1 = xor[1](FLAGS/6,1)
if (T1) {
T0 = [64](R8)
} else {
}
DX = [64](T0)
R13 = [64](SI)
R15 = [64](CX)
*[64](SP+40+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7524)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-24+0) = [64](R13)
R12 = [64](DI)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
R14 = [64](DX)
T0 = [64](SP-104)
if (0) {
} else {
}
SP = [64](T0)
DX = [32](6316544)
DX/32 = [32](0)
T0 = and[64](R8,R8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [64](DX)
T1 = xor[1](FLAGS/6,1)
if (T1) {
T0 = [64](R8)
} else {
}
DX = [64](T0)
R13 = [64](SI)
R15 = [64](CX)
*[64](SP+40+0) = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7524)


###### -4016
Initial RREIL instructions:
T0 = *[64->64](SP+40)
DX = [64](T0)
T0 = *[64->32](AX)
BP = [32](T0)
BP/32 = [32](0)
BX = [64](AX)
CX = [64](R15)
SI = [64](R13)
DI = [64](R12)
T0 = *[64->64](DX+48)
AX = [64](T0)
T0 = *[64->32](DX+4)
R9 = [32](T0)
R9/32 = [32](0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](DX+40)
AX = [64](T0)
*[64](SP+8+0) = [64](AX)
T0 = zx[64->64](DX+8)
AX = [64](T0)
*[64](SP+0) = [64](AX)
T0 = *[64->32](DX)
R8 = [32](T0)
R8/32 = [32](0)
DX = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4016)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+40)
DX = [64](T0)
T0 = *[64->32](AX)
BP = [32](T0)
BP/32 = [32](0)
BX = [64](AX)
CX = [64](R15)
SI = [64](R13)
DI = [64](R12)
T0 = *[64->64](DX+48)
T0 = *[64->32](DX+4)
R9 = [32](T0)
R9/32 = [32](0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](DX+40)
*[64](SP+8+0) = [64](AX)
T0 = zx[64->64](DX+8)
AX = [64](T0)
*[64](SP+0) = [64](AX)
T0 = *[64->32](DX)
R8 = [32](T0)
R8/32 = [32](0)
DX = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4016)


Initial RREIL instructions:
*[64](BX+0) = [32](BP)
T0 = *[64->64](SP+72)
R12 = [64](T0)
T0 = *[64->64](SP+56)
BX = [64](T0)
T0 = *[64->64](SP+64)
BP = [64](T0)
T0 = *[64->64](SP+80)
R13 = [64](T0)
T0 = *[64->64](SP+88)
R14 = [64](T0)
T0 = *[64->64](SP+96)
R15 = [64](T0)
T0 = [64](SP+104)
LTU = <u[64->1](SP,104)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,104)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,104)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](BX+0) = [32](BP)
T0 = *[64->64](SP+72)
R12 = [64](T0)
T0 = *[64->64](SP+56)
BX = [64](T0)
T0 = *[64->64](SP+64)
BP = [64](T0)
T0 = *[64->64](SP+80)
R13 = [64](T0)
T0 = *[64->64](SP+88)
R14 = [64](T0)
T0 = *[64->64](SP+96)
R15 = [64](T0)
T0 = [64](SP+104)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,104)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,104)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -7698
Initial RREIL instructions:
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
BX = [32](6316544)
BX/32 = [32](0)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-24+0) = [64](R13)
R12 = [64](DX)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
T0 = [64](SP-120)
LTU = <u[64->1](SP,120)
LEU = <=u[64->1](SP,120)
LTS = <s[64->1](SP,120)
LES = <=s[64->1](SP,120)
EQ = ==[64->1](SP,120)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,120)
} else {
FLAGS = <u[64->1](SP,120)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = and[64](CX,CX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+48+0) = [64](DI)
*[64](SP+56+0) = [64](SI)
T0 = [64](BX)
T1 = xor[1](FLAGS/6,1)
if (T1) {
T0 = [64](CX)
} else {
}
BX = [64](T0)
T0 = xor[32](BP,BP)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BP = [32](T0)
BP/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7698)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,31],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
BX = [32](6316544)
BX/32 = [32](0)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-24+0) = [64](R13)
R12 = [64](DX)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
T0 = [64](SP-120)
if (0) {
} else {
}
SP = [64](T0)
T0 = and[64](CX,CX)
FLAGS/6 = ==[64->1](T0,0)
*[64](SP+48+0) = [64](DI)
*[64](SP+56+0) = [64](SI)
T0 = [64](BX)
T1 = xor[1](FLAGS/6,1)
if (T1) {
T0 = [64](CX)
} else {
}
BX = [64](T0)
T0 = xor[32](BP,BP)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BP = [32](T0)
BP/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-7698)


###### -4202
Initial RREIL instructions:
T0 = *[64->32](AX)
R11 = [32](T0)
R11/32 = [32](0)
R14 = [64](AX)
T0 = *[64->64](BX+48)
AX = [64](T0)
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = zx[64->64](BX+8)
R13 = [64](T0)
T0 = *[64->64](SP+56)
CX = [64](T0)
T0 = zx[1->8](FLAGS/6)
CX/8 = [8](T0)
T0 = *[64->32](BX+4)
T1 = or[32](BP,T0)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
FLAGS/4 = arbitrary[1]
BP = [32](T1)
BP/32 = [32](0)
T0 = *[64->64](SP+48)
DX = [64](T0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
*[64](SP+0) = [64](R13)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+8+0) = [64](AX)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
R9 = [32](BP)
R9/32 = [32](0)
*[64](SP+32+0) = [32](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4202)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{},R13:{},R12:{[0,63],},R11:{},R10:{[0,63],},R9:{},R8:{},BP:{[0,31],},SP:{[0,63],},DI:{[0,31],},SI:{[0,31],},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](AX)
R11 = [32](T0)
R11/32 = [32](0)
R14 = [64](AX)
T0 = *[64->64](BX+48)
T0 = and[64](R12,R12)
FLAGS/6 = ==[64->1](T0,0)
T0 = zx[64->64](BX+8)
R13 = [64](T0)
T0 = *[64->64](SP+56)
CX = [64](T0)
T0 = zx[1->8](FLAGS/6)
CX/8 = [8](T0)
T0 = *[64->32](BX+4)
T1 = or[32](BP,T0)
BP = [32](T1)
BP/32 = [32](0)
T0 = *[64->64](SP+48)
DX = [64](T0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
T0 = xor[32](SI,SI)
SI = [32](T0)
SI/32 = [32](0)
*[64](SP+0) = [64](R13)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+8+0) = [64](AX)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
R9 = [32](BP)
R9/32 = [32](0)
*[64](SP+32+0) = [32](R11)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4202)


###### 2658
Initial RREIL instructions:
T0 = zx[64->64](AX+1)
SI = [64](T0)
R15 = [64](AX)
DI = [64](SI)
*[64](SP+40+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+2658)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](AX+1)
SI = [64](T0)
R15 = [64](AX)
DI = [64](SI)
*[64](SP+40+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+2658)


###### -4281
Initial RREIL instructions:
R10 = [64](AX)
T0 = *[64->64](BX+48)
AX = [64](T0)
T0 = *[64->64](SP+40)
SI = [64](T0)
T0 = *[64->64](SP+56)
CX = [64](T0)
T0 = *[64->64](SP+48)
DX = [64](T0)
DI = [64](R10)
R9 = [32](BP)
R9/32 = [32](0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
*[64](SP+0) = [64](R13)
*[64](SP+8+0) = [64](AX)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
*[64](SP+40+0) = [64](R10)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4281)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{},R8:{},BP:{[0,63],[0,31],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
R10 = [64](AX)
T0 = *[64->64](BX+48)
T0 = *[64->64](SP+40)
SI = [64](T0)
T0 = *[64->64](SP+56)
CX = [64](T0)
T0 = *[64->64](SP+48)
DX = [64](T0)
DI = [64](R10)
R9 = [32](BP)
R9/32 = [32](0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](BX+40)
AX = [64](T0)
*[64](SP+0) = [64](R13)
*[64](SP+8+0) = [64](AX)
T0 = *[64->32](BX)
R8 = [32](T0)
R8/32 = [32](0)
*[64](SP+40+0) = [64](R10)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4281)


###### 4
###### 0
Initial RREIL instructions:
T0 = *[64->32](SP+32)
R11 = [32](T0)
R11/32 = [32](0)
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](SP+40)
R10 = [64](T0)
*[64](R14+0) = [32](R11)
if (FLAGS/6) goto [64](4+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP+32)
R11 = [32](T0)
R11/32 = [32](0)
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](SP+40)
R10 = [64](T0)
*[64](R14+0) = [32](R11)
if (FLAGS/6) goto [64](4+IP) else goto [64](IP)


Initial RREIL instructions:
*[64](R12+0) = [64](R15)
AX = [64](R10)
T0 = *[64->64](SP+72)
BX = [64](T0)
T0 = *[64->64](SP+80)
BP = [64](T0)
T0 = *[64->64](SP+88)
R12 = [64](T0)
T0 = *[64->64](SP+96)
R13 = [64](T0)
T0 = *[64->64](SP+104)
R14 = [64](T0)
T0 = *[64->64](SP+112)
R15 = [64](T0)
T0 = [64](SP+120)
LTU = <u[64->1](SP,120)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,120)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](R12+0) = [64](R15)
AX = [64](R10)
T0 = *[64->64](SP+72)
BX = [64](T0)
T0 = *[64->64](SP+80)
BP = [64](T0)
T0 = *[64->64](SP+88)
R12 = [64](T0)
T0 = *[64->64](SP+96)
R13 = [64](T0)
T0 = *[64->64](SP+104)
R14 = [64](T0)
T0 = *[64->64](SP+112)
R15 = [64](T0)
T0 = [64](SP+120)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,120)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,120)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -298
Initial RREIL instructions:
CX = [64](DX)
T0 = xor[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
goto [JUMP] [64](IP+-298)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],[0,31],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](DX)
T0 = xor[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
goto [JUMP] [64](IP+-298)


###### 43
###### 0
Initial RREIL instructions:
T0 = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = *[64->32](IP+2110303)
R12 = [32](T0)
R12/32 = [32](0)
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = *[64->64](IP+2110287)
BP = [64](T0)
T0 = [32](R12-1)
LTU = <u[32->1](R12,1)
LEU = <=u[32->1](R12,1)
LTS = <s[32->1](R12,1)
LES = <=s[32->1](R12,1)
EQ = ==[32->1](R12,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](R12,1)
} else {
FLAGS = <u[32->1](R12,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R12)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](43+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = *[64->32](IP+2110303)
R12 = [32](T0)
R12/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = *[64->64](IP+2110287)
BP = [64](T0)
T0 = [32](R12-1)
LTS = <s[32->1](R12,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](R12,1)
} else {
FLAGS = <u[32->1](R12,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R12)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](43+IP) else goto [64](IP)


###### -8030
Initial RREIL instructions:
T0 = [32](R12-2)
LTU = <u[32->1](R12,2)
LEU = <=u[32->1](R12,2)
LTS = <s[32->1](R12,2)
LES = <=s[32->1](R12,2)
EQ = ==[32->1](R12,2)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](R12,2)
} else {
FLAGS = <u[32->1](R12,2)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R12)
T5 = xor[32](T5,2)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
R12 = [32](T0)
R12/32 = [32](0)
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
T0 = [64](R12+1)
LTU = <u[64->1](R12,1)
T1 = xor[64](T0,R12)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R12)
} else {
FLAGS = <u[64->1](T0,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R12)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R12 = [64](T0)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](R12,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](64-T0)
T2 = shr[64](R12,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/63,FLAGS)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
R12 = [64](T1)
T0 = *[64->64](BX+BP+24)
DI = [64](T0)
T0 = [64](BX+16)
LTU = <u[64->1](BX,16)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8030)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,31],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [32](R12-2)
if (0) {
} else {
}
R12 = [32](T0)
R12/32 = [32](0)
T0 = xor[32](BX,BX)
BX = [32](T0)
BX/32 = [32](0)
T0 = [64](R12+1)
T1 = xor[64](T0,R12)
if (0) {
} else {
}
R12 = [64](T0)
T0 = [6](4)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[64](R12,T0)
T2 = <u[8->1](64,4)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
R12 = [64](T1)
T0 = *[64->64](BX+BP+24)
DI = [64](T0)
T0 = [64](BX+16)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8030)


###### -19
###### 0
Initial RREIL instructions:
T0 = [64](BX-R12)
LTU = <u[64->1](BX,R12)
LEU = <=u[64->1](BX,R12)
LTS = <s[64->1](BX,R12)
LES = <=s[64->1](BX,R12)
EQ = ==[64->1](BX,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R12)
} else {
FLAGS = <u[64->1](BX,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R12)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-19+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX-R12)
LTS = <s[64->1](BX,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,R12)
} else {
FLAGS = <u[64->1](BX,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,R12)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-19+IP) else goto [64](IP)


###### 27
###### 0
Initial RREIL instructions:
T0 = *[64->64](BP+8)
DI = [64](T0)
T0 = [64](DI-6316608)
LTU = <u[64->1](DI,6316608)
LEU = <=u[64->1](DI,6316608)
LTS = <s[64->1](DI,6316608)
LES = <=s[64->1](DI,6316608)
EQ = ==[64->1](DI,6316608)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DI,6316608)
} else {
FLAGS = <u[64->1](DI,6316608)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DI)
T5 = xor[64](T5,6316608)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](27+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BP+8)
DI = [64](T0)
T0 = [64](DI-6316608)
LTS = <s[64->1](DI,6316608)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](DI,6316608)
} else {
FLAGS = <u[64->1](DI,6316608)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,DI)
T5 = xor[64](T5,6316608)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](27+IP) else goto [64](IP)


###### -8053
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8053)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8053)


###### 19
###### 0
Initial RREIL instructions:
*[64](IP+2110224+0) = [64](256)
*[64](IP+2110221+0) = [64](6316608)
T0 = [64](BP-6316416)
LTU = <u[64->1](BP,6316416)
LEU = <=u[64->1](BP,6316416)
LTS = <s[64->1](BP,6316416)
LES = <=s[64->1](BP,6316416)
EQ = ==[64->1](BP,6316416)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BP,6316416)
} else {
FLAGS = <u[64->1](BP,6316416)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,6316416)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](19+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](IP+2110224+0) = [64](256)
*[64](IP+2110221+0) = [64](6316608)
T0 = [64](BP-6316416)
LTS = <s[64->1](BP,6316416)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BP,6316416)
} else {
FLAGS = <u[64->1](BP,6316416)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,6316416)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](19+IP) else goto [64](IP)


###### -8092
Initial RREIL instructions:
DI = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8092)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8092)


Initial RREIL instructions:
*[64](IP+2110169+0) = [64](6316416)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
*[64](IP+2110165+0) = [32](1)
T0 = *[64->64](SP)
SP = [64](SP+8)
R12 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
*[64](IP+2110169+0) = [64](6316416)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
*[64](IP+2110165+0) = [32](1)
T0 = *[64->64](SP)
SP = [64](SP+8)
R12 = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -1409
Initial RREIL instructions:
CX = [32](6316544)
CX/32 = [32](0)
DX = [64](4294967295)
goto [JUMP] [64](IP+-1409)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
CX = [32](6316544)
CX/32 = [32](0)
DX = [64](4294967295)
goto [JUMP] [64](IP+-1409)


###### -1434
Initial RREIL instructions:
CX = [32](6316544)
CX/32 = [32](0)
goto [JUMP] [64](IP+-1434)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
CX = [32](6316544)
CX/32 = [32](0)
goto [JUMP] [64](IP+-1434)


###### -58
Initial RREIL instructions:
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-58)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-58)


###### -45
Initial RREIL instructions:
DX = [64](SI)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-45)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](SI)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-45)


###### -4747
Initial RREIL instructions:
*[64](SP+-16+0) = [64](BX)
*[64](SP+-8+0) = [64](BP)
T0 = [64](SP-88)
LTU = <u[64->1](SP,88)
LEU = <=u[64->1](SP,88)
LTS = <s[64->1](SP,88)
LES = <=s[64->1](SP,88)
EQ = ==[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
BP = [64](DX)
BX = [32](DI)
BX/32 = [32](0)
DI = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4747)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-16+0) = [64](BX)
*[64](SP+-8+0) = [64](BP)
T0 = [64](SP-88)
LTS = <s[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
BP = [64](DX)
BX = [32](DI)
BX/32 = [32](0)
DI = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4747)


###### -1519
Initial RREIL instructions:
CX = [64](SP)
SI = [64](BP)
DI = [32](BX)
DI/32 = [32](0)
DX = [64](4294967295)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1519)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
CX = [64](SP)
SI = [64](BP)
DI = [32](BX)
DI/32 = [32](0)
DX = [64](4294967295)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1519)


Initial RREIL instructions:
T0 = *[64->64](SP+72)
BX = [64](T0)
T0 = *[64->64](SP+80)
BP = [64](T0)
T0 = [64](SP+88)
LTU = <u[64->1](SP,88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+72)
BX = [64](T0)
T0 = *[64->64](SP+80)
BP = [64](T0)
T0 = [64](SP+88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -4819
Initial RREIL instructions:
T0 = [16](AX)
AX = [16](AX)
AX = [16](T0)
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BX = [32](DI)
BX/32 = [32](0)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-88)
LTU = <u[64->1](SP,88)
LEU = <=u[64->1](SP,88)
LTS = <s[64->1](SP,88)
LES = <=s[64->1](SP,88)
EQ = ==[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
BP = [64](DX)
R12 = [64](CX)
DI = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4819)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[16,63],[0,15],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [16](AX)
AX = [16](T0)
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BX = [32](DI)
BX/32 = [32](0)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-88)
LTS = <s[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
BP = [64](DX)
R12 = [64](CX)
DI = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-4819)


###### -1587
Initial RREIL instructions:
CX = [64](SP)
DX = [64](R12)
SI = [64](BP)
DI = [32](BX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1587)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
CX = [64](SP)
DX = [64](R12)
SI = [64](BP)
DI = [32](BX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1587)


Initial RREIL instructions:
T0 = *[64->64](SP+64)
BX = [64](T0)
T0 = *[64->64](SP+72)
BP = [64](T0)
T0 = *[64->64](SP+80)
R12 = [64](T0)
T0 = [64](SP+88)
LTU = <u[64->1](SP,88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
BX = [64](T0)
T0 = *[64->64](SP+72)
BP = [64](T0)
T0 = *[64->64](SP+80)
R12 = [64](T0)
T0 = [64](SP+88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -156
Initial RREIL instructions:
DX = [64](SI)
SI = [32](DI)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-156)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](SI)
SI = [32](DI)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-156)


###### -111
Initial RREIL instructions:
CX = [64](DX)
DX = [64](SI)
SI = [32](DI)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-111)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](DX)
DX = [64](SI)
SI = [32](DI)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-111)


###### -1791
Initial RREIL instructions:
T0 = [64](SP-72)
LTU = <u[64->1](SP,72)
LEU = <=u[64->1](SP,72)
LTS = <s[64->1](SP,72)
LES = <=s[64->1](SP,72)
EQ = ==[64->1](SP,72)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,72)
} else {
FLAGS = <u[64->1](SP,72)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,72)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2110021)
AX = [64](T0)
CX = [32](DX)
CX/32 = [32](0)
T0 = and[32](CX,31)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
CX = [32](T0)
CX/32 = [32](0)
*[64](SP+0) = [64](AX)
T0 = *[64->64](IP+2110013)
AX = [64](T0)
*[64](SP+8+0) = [64](AX)
T0 = *[64->64](IP+2110009)
AX = [64](T0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](IP+2110005)
AX = [64](T0)
*[64](SP+24+0) = [64](AX)
T0 = *[64->64](IP+2110001)
AX = [64](T0)
*[64](SP+32+0) = [64](AX)
T0 = *[64->64](IP+2109997)
AX = [64](T0)
*[64](SP+40+0) = [64](AX)
T0 = *[64->64](IP+2109993)
AX = [64](T0)
*[64](SP+48+0) = [64](AX)
AX = [32](DX)
AX/32 = [32](0)
DX = [64](SI)
T0 = [5](5)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](AX,T2)
T3 = <u[8->1](8,5)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
T2 = [8](AX)
FLAGS/11 = [1](T2/7)
} else {
T2 = /=[8->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[8->1](T1,0)
FLAGS/6 = ==[8->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [8](T1)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = zx[8->32](AX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->32](SP+4*R8+8)
R9 = [32](T0)
R9/32 = [32](0)
AX = [32](R9)
AX/32 = [32](0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](T0-1)
T1 = shr[32](AX,T2)
T3 = <u[8->1](32,CX)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[32](T1,1)
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
T2 = [32](AX)
FLAGS/11 = [1](T2/31)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [32](T1)
AX/32 = [32](0)
T0 = and[32](AX,1)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
AX = [32](T0)
AX/32 = [32](0)
T0 = xor[32](AX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](AX,T0)
T2 = <u[8->1](32,CX)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](32-T0)
T2 = shr[32](AX,T2)
FLAGS = [1](T2)
} else {
FLAGS = arbitrary[1]
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
FLAGS/11 = xor[1](T1/31,FLAGS)
} else {
T2 = /=[32->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[32->1](T1,0)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
AX = [32](T1)
AX/32 = [32](0)
CX = [64](SP)
T0 = xor[32](AX,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+4*R8+8+0) = [32](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1791)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{[0,31],},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T3:{},T2:{},T1:{[8,31],},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-72)
if (0) {
} else {
}
SP = [64](T0)
T0 = *[64->64](IP+2110021)
CX = [32](DX)
T0 = and[32](CX,31)
T1 = [8](T0)
CX = [32](T0)
*[64](SP+0) = [64](AX)
T0 = *[64->64](IP+2110013)
*[64](SP+8+0) = [64](AX)
T0 = *[64->64](IP+2110009)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](IP+2110005)
*[64](SP+24+0) = [64](AX)
T0 = *[64->64](IP+2110001)
*[64](SP+32+0) = [64](AX)
T0 = *[64->64](IP+2109997)
*[64](SP+40+0) = [64](AX)
T0 = *[64->64](IP+2109993)
*[64](SP+48+0) = [64](AX)
AX = [32](DX)
DX = [64](SI)
T0 = [5](5)
T0/5 = [3](0)
T2 = <=u[8->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [8](T0-1)
T1 = shr[8](AX,T2)
T3 = <u[8->1](8,5)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[8](T1,1)
} else {
}
T2 = ==[8->1](T0,1)
if (T2) {
} else {
T2 = /=[8->1](T0,0)
if (T2) {
} else {
}
}
AX = [8](T1)
SI = [64](DI)
T0 = xor[32](DI,DI)
T1 = [8](T0)
DI = [32](T0)
DI/32 = [32](0)
T0 = zx[8->32](AX)
R8 = [32](T0)
R8/32 = [32](0)
T0 = *[64->32](SP+4*R8+8)
R9 = [32](T0)
R9/32 = [32](0)
AX = [32](R9)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [32](T0-1)
T1 = shr[32](AX,T2)
T3 = <u[8->1](32,CX)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[32](T1,1)
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
} else {
T2 = /=[32->1](T0,0)
if (T2) {
} else {
}
}
AX = [32](T1)
T0 = and[32](AX,1)
AX = [32](T0)
T0 = xor[32](AX,1)
T1 = [8](T0)
AX = [32](T0)
T0 = [5](CX)
T0/5 = [27](0)
T2 = <=u[32->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T1 = shl[32](AX,T0)
T2 = <u[8->1](32,CX)
T2 = xor[1](T2,1)
if (T2) {
} else {
}
} else {
}
T2 = ==[32->1](T0,1)
if (T2) {
} else {
T2 = /=[32->1](T0,0)
if (T2) {
} else {
}
}
AX = [32](T1)
CX = [64](SP)
T0 = xor[32](AX,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+4*R8+8+0) = [32](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1791)


Initial RREIL instructions:
T0 = [64](SP+72)
LTU = <u[64->1](SP,72)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,72)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,72)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+72)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,72)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,72)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -176
Initial RREIL instructions:
T0 = sx[8->32](DX/8)
DX = [32](T0)
DX/32 = [32](0)
SI = [64](4294967295)
goto [JUMP] [64](IP+-176)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[8,15],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = sx[8->32](DX/8)
DX = [32](T0)
DX/32 = [32](0)
SI = [64](4294967295)
goto [JUMP] [64](IP+-176)


###### -26
Initial RREIL instructions:
SI = [32](58)
SI/32 = [32](0)
goto [JUMP] [64](IP+-26)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [32](58)
SI/32 = [32](0)
goto [JUMP] [64](IP+-26)


###### -202
Initial RREIL instructions:
DX = [32](58)
DX/32 = [32](0)
goto [JUMP] [64](IP+-202)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DX = [32](58)
DX/32 = [32](0)
goto [JUMP] [64](IP+-202)


###### -1286
Initial RREIL instructions:
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BX = [32](DI)
BX/32 = [32](0)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-88)
LTU = <u[64->1](SP,88)
LEU = <=u[64->1](SP,88)
LTS = <s[64->1](SP,88)
LES = <=s[64->1](SP,88)
EQ = ==[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2109796)
AX = [64](T0)
BP = [64](CX)
R12 = [64](R8)
DI = [64](SP)
*[64](SP+0) = [64](AX)
T0 = *[64->64](IP+2109784)
AX = [64](T0)
*[64](SP+8+0) = [64](AX)
T0 = *[64->64](IP+2109780)
AX = [64](T0)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](IP+2109776)
AX = [64](T0)
*[64](SP+24+0) = [64](AX)
T0 = *[64->64](IP+2109772)
AX = [64](T0)
*[64](SP+32+0) = [64](AX)
T0 = *[64->64](IP+2109768)
AX = [64](T0)
*[64](SP+40+0) = [64](AX)
T0 = *[64->64](IP+2109764)
AX = [64](T0)
*[64](SP+48+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1286)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BX = [32](DI)
BX/32 = [32](0)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-88)
LTS = <s[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2109796)
BP = [64](CX)
R12 = [64](R8)
DI = [64](SP)
*[64](SP+0) = [64](AX)
T0 = *[64->64](IP+2109784)
*[64](SP+8+0) = [64](AX)
T0 = *[64->64](IP+2109780)
*[64](SP+16+0) = [64](AX)
T0 = *[64->64](IP+2109776)
*[64](SP+24+0) = [64](AX)
T0 = *[64->64](IP+2109772)
*[64](SP+32+0) = [64](AX)
T0 = *[64->64](IP+2109768)
*[64](SP+40+0) = [64](AX)
T0 = *[64->64](IP+2109764)
AX = [64](T0)
*[64](SP+48+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1286)


###### -1990
Initial RREIL instructions:
CX = [64](SP)
DX = [64](R12)
SI = [64](BP)
DI = [32](BX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1990)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],[0,31],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
CX = [64](SP)
DX = [64](R12)
SI = [64](BP)
DI = [32](BX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1990)


Initial RREIL instructions:
T0 = *[64->64](SP+64)
BX = [64](T0)
T0 = *[64->64](SP+72)
BP = [64](T0)
T0 = *[64->64](SP+80)
R12 = [64](T0)
T0 = [64](SP+88)
LTU = <u[64->1](SP,88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+64)
BX = [64](T0)
T0 = *[64->64](SP+72)
BP = [64](T0)
T0 = *[64->64](SP+80)
R12 = [64](T0)
T0 = [64](SP+88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -172
Initial RREIL instructions:
R8 = [64](4294967295)
goto [JUMP] [64](IP+-172)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
R8 = [64](4294967295)
goto [JUMP] [64](IP+-172)


###### -32
Initial RREIL instructions:
CX = [64](DX)
DX = [64](SI)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-32)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](DX)
DX = [64](SI)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-32)


###### -211
Initial RREIL instructions:
R8 = [64](CX)
CX = [64](DX)
DX = [64](SI)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-211)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R8 = [64](CX)
CX = [64](DX)
DX = [64](SI)
SI = [64](DI)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
goto [JUMP] [64](IP+-211)


###### 1161
###### 0
Initial RREIL instructions:
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
BX = [64](R8)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-24+0) = [64](R13)
BP = [64](DI)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
T0 = [64](SP-136)
LTU = <u[64->1](SP,136)
LEU = <=u[64->1](SP,136)
LTS = <s[64->1](SP,136)
LES = <=s[64->1](SP,136)
EQ = ==[64->1](SP,136)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,136)
} else {
FLAGS = <u[64->1](SP,136)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = and[64](SI,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R12 = [64](R9)
if (FLAGS/6) goto [64](1161+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-48+0) = [64](BX)
*[64](SP+-40+0) = [64](BP)
BX = [64](R8)
*[64](SP+-32+0) = [64](R12)
*[64](SP+-24+0) = [64](R13)
BP = [64](DI)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
T0 = [64](SP-136)
if (0) {
} else {
}
SP = [64](T0)
T0 = and[64](SI,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R12 = [64](R9)
if (FLAGS/6) goto [64](1161+IP) else goto [64](IP)


###### -8321
Initial RREIL instructions:
R9 = [64](CX)
R8 = [64](DX)
CX = [64](SI)
DX = [32](4213512)
DX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8321)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [64](CX)
R8 = [64](DX)
CX = [64](SI)
DX = [32](4213512)
DX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8321)


###### -8770
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213531)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8770)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213531)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8770)


###### -8367
Initial RREIL instructions:
R8 = [32](2011)
R8/32 = [32](0)
CX = [64](AX)
DX = [32](4214240)
DX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8367)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R8 = [32](2011)
R8/32 = [32](0)
CX = [64](AX)
DX = [32](4214240)
DX/32 = [32](0)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8367)


###### -8816
Initial RREIL instructions:
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213624)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8816)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213624)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8816)


###### -8651
Initial RREIL instructions:
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8651)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BP)
DI = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8651)


###### 187
###### 0
Initial RREIL instructions:
T0 = [64](R12-9)
LTU = <u[64->1](R12,9)
LEU = <=u[64->1](R12,9)
LTS = <s[64->1](R12,9)
LES = <=s[64->1](R12,9)
EQ = ==[64->1](R12,9)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R12,9)
} else {
FLAGS = <u[64->1](R12,9)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R12)
T5 = xor[64](T5,9)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](187+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R12-9)
LTS = <s[64->1](R12,9)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R12,9)
} else {
FLAGS = <u[64->1](R12,9)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R12)
T5 = xor[64](T5,9)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = or[1](FLAGS,FLAGS/6)
if (T0) goto [64](187+IP) else goto [64](IP)


###### -8909
Initial RREIL instructions:
T0 = *[64->64](BX+8)
AX = [64](T0)
T0 = *[64->64](BX+64)
CX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX+56)
R15 = [64](T0)
T0 = *[64->64](BX+48)
R14 = [64](T0)
SI = [32](4214096)
SI/32 = [32](0)
T0 = *[64->64](BX+40)
R13 = [64](T0)
T0 = *[64->64](BX+32)
R12 = [64](T0)
T0 = *[64->64](BX+24)
R8 = [64](T0)
T0 = *[64->64](BX+16)
R9 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+72+0) = [64](AX)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+48+0) = [64](CX)
*[64](SP+56+0) = [64](R8)
*[64](SP+64+0) = [64](R9)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8909)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+8)
AX = [64](T0)
T0 = *[64->64](BX+64)
CX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX+56)
R15 = [64](T0)
T0 = *[64->64](BX+48)
R14 = [64](T0)
SI = [32](4214096)
SI/32 = [32](0)
T0 = *[64->64](BX+40)
R13 = [64](T0)
T0 = *[64->64](BX+32)
R12 = [64](T0)
T0 = *[64->64](BX+24)
R8 = [64](T0)
T0 = *[64->64](BX+16)
R9 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+72+0) = [64](AX)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
*[64](SP+48+0) = [64](CX)
*[64](SP+56+0) = [64](R8)
*[64](SP+64+0) = [64](R9)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8909)


###### -8547
Initial RREIL instructions:
T0 = *[64->64](SP+56)
R8 = [64](T0)
T0 = *[64->64](SP+48)
CX = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+64)
R9 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+32+0) = [64](R15)
*[64](SP+24+0) = [64](R14)
*[64](SP+0) = [64](R8)
T0 = *[64->64](SP+72)
R8 = [64](T0)
*[64](SP+40+0) = [64](CX)
CX = [64](BX)
*[64](SP+16+0) = [64](R13)
*[64](SP+8+0) = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8547)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+56)
T0 = *[64->64](SP+48)
DX = [64](AX)
T0 = *[64->64](SP+64)
R9 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+32+0) = [64](R15)
*[64](SP+24+0) = [64](R14)
*[64](SP+0) = [64](R8)
T0 = *[64->64](SP+72)
R8 = [64](T0)
*[64](SP+40+0) = [64](CX)
CX = [64](BX)
*[64](SP+16+0) = [64](R13)
*[64](SP+8+0) = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-8547)


Initial RREIL instructions:
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+96)
BP = [64](T0)
T0 = *[64->64](SP+104)
R12 = [64](T0)
T0 = *[64->64](SP+112)
R13 = [64](T0)
T0 = *[64->64](SP+120)
R14 = [64](T0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
T0 = [64](SP+136)
LTU = <u[64->1](SP,136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+96)
BP = [64](T0)
T0 = *[64->64](SP+104)
R12 = [64](T0)
T0 = *[64->64](SP+112)
R13 = [64](T0)
T0 = *[64->64](SP+120)
R14 = [64](T0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
T0 = [64](SP+136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T1 = *[64->64](4214160)
goto [JUMP] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T1:{},}

RREIL instructions after LV (greedy):
T1 = *[64->64](4214160)
goto [JUMP] [64](T1)


###### -208
Initial RREIL instructions:
T0 = *[64->64](BX+8)
AX = [64](T0)
T0 = *[64->64](BX+64)
CX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX+56)
R15 = [64](T0)
T0 = *[64->64](BX+48)
R14 = [64](T0)
SI = [32](4214040)
SI/32 = [32](0)
T0 = *[64->64](BX+40)
R13 = [64](T0)
T0 = *[64->64](BX+32)
R12 = [64](T0)
T0 = *[64->64](BX+24)
R8 = [64](T0)
T0 = *[64->64](BX+16)
R9 = [64](T0)
*[64](SP+72+0) = [64](AX)
T0 = *[64->64](BX)
BX = [64](T0)
goto [JUMP] [64](IP+-208)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+8)
AX = [64](T0)
T0 = *[64->64](BX+64)
CX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX+56)
R15 = [64](T0)
T0 = *[64->64](BX+48)
R14 = [64](T0)
SI = [32](4214040)
SI/32 = [32](0)
T0 = *[64->64](BX+40)
R13 = [64](T0)
T0 = *[64->64](BX+32)
R12 = [64](T0)
T0 = *[64->64](BX+24)
R8 = [64](T0)
T0 = *[64->64](BX+16)
R9 = [64](T0)
*[64](SP+72+0) = [64](AX)
T0 = *[64->64](BX)
BX = [64](T0)
goto [JUMP] [64](IP+-208)


###### -9237
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9237)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9237)


###### -9132
Initial RREIL instructions:
T0 = *[64->64](BX)
BX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213535)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9132)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX)
BX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213535)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9132)


###### -8761
Initial RREIL instructions:
CX = [64](BX)
DI = [64](BP)
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+96)
BP = [64](T0)
T0 = *[64->64](SP+104)
R12 = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+112)
R13 = [64](T0)
T0 = *[64->64](SP+120)
R14 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+136)
LTU = <u[64->1](SP,136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-8761)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [64](BX)
DI = [64](BP)
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+96)
BP = [64](T0)
T0 = *[64->64](SP+104)
R12 = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+112)
R13 = [64](T0)
T0 = *[64->64](SP+120)
R14 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
T0 = xor[32](AX,AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-8761)


###### -9224
Initial RREIL instructions:
T0 = *[64->64](BX+8)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213551)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9224)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+8)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213551)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9224)


###### -8856
Initial RREIL instructions:
R8 = [64](R12)
CX = [64](BX)
DI = [64](BP)
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+96)
BP = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+104)
R12 = [64](T0)
T0 = *[64->64](SP+112)
R13 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->64](SP+120)
R14 = [64](T0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+136)
LTU = <u[64->1](SP,136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-8856)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R8 = [64](R12)
CX = [64](BX)
DI = [64](BP)
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+96)
BP = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+104)
R12 = [64](T0)
T0 = *[64->64](SP+112)
R13 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = *[64->64](SP+120)
R14 = [64](T0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
T0 = xor[32](AX,AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-8856)


###### -9324
Initial RREIL instructions:
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX)
BX = [64](T0)
SI = [32](4213574)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9324)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX)
BX = [64](T0)
SI = [32](4213574)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9324)


###### -8959
Initial RREIL instructions:
R9 = [64](R13)
R8 = [64](R12)
DI = [64](BP)
CX = [64](BX)
T0 = *[64->64](SP+96)
BP = [64](T0)
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+104)
R12 = [64](T0)
T0 = *[64->64](SP+112)
R13 = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+120)
R14 = [64](T0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+136)
LTU = <u[64->1](SP,136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-8959)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [64](R13)
R8 = [64](R12)
DI = [64](BP)
CX = [64](BX)
T0 = *[64->64](SP+96)
BP = [64](T0)
T0 = *[64->64](SP+88)
BX = [64](T0)
T0 = *[64->64](SP+104)
R12 = [64](T0)
T0 = *[64->64](SP+112)
R13 = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+120)
R14 = [64](T0)
T0 = *[64->64](SP+128)
R15 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+136)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,136)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,136)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-8959)


###### -9424
Initial RREIL instructions:
T0 = *[64->64](BX+24)
R14 = [64](T0)
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213832)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9424)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+24)
R14 = [64](T0)
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213832)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9424)


###### -9023
Initial RREIL instructions:
R9 = [64](R13)
DX = [64](AX)
R8 = [64](R12)
CX = [64](BX)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+0) = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9023)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [64](R13)
DX = [64](AX)
R8 = [64](R12)
CX = [64](BX)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+0) = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9023)


###### -481
Initial RREIL instructions:
goto [JUMP] [64](IP+-481)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-481)


###### -9500
Initial RREIL instructions:
T0 = *[64->64](BX+32)
R15 = [64](T0)
T0 = *[64->64](BX+24)
R14 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX)
BX = [64](T0)
SI = [32](4213864)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9500)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+32)
R15 = [64](T0)
T0 = *[64->64](BX+24)
R14 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
DX = [32](5)
DX/32 = [32](0)
T0 = *[64->64](BX)
BX = [64](T0)
SI = [32](4213864)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9500)


###### -9104
Initial RREIL instructions:
R9 = [64](R13)
DX = [64](AX)
R8 = [64](R12)
CX = [64](BX)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+8+0) = [64](R15)
*[64](SP+0) = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9104)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R9 = [64](R13)
DX = [64](AX)
R8 = [64](R12)
CX = [64](BX)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+8+0) = [64](R15)
*[64](SP+0) = [64](R14)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9104)


###### -562
Initial RREIL instructions:
goto [JUMP] [64](IP+-562)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-562)


###### -9589
Initial RREIL instructions:
T0 = *[64->64](BX+40)
CX = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213904)
SI/32 = [32](0)
T0 = *[64->64](BX+32)
R15 = [64](T0)
T0 = *[64->64](BX+24)
R14 = [64](T0)
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+48+0) = [64](CX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9589)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+40)
CX = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213904)
SI/32 = [32](0)
T0 = *[64->64](BX+32)
R15 = [64](T0)
T0 = *[64->64](BX+24)
R14 = [64](T0)
T0 = *[64->64](BX+16)
R13 = [64](T0)
T0 = *[64->64](BX+8)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+48+0) = [64](CX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9589)


###### -9203
Initial RREIL instructions:
T0 = *[64->64](SP+48)
CX = [64](T0)
DX = [64](AX)
R9 = [64](R13)
R8 = [64](R12)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+8+0) = [64](R15)
*[64](SP+0) = [64](R14)
*[64](SP+16+0) = [64](CX)
CX = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9203)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+48)
DX = [64](AX)
R9 = [64](R13)
R8 = [64](R12)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+8+0) = [64](R15)
*[64](SP+0) = [64](R14)
*[64](SP+16+0) = [64](CX)
CX = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9203)


###### -661
Initial RREIL instructions:
goto [JUMP] [64](IP+-661)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-661)


###### -9702
Initial RREIL instructions:
T0 = *[64->64](BX+48)
CX = [64](T0)
T0 = *[64->64](BX+8)
R8 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213944)
SI/32 = [32](0)
T0 = *[64->64](BX+40)
R15 = [64](T0)
T0 = *[64->64](BX+32)
R14 = [64](T0)
T0 = *[64->64](BX+24)
R13 = [64](T0)
T0 = *[64->64](BX+16)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+48+0) = [64](CX)
*[64](SP+56+0) = [64](R8)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9702)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+48)
CX = [64](T0)
T0 = *[64->64](BX+8)
R8 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213944)
SI/32 = [32](0)
T0 = *[64->64](BX+40)
R15 = [64](T0)
T0 = *[64->64](BX+32)
R14 = [64](T0)
T0 = *[64->64](BX+24)
R13 = [64](T0)
T0 = *[64->64](BX+16)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+48+0) = [64](CX)
*[64](SP+56+0) = [64](R8)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9702)


###### -9323
Initial RREIL instructions:
T0 = *[64->64](SP+48)
CX = [64](T0)
T0 = *[64->64](SP+56)
R8 = [64](T0)
DX = [64](AX)
R9 = [64](R12)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+16+0) = [64](R15)
*[64](SP+8+0) = [64](R14)
*[64](SP+24+0) = [64](CX)
CX = [64](BX)
*[64](SP+0) = [64](R13)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9323)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+48)
T0 = *[64->64](SP+56)
R8 = [64](T0)
DX = [64](AX)
R9 = [64](R12)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+16+0) = [64](R15)
*[64](SP+8+0) = [64](R14)
*[64](SP+24+0) = [64](CX)
CX = [64](BX)
*[64](SP+0) = [64](R13)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9323)


###### -781
Initial RREIL instructions:
goto [JUMP] [64](IP+-781)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-781)


###### -9823
Initial RREIL instructions:
T0 = *[64->64](BX+56)
CX = [64](T0)
T0 = *[64->64](BX+16)
R9 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->64](BX+8)
R8 = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213992)
SI/32 = [32](0)
T0 = *[64->64](BX+48)
R15 = [64](T0)
T0 = *[64->64](BX+40)
R14 = [64](T0)
T0 = *[64->64](BX+32)
R13 = [64](T0)
T0 = *[64->64](BX+24)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+48+0) = [64](CX)
*[64](SP+56+0) = [64](R8)
*[64](SP+64+0) = [64](R9)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9823)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX+56)
CX = [64](T0)
T0 = *[64->64](BX+16)
R9 = [64](T0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
T0 = *[64->64](BX+8)
R8 = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213992)
SI/32 = [32](0)
T0 = *[64->64](BX+48)
R15 = [64](T0)
T0 = *[64->64](BX+40)
R14 = [64](T0)
T0 = *[64->64](BX+32)
R13 = [64](T0)
T0 = *[64->64](BX+24)
R12 = [64](T0)
T0 = *[64->64](BX)
BX = [64](T0)
*[64](SP+48+0) = [64](CX)
*[64](SP+56+0) = [64](R8)
*[64](SP+64+0) = [64](R9)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9823)


###### -9451
Initial RREIL instructions:
T0 = *[64->64](SP+48)
CX = [64](T0)
T0 = *[64->64](SP+64)
R9 = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+56)
R8 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+24+0) = [64](R15)
*[64](SP+16+0) = [64](R14)
*[64](SP+32+0) = [64](CX)
CX = [64](BX)
*[64](SP+8+0) = [64](R13)
*[64](SP+0) = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9451)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+48)
T0 = *[64->64](SP+64)
R9 = [64](T0)
DX = [64](AX)
T0 = *[64->64](SP+56)
R8 = [64](T0)
SI = [32](1)
SI/32 = [32](0)
DI = [64](BP)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
*[64](SP+24+0) = [64](R15)
*[64](SP+16+0) = [64](R14)
*[64](SP+32+0) = [64](CX)
CX = [64](BX)
*[64](SP+8+0) = [64](R13)
*[64](SP+0) = [64](R12)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9451)


###### -909
Initial RREIL instructions:
goto [JUMP] [64](IP+-909)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-909)


###### -9479
Initial RREIL instructions:
R8 = [64](CX)
SI = [32](1)
SI/32 = [32](0)
CX = [64](DX)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
DX = [32](4213524)
DX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9479)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
R8 = [64](CX)
SI = [32](1)
SI/32 = [32](0)
CX = [64](DX)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
DX = [32](4213524)
DX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9479)


###### -1163
Initial RREIL instructions:
goto [JUMP] [64](IP+-1163)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-1163)


###### 18
###### 0
Initial RREIL instructions:
T0 = xor[32](R9,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R9 = [32](T0)
R9/32 = [32](0)
T0 = *[64->64](R8)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,31],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](R9,R9)
R9 = [32](T0)
R9/32 = [32](0)
T0 = *[64->64](R8)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](18+IP) else goto [64](IP)


###### -11
###### 0
Initial RREIL instructions:
T0 = [64](R9+1)
LTU = <u[64->1](R9,1)
T1 = xor[64](T0,R9)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R9)
} else {
FLAGS = <u[64->1](T0,R9)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R9)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R9 = [64](T0)
T0 = *[64->64](R8+8*R9)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-11+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R9+1)
if (0) {
} else {
}
R9 = [64](T0)
T0 = *[64->64](R8+8*R9)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-11+IP) else goto [64](IP)


###### -1280
Initial RREIL instructions:
goto [JUMP] [64](IP+-1280)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
goto [JUMP] [64](IP+-1280)


###### 43
Initial RREIL instructions:
T0 = [64](SP-88)
LTU = <u[64->1](SP,88)
LEU = <=u[64->1](SP,88)
LTS = <s[64->1](SP,88)
LES = <=s[64->1](SP,88)
EQ = ==[64->1](SP,88)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,88)
} else {
FLAGS = <u[64->1](SP,88)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = xor[32](R9,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R9 = [32](T0)
R9/32 = [32](0)
goto [JUMP] [64](IP+43)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,31],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-88)
if (0) {
} else {
}
SP = [64](T0)
T0 = xor[32](R9,R9)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
R9 = [32](T0)
R9/32 = [32](0)
goto [JUMP] [64](IP+43)


###### 46
###### 0
Initial RREIL instructions:
AX = [32](R10)
AX/32 = [32](0)
T0 = *[64->64](R8+16)
T1 = [64](AX+T0)
LTU = <u[64->1](AX,T0)
T2 = xor[64](T1,AX)
T3 = xor[64](T1,T0)
T4 = and[64](T2,T3)
FLAGS/11 = <s[64->1](T4,0)
FLAGS/7 = <s[64->1](T1,0)
EQ = ==[64->1](T1,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T1,AX)
} else {
FLAGS = <u[64->1](T1,AX)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,AX)
T6 = xor[64](T6,T0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
AX = [64](T1)
T0 = [32](R10+8)
LTU = <u[32->1](R10,8)
T1 = xor[32](T0,R10)
T2 = xor[32](T0,8)
T3 = and[32](T1,T2)
FLAGS/11 = <s[32->1](T3,0)
FLAGS/7 = <s[32->1](T0,0)
EQ = ==[32->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](T0,R10)
} else {
FLAGS = <u[32->1](T0,R10)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R10)
T5 = xor[32](T5,8)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
R10 = [32](T0)
R10/32 = [32](0)
*[64](R8+0) = [32](R10)
T0 = *[64->64](AX)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+8*R9+0) = [64](AX)
if (FLAGS/6) goto [64](46+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,31],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [32](R10)
AX/32 = [32](0)
T0 = *[64->64](R8+16)
T1 = [64](AX+T0)
if (0) {
} else {
}
AX = [64](T1)
T0 = [32](R10+8)
if (0) {
} else {
}
R10 = [32](T0)
R10/32 = [32](0)
*[64](R8+0) = [32](R10)
T0 = *[64->64](AX)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+8*R9+0) = [64](AX)
if (FLAGS/6) goto [64](46+IP) else goto [64](IP)


###### 36
###### 0
Initial RREIL instructions:
T0 = [64](R9+1)
LTU = <u[64->1](R9,1)
T1 = xor[64](T0,R9)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,R9)
} else {
FLAGS = <u[64->1](T0,R9)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R9)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
R9 = [64](T0)
T0 = [64](R9-10)
LTU = <u[64->1](R9,10)
LEU = <=u[64->1](R9,10)
LTS = <s[64->1](R9,10)
LES = <=s[64->1](R9,10)
EQ = ==[64->1](R9,10)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R9,10)
} else {
FLAGS = <u[64->1](R9,10)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R9)
T5 = xor[64](T5,10)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](36+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](R9+1)
if (0) {
} else {
}
R9 = [64](T0)
T0 = [64](R9-10)
LTS = <s[64->1](R9,10)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](R9,10)
} else {
FLAGS = <u[64->1](R9,10)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,R9)
T5 = xor[64](T5,10)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](36+IP) else goto [64](IP)


###### -45
###### 0
Initial RREIL instructions:
T0 = *[64->32](R8)
R10 = [32](T0)
R10/32 = [32](0)
T0 = [32](R10-48)
LTU = <u[32->1](R10,48)
LEU = <=u[32->1](R10,48)
LTS = <s[32->1](R10,48)
LES = <=s[32->1](R10,48)
EQ = ==[32->1](R10,48)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](R10,48)
} else {
FLAGS = <u[32->1](R10,48)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R10)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
if (FLAGS) goto [64](-45+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](R8)
R10 = [32](T0)
R10/32 = [32](0)
T0 = [32](R10-48)
LTS = <s[32->1](R10,48)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](R10,48)
} else {
FLAGS = <u[32->1](R10,48)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,R10)
T5 = xor[32](T5,48)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
if (FLAGS) goto [64](-45+IP) else goto [64](IP)


###### -43
###### 0
Initial RREIL instructions:
T0 = *[64->64](R8+8)
AX = [64](T0)
T0 = zx[64->64](AX+8)
R10 = [64](T0)
*[64](R8+8+0) = [64](R10)
T0 = *[64->64](AX)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+8*R9+0) = [64](AX)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-43+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](R8+8)
AX = [64](T0)
T0 = zx[64->64](AX+8)
R10 = [64](T0)
*[64](R8+8+0) = [64](R10)
T0 = *[64->64](AX)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+8*R9+0) = [64](AX)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-43+IP) else goto [64](IP)


###### -1376
Initial RREIL instructions:
R8 = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1376)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
R8 = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-1376)


Initial RREIL instructions:
T0 = [64](SP+88)
LTU = <u[64->1](SP,88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+88)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,88)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,88)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 55
###### 0
Initial RREIL instructions:
T0 = [64](SP-216)
LTU = <u[64->1](SP,216)
LEU = <=u[64->1](SP,216)
LTS = <s[64->1](SP,216)
LES = <=s[64->1](SP,216)
EQ = ==[64->1](SP,216)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,216)
} else {
FLAGS = <u[64->1](SP,216)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,216)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+64+0) = [64](R8)
*[64](SP+72+0) = [64](R9)
if (FLAGS/6) goto [64](55+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-216)
if (0) {
} else {
}
SP = [64](T0)
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
*[64](SP+64+0) = [64](R8)
*[64](SP+72+0) = [64](R9)
if (FLAGS/6) goto [64](55+IP) else goto [64](IP)


###### -237
Initial RREIL instructions:
*[64](SP+80+0) = [128](XMM0)
*[64](SP+96+0) = [128](XMM1)
*[64](SP+112+0) = [128](XMM2)
*[64](SP+128+0) = [128](XMM3)
*[64](SP+144+0) = [128](XMM4)
*[64](SP+160+0) = [128](XMM5)
*[64](SP+176+0) = [128](XMM6)
*[64](SP+192+0) = [128](XMM7)
T0 = zx[64->64](SP+224)
AX = [64](T0)
T0 = zx[64->64](SP+8)
R8 = [64](T0)
*[64](SP+8+0) = [32](32)
*[64](SP+12+0) = [32](48)
*[64](SP+16+0) = [64](AX)
T0 = zx[64->64](SP+32)
AX = [64](T0)
*[64](SP+24+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-237)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+80+0) = [128](XMM0)
*[64](SP+96+0) = [128](XMM1)
*[64](SP+112+0) = [128](XMM2)
*[64](SP+128+0) = [128](XMM3)
*[64](SP+144+0) = [128](XMM4)
*[64](SP+160+0) = [128](XMM5)
*[64](SP+176+0) = [128](XMM6)
*[64](SP+192+0) = [128](XMM7)
T0 = zx[64->64](SP+8)
R8 = [64](T0)
*[64](SP+8+0) = [32](32)
*[64](SP+12+0) = [32](48)
*[64](SP+16+0) = [64](AX)
T0 = zx[64->64](SP+32)
AX = [64](T0)
*[64](SP+24+0) = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-237)


Initial RREIL instructions:
T0 = [64](SP+216)
LTU = <u[64->1](SP,216)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,216)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,216)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+216)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,216)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,216)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -10226
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213602)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10226)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4213602)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10226)


###### -9910
Initial RREIL instructions:
DX = [32](4212029)
DX/32 = [32](0)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9910)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [32](4212029)
DX/32 = [32](0)
SI = [64](AX)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9910)


###### -10263
Initial RREIL instructions:
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212051)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10263)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [32](5)
DX/32 = [32](0)
SI = [32](4212051)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10263)


###### -9952
Initial RREIL instructions:
CX = [32](4211760)
CX/32 = [32](0)
SI = [64](AX)
DX = [32](4212071)
DX/32 = [32](0)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9952)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
CX = [32](4211760)
CX/32 = [32](0)
SI = [64](AX)
DX = [32](4212071)
DX/32 = [32](0)
DI = [32](1)
DI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-9952)


###### -10312
Initial RREIL instructions:
T0 = *[64->64](IP+2107897)
BX = [64](T0)
SI = [32](4211800)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10312)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2107897)
BX = [64](T0)
SI = [32](4211800)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
DX = [32](5)
DX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10312)


###### -10148
Initial RREIL instructions:
SI = [64](BX)
DI = [64](AX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10148)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
SI = [64](BX)
DI = [64](AX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10148)


###### -10089
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10089)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10089)


###### 2
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](2+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -7
###### 0
Initial RREIL instructions:
T0 = and[64](BX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-7+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](BX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-7+IP) else goto [64](IP)


###### 326
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+326)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+326)


###### 23
###### 0
Initial RREIL instructions:
T0 = and[64](SI,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](SI)
if (FLAGS/6) goto [64](23+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](SI,SI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](SI)
if (FLAGS/6) goto [64](23+IP) else goto [64](IP)


###### -10081
Initial RREIL instructions:
SI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10081)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10081)


###### 24
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](24+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](24+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -28
###### 0
Initial RREIL instructions:
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-28+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-28+IP) else goto [64](IP)


###### -10554
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10554)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10554)


Initial RREIL instructions:
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -29
###### 0
Initial RREIL instructions:
T0 = and[64](BX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-29+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](BX,BX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](-29+IP) else goto [64](IP)


###### 264
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+264)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+264)


###### 44
###### 0
Initial RREIL instructions:
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](SI)
AX = [64](T0)
if (FLAGS/6) goto [64](44+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = *[64->64](SI)
AX = [64](T0)
if (FLAGS/6) goto [64](44+IP) else goto [64](IP)


###### 56
###### 0
Initial RREIL instructions:
DX = [64](-6148914691236517207)
T0 = [64](AX-DX)
LTU = <u[64->1](AX,DX)
LEU = <=u[64->1](AX,DX)
LTS = <s[64->1](AX,DX)
LES = <=s[64->1](AX,DX)
EQ = ==[64->1](AX,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,DX)
} else {
FLAGS = <u[64->1](AX,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](56+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](-6148914691236517207)
T0 = [64](AX-DX)
LTS = <s[64->1](AX,DX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,DX)
} else {
FLAGS = <u[64->1](AX,DX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS,1)
T1 = xor[1](FLAGS/6,1)
T2 = and[1](T0,T1)
if (T2) goto [64](56+IP) else goto [64](IP)


###### -116
Initial RREIL instructions:
T0 = zx[64->64](AX+1)
DX = [64](T0)
T0 = [6](1)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](T0-1)
T1 = shr[64](DX,T2)
T3 = <u[8->1](64,1)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shr[64](T1,1)
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
T2 = [64](DX)
FLAGS/11 = [1](T2/63)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
DX = [64](T1)
T0 = [64](AX+DX)
LTU = <u[64->1](AX,DX)
T1 = xor[64](T0,AX)
T2 = xor[64](T0,DX)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,DX)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
AX = [64](T0)
*[64](SI+0) = [64](AX)
SI = [64](AX)
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-116)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = zx[64->64](AX+1)
DX = [64](T0)
T0 = [6](1)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](T0-1)
T1 = shr[64](DX,T2)
T3 = <u[8->1](64,1)
T3 = xor[1](T3,1)
if (T3) {
} else {
}
T1 = shr[64](T1,1)
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
} else {
T2 = /=[64->1](T0,0)
if (T2) {
} else {
}
}
DX = [64](T1)
T0 = [64](AX+DX)
if (0) {
} else {
}
AX = [64](T0)
*[64](SI+0) = [64](AX)
SI = [64](AX)
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-116)


###### -147
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](128)
DX/32 = [32](0)
T0 = [64](AX)
if (FLAGS/6) {
T0 = [64](DX)
} else {
}
AX = [64](T0)
*[64](SI+0) = [64](AX)
SI = [64](AX)
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-147)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/6 = ==[64->1](T0,0)
DX = [32](128)
DX/32 = [32](0)
T0 = [64](AX)
if (FLAGS/6) {
T0 = [64](DX)
} else {
}
AX = [64](T0)
*[64](SI+0) = [64](AX)
SI = [64](AX)
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-147)


###### 168
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+168)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+168)


###### -201
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-201)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-201)


###### -10423
Initial RREIL instructions:
DX = [64](BX)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
DI = [64](AX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10423)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](BX)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
DI = [64](AX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10423)


###### -10377
Initial RREIL instructions:
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10377)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-8)
LTS = <s[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10377)


###### 5
###### 0
Initial RREIL instructions:
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](5+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](5+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 104
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+104)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+104)


###### -284
Initial RREIL instructions:
*[64](SP+-16+0) = [64](BX)
*[64](SP+-8+0) = [64](BP)
BX = [64](DI)
T0 = [64](SP-24)
LTU = <u[64->1](SP,24)
LEU = <=u[64->1](SP,24)
LTS = <s[64->1](SP,24)
LES = <=s[64->1](SP,24)
EQ = ==[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
BP = [64](SI)
DI = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-284)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-16+0) = [64](BX)
*[64](SP+-8+0) = [64](BP)
BX = [64](DI)
T0 = [64](SP-24)
LTS = <s[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
BP = [64](SI)
DI = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-284)


###### -10424
Initial RREIL instructions:
DX = [64](BP)
SI = [64](BX)
T0 = *[64->64](SP+16)
BP = [64](T0)
T0 = *[64->64](SP+8)
BX = [64](T0)
DI = [64](AX)
T0 = [64](SP+24)
LTU = <u[64->1](SP,24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-10424)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DX = [64](BP)
SI = [64](BX)
T0 = *[64->64](SP+16)
BP = [64](T0)
T0 = *[64->64](SP+8)
BX = [64](T0)
DI = [64](AX)
T0 = [64](SP+24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-10424)


###### -10633
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10633)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10633)


###### -86
Initial RREIL instructions:
DI = [64](BX)
T0 = zx[64->64](AX+1)
SI = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-86)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
DI = [64](BX)
T0 = zx[64->64](AX+1)
SI = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-86)


###### -10709
Initial RREIL instructions:
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4214287)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10709)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,31],},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
DX = [32](5)
DX/32 = [32](0)
SI = [32](4214287)
SI/32 = [32](0)
T0 = xor[32](DI,DI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [32](T0)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10709)


###### -10380
Initial RREIL instructions:
T0 = *[64->32](IP+2107405)
DI = [32](T0)
DI/32 = [32](0)
CX = [64](AX)
DX = [32](4212182)
DX/32 = [32](0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10380)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,31],},DX:{},CX:{},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](IP+2107405)
DI = [32](T0)
DI/32 = [32](0)
CX = [64](AX)
DX = [32](4212182)
DX/32 = [32](0)
T0 = xor[32](SI,SI)
SI = [32](T0)
SI/32 = [32](0)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10380)


###### -10865
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10865)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10865)


###### -10843
Initial RREIL instructions:
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BP = [64](DI)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-24)
LTU = <u[64->1](SP,24)
LEU = <=u[64->1](SP,24)
LTS = <s[64->1](SP,24)
LES = <=s[64->1](SP,24)
EQ = ==[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10843)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BP = [64](DI)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-24)
LTS = <s[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10843)


###### 119
Initial RREIL instructions:
T0 = *[64->32](BP+0)
BX = [32](T0)
BX/32 = [32](0)
DI = [64](BP)
R12 = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+119)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](BP+0)
BX = [32](T0)
BX/32 = [32](0)
DI = [64](BP)
R12 = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+119)


###### 43
###### 0
Initial RREIL instructions:
T0 = and[32](BX,32)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T0/31)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
BX = [32](T0)
BX/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](43+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[8,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](BX,32)
BX = [32](T0)
BX/32 = [32](0)
T0 = and[32](AX,AX)
FLAGS/6 = ==[32->1](T0,0)
T0 = xor[1](FLAGS/6,1)
T1 = zx[1->8](T0)
AX = [8](T1)
T0 = and[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](43+IP) else goto [64](IP)


###### 15
###### 0
Initial RREIL instructions:
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](15+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](15+IP) else goto [64](IP)


###### 61
###### 0
Initial RREIL instructions:
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](4294967295)
BX/32 = [32](0)
if (FLAGS/6) goto [64](61+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](R12,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](4294967295)
BX/32 = [32](0)
if (FLAGS/6) goto [64](61+IP) else goto [64](IP)


Initial RREIL instructions:
AX = [32](BX)
AX/32 = [32](0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = [64](SP+24)
LTU = <u[64->1](SP,24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
AX = [32](BX)
AX/32 = [32](0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = [64](SP+24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -33
###### 0
Initial RREIL instructions:
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](4294967295)
BX/32 = [32](0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-33+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],[0,7],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[8](AX,AX)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](4294967295)
BX/32 = [32](0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-33+IP) else goto [64](IP)


###### -10974
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10974)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10974)


###### -46
Initial RREIL instructions:
*[64](AX+0) = [32](0)
goto [JUMP] [64](IP+-46)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](AX+0) = [32](0)
goto [JUMP] [64](IP+-46)


###### -10999
Initial RREIL instructions:
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10999)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10999)


###### -74
Initial RREIL instructions:
T0 = *[64->32](AX)
T1 = [32](T0-9)
LTU = <u[32->1](T0,9)
LEU = <=u[32->1](T0,9)
LTS = <s[32->1](T0,9)
LES = <=s[32->1](T0,9)
EQ = ==[32->1](T0,9)
FLAGS/7 = <s[32->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
FLAGS = <=u[32->1](T0,9)
} else {
FLAGS = <u[32->1](T0,9)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[32](T1,T0)
T6 = xor[32](T6,9)
T6 = and[32](T6,16)
FLAGS/4 = /=[32->1](T6,0)
T0 = zx[1->8](FLAGS/6)
BX = [8](T0)
T0 = [32](BX-1)
LTU = <u[32->1](BX,1)
LEU = <=u[32->1](BX,1)
LTS = <s[32->1](BX,1)
LES = <=s[32->1](BX,1)
EQ = ==[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-74)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[8,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](AX)
T1 = [32](T0-9)
FLAGS/6 = ==[32->1](T1,0)
if (0) {
} else {
}
T0 = zx[1->8](FLAGS/6)
BX = [8](T0)
T0 = [32](BX-1)
LTS = <s[32->1](BX,1)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[32->1](T0,0)
if (0) {
FLAGS = <=u[32->1](BX,1)
} else {
FLAGS = <u[32->1](BX,1)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[32](T0,BX)
T5 = xor[32](T5,1)
T5 = and[32](T5,16)
FLAGS/4 = /=[32->1](T5,0)
BX = [32](T0)
BX/32 = [32](0)
goto [JUMP] [64](IP+-74)


###### -10699
Initial RREIL instructions:
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BX = [64](DI)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-24)
LTU = <u[64->1](SP,24)
LEU = <=u[64->1](SP,24)
LTS = <s[64->1](SP,24)
LES = <=s[64->1](SP,24)
EQ = ==[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10699)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-24+0) = [64](BX)
*[64](SP+-16+0) = [64](BP)
BX = [64](DI)
*[64](SP+-8+0) = [64](R12)
T0 = [64](SP-24)
LTS = <s[64->1](SP,24)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,24)
} else {
FLAGS = <u[64->1](SP,24)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10699)


###### 109
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [64](BX)
if (FLAGS/7) goto [64](109+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DI = [64](BX)
if (FLAGS/7) goto [64](109+IP) else goto [64](IP)


###### -10663
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10663)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10663)


###### 69
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](69+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](69+IP) else goto [64](IP)


###### 125
Initial RREIL instructions:
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+125)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+125)


###### 85
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](85+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](85+IP) else goto [64](IP)


###### -11084
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11084)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11084)


###### -11018
Initial RREIL instructions:
T0 = *[64->32](AX)
R12 = [32](T0)
R12/32 = [32](0)
DI = [64](BX)
BP = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11018)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](AX)
R12 = [32](T0)
R12/32 = [32](0)
DI = [64](BX)
BP = [64](AX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11018)


###### 9
###### 0
Initial RREIL instructions:
T0 = and[32](R12,R12)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](9+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],[0,31],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](R12,R12)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](9+IP) else goto [64](IP)


Initial RREIL instructions:
*[64](BP+0+0) = [32](R12)
AX = [32](4294967295)
AX/32 = [32](0)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = [64](SP+24)
LTU = <u[64->1](SP,24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
*[64](BP+0+0) = [32](R12)
AX = [32](4294967295)
AX/32 = [32](0)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = [64](SP+24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -10792
Initial RREIL instructions:
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10792)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
DI = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10792)


###### -10934
Initial RREIL instructions:
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
DX = [32](1)
DX/32 = [32](0)
DI = [32](AX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10934)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
DX = [32](1)
DX/32 = [32](0)
DI = [32](AX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10934)


###### -97
###### 0
Initial RREIL instructions:
T0 = [64](AX-255)
LTU = <u[64->1](AX,255)
LEU = <=u[64->1](AX,255)
LTS = <s[64->1](AX,255)
LES = <=s[64->1](AX,255)
EQ = ==[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-97+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-255)
LTS = <s[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-97+IP) else goto [64](IP)


###### -11110
Initial RREIL instructions:
DI = [64](BX)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = [64](SP+24)
LTU = <u[64->1](SP,24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-11110)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DI = [64](BX)
T0 = *[64->64](SP)
BX = [64](T0)
T0 = *[64->64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP+16)
R12 = [64](T0)
T0 = [64](SP+24)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,24)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,24)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
goto [JUMP] [64](IP+-11110)


###### 16
###### 0
Initial RREIL instructions:
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
if (FLAGS/6) goto [64](16+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](DI,DI)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
if (FLAGS/6) goto [64](16+IP) else goto [64](IP)


###### -10814
Initial RREIL instructions:
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10814)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10814)


###### 7
###### 0
Initial RREIL instructions:
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](7+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](7+IP) else goto [64](IP)


###### 15
###### 0
Initial RREIL instructions:
T0 = *[64->32](BX)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[8](AX/8,1)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](15+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](BX)
AX = [32](T0)
AX/32 = [32](0)
T0 = and[8](AX/8,1)
FLAGS/7 = <s[8->1](T0,0)
FLAGS/6 = ==[8->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](15+IP) else goto [64](IP)


###### -10850
Initial RREIL instructions:
DI = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10850)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
DI = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10850)


###### 9
Initial RREIL instructions:
DI = [64](BX)
DX = [32](1)
DX/32 = [32](0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+9)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
DI = [64](BX)
DX = [32](1)
DX/32 = [32](0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+9)


###### -10880
Initial RREIL instructions:
DI = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10880)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
DI = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10880)


###### 14
###### 0
Initial RREIL instructions:
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
T0 = [64](SP-16)
LTU = <u[64->1](SP,16)
LEU = <=u[64->1](SP,16)
LTS = <s[64->1](SP,16)
LES = <=s[64->1](SP,16)
EQ = ==[64->1](SP,16)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,16)
} else {
FLAGS = <u[64->1](SP,16)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](DI+8)
AX = [64](T0)
T0 = *[64->64](DI+16)
T1 = [64](T0-AX)
LTU = <u[64->1](T0,AX)
LEU = <=u[64->1](T0,AX)
LTS = <s[64->1](T0,AX)
LES = <=s[64->1](T0,AX)
EQ = ==[64->1](T0,AX)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,AX)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](14+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BX = [64](DI)
T0 = [64](SP-16)
if (0) {
} else {
}
SP = [64](T0)
T0 = *[64->64](DI+8)
AX = [64](T0)
T0 = *[64->64](DI+16)
T1 = [64](T0-AX)
LTS = <s[64->1](T0,AX)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,AX)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
if (FLAGS/6) goto [64](14+IP) else goto [64](IP)


###### -10815
Initial RREIL instructions:
T0 = [64](SP+16)
LTU = <u[64->1](SP,16)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
DI = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10815)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+16)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
DI = [64](BX)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
goto [JUMP] [64](IP+-10815)


###### -24
###### 0
Initial RREIL instructions:
T0 = *[64->64](DI+32)
AX = [64](T0)
T0 = *[64->64](DI+40)
T1 = [64](T0-AX)
LTU = <u[64->1](T0,AX)
LEU = <=u[64->1](T0,AX)
LTS = <s[64->1](T0,AX)
LES = <=s[64->1](T0,AX)
EQ = ==[64->1](T0,AX)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,AX)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-24+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](DI+32)
AX = [64](T0)
T0 = *[64->64](DI+40)
T1 = [64](T0-AX)
LTS = <s[64->1](T0,AX)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,AX)
} else {
FLAGS = <u[64->1](T0,AX)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,AX)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-24+IP) else goto [64](IP)


###### -31
###### 0
Initial RREIL instructions:
T0 = *[64->64](DI+72)
T1 = [64](T0-0)
LTU = <u[64->1](T0,0)
LEU = <=u[64->1](T0,0)
LTS = <s[64->1](T0,0)
LES = <=s[64->1](T0,0)
EQ = ==[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-31+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T6:{},T5:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](DI+72)
T1 = [64](T0-0)
LTS = <s[64->1](T0,0)
FLAGS/7 = <s[64->1](T1,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T1,0)
if (0) {
FLAGS = <=u[64->1](T0,0)
} else {
FLAGS = <u[64->1](T0,0)
}
T5 = [8](T1)
FLAGS/2 = ==[1->1](T5/7,T5/6)
FLAGS/2 = ==[1->1](FLAGS/2,T5/5)
FLAGS/2 = ==[1->1](FLAGS/2,T5/4)
FLAGS/2 = ==[1->1](FLAGS/2,T5/3)
FLAGS/2 = ==[1->1](FLAGS/2,T5/2)
FLAGS/2 = ==[1->1](FLAGS/2,T5/1)
FLAGS/2 = ==[1->1](FLAGS/2,T5)
T6 = xor[64](T1,T0)
T6 = xor[64](T6,0)
T6 = and[64](T6,16)
FLAGS/4 = /=[64->1](T6,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-31+IP) else goto [64](IP)


###### -10974
Initial RREIL instructions:
*[64](SP+0) = [32](DX)
*[64](SP+8+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10974)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
*[64](SP+0) = [32](DX)
*[64](SP+8+0) = [64](SI)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-10974)


###### -11117
Initial RREIL instructions:
T0 = *[64->32](SP)
DX = [32](T0)
DX/32 = [32](0)
T0 = *[64->64](SP+8)
SI = [64](T0)
DI = [32](AX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11117)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],[0,31],},FLAGS:{[0,63],},IP:{[0,63],},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](SP)
DX = [32](T0)
DX/32 = [32](0)
T0 = *[64->64](SP+8)
SI = [64](T0)
DI = [32](AX)
DI/32 = [32](0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11117)


###### 12
###### 0
Initial RREIL instructions:
T0 = [64](AX-255)
LTU = <u[64->1](AX,255)
LEU = <=u[64->1](AX,255)
LTS = <s[64->1](AX,255)
LES = <=s[64->1](AX,255)
EQ = ==[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](12+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](AX-255)
LTS = <s[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](12+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->32](BX)
T1 = and[32](T0,239)
FLAGS/11 = [1](0)
FLAGS = [1](0)
FLAGS/7 = [1](T1/31)
FLAGS/6 = ==[32->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
*[64](BX+0) = [32](T1)
*[64](BX+144+0) = [64](AX)
T0 = xor[32](AX,AX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+16)
LTU = <u[64->1](SP,16)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,31],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->32](BX)
*[64](BX+0) = [32](T1)
*[64](BX+144+0) = [64](AX)
T0 = xor[32](AX,AX)
AX = [32](T0)
AX/32 = [32](0)
T0 = [64](SP+16)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,16)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,16)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


###### -11541
Initial RREIL instructions:
*[64](SP+-40+0) = [64](BP)
*[64](SP+-32+0) = [64](R12)
T0 = zx[64->64](IP+2105995)
BP = [64](T0)
T0 = zx[64->64](IP+2105988)
R12 = [64](T0)
*[64](SP+-24+0) = [64](R13)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
*[64](SP+-48+0) = [64](BX)
T0 = [64](SP-56)
LTU = <u[64->1](SP,56)
LEU = <=u[64->1](SP,56)
LTS = <s[64->1](SP,56)
LES = <=s[64->1](SP,56)
EQ = ==[64->1](SP,56)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,56)
} else {
FLAGS = <u[64->1](SP,56)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,56)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = [64](BP-R12)
LTU = <u[64->1](BP,R12)
LEU = <=u[64->1](BP,R12)
LTS = <s[64->1](BP,R12)
LES = <=s[64->1](BP,R12)
EQ = ==[64->1](BP,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BP,R12)
} else {
FLAGS = <u[64->1](BP,R12)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BP)
T5 = xor[64](T5,R12)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
R13 = [32](DI)
R13/32 = [32](0)
R14 = [64](SI)
T0 = [6](3)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](T0-1)
T1 = shrs[64](BP,T2)
T3 = <u[8->1](64,3)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shrs[64](T1,1)
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = [1](0)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
BP = [64](T1)
R15 = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11541)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],[0,31],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T3:{},T2:{},T1:{[0,63],[0,7],},T0:{},}

RREIL instructions after LV (greedy):
*[64](SP+-40+0) = [64](BP)
*[64](SP+-32+0) = [64](R12)
T0 = zx[64->64](IP+2105995)
BP = [64](T0)
T0 = zx[64->64](IP+2105988)
R12 = [64](T0)
*[64](SP+-24+0) = [64](R13)
*[64](SP+-16+0) = [64](R14)
*[64](SP+-8+0) = [64](R15)
*[64](SP+-48+0) = [64](BX)
T0 = [64](SP-56)
if (0) {
} else {
}
SP = [64](T0)
T0 = [64](BP-R12)
LTS = <s[64->1](BP,R12)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
if (0) {
FLAGS = <=u[64->1](BP,R12)
} else {
FLAGS = <u[64->1](BP,R12)
}
T5 = xor[64](T0,BP)
T5 = xor[64](T5,R12)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BP = [64](T0)
R13 = [32](DI)
R13/32 = [32](0)
R14 = [64](SI)
T0 = [6](3)
T0/6 = [58](0)
T2 = <=u[64->1](T0,0)
T2 = xor[1](T2,1)
if (T2) {
T2 = [64](T0-1)
T1 = shrs[64](BP,T2)
T3 = <u[8->1](64,3)
T3 = xor[1](T3,1)
if (T3) {
FLAGS = [1](T1)
} else {
FLAGS = arbitrary[1]
}
T1 = shrs[64](T1,1)
} else {
}
T2 = ==[64->1](T0,1)
if (T2) {
FLAGS/11 = [1](0)
} else {
T2 = /=[64->1](T0,0)
if (T2) {
FLAGS/11 = arbitrary[1]
} else {
}
}
FLAGS/7 = <s[64->1](T1,0)
FLAGS/6 = ==[64->1](T1,0)
T2 = [8](T1)
FLAGS/2 = ==[1->1](T2/7,T2/6)
FLAGS/2 = ==[1->1](FLAGS/2,T2/5)
FLAGS/2 = ==[1->1](FLAGS/2,T2/4)
FLAGS/2 = ==[1->1](FLAGS/2,T2/3)
FLAGS/2 = ==[1->1](FLAGS/2,T2/2)
FLAGS/2 = ==[1->1](FLAGS/2,T2/1)
FLAGS/2 = ==[1->1](FLAGS/2,T2)
BP = [64](T1)
R15 = [64](DX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](IP+-11541)


###### 28
###### 0
Initial RREIL instructions:
T0 = and[64](BP,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](28+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = and[64](BP,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](28+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
DX = [64](R15)
SI = [64](R14)
DI = [32](R13)
DI/32 = [32](0)
T1 = *[64->64](R12+8*BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](T1)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],[0,31],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{},SI:{},DX:{},CX:{[0,63],},BX:{[0,31],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](BX,BX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
BX = [32](T0)
BX/32 = [32](0)
DX = [64](R15)
SI = [64](R14)
DI = [32](R13)
DI/32 = [32](0)
T1 = *[64->64](R12+8*BX)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](T1)


###### -22
###### 0
Initial RREIL instructions:
T0 = [64](BX+1)
LTU = <u[64->1](BX,1)
T1 = xor[64](T0,BX)
T2 = xor[64](T0,1)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,BX)
} else {
FLAGS = <u[64->1](T0,BX)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,1)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
T0 = [64](BX-BP)
LTU = <u[64->1](BX,BP)
LEU = <=u[64->1](BX,BP)
LTS = <s[64->1](BX,BP)
LES = <=s[64->1](BX,BP)
EQ = ==[64->1](BX,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,BP)
} else {
FLAGS = <u[64->1](BX,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-22+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](BX+1)
if (0) {
} else {
}
BX = [64](T0)
T0 = [64](BX-BP)
LTS = <s[64->1](BX,BP)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,BP)
} else {
FLAGS = <u[64->1](BX,BP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,BP)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-22+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = *[64->64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP+16)
BP = [64](T0)
T0 = *[64->64](SP+24)
R12 = [64](T0)
T0 = *[64->64](SP+32)
R13 = [64](T0)
T0 = *[64->64](SP+40)
R14 = [64](T0)
T0 = *[64->64](SP+48)
R15 = [64](T0)
T0 = [64](SP+56)
LTU = <u[64->1](SP,56)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,56)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,56)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{},R14:{},R13:{},R12:{},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP+16)
BP = [64](T0)
T0 = *[64->64](SP+24)
R12 = [64](T0)
T0 = *[64->64](SP+32)
R13 = [64](T0)
T0 = *[64->64](SP+40)
R14 = [64](T0)
T0 = *[64->64](SP+48)
R15 = [64](T0)
T0 = [64](SP+56)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,56)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,56)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)


###### 10
###### 0
Initial RREIL instructions:
T0 = *[64->64](IP+2106297)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](10+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](IP+2106297)
AX = [64](T0)
T0 = and[64](AX,AX)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
if (FLAGS/6) goto [64](10+IP) else goto [64](IP)


###### -11062
Initial RREIL instructions:
T0 = *[64->64](AX)
DX = [64](T0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-11062)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,31],},DX:{},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](AX)
DX = [64](T0)
T0 = xor[32](SI,SI)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
SI = [32](T0)
SI/32 = [32](0)
goto [JUMP] [64](IP+-11062)


###### -11
Initial RREIL instructions:
T0 = xor[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
goto [JUMP] [64](IP+-11)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,31],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = xor[32](DX,DX)
FLAGS/7 = <s[32->1](T0,0)
FLAGS/6 = ==[32->1](T0,0)
T1 = [8](T0)
FLAGS/2 = ==[1->1](T1/7,T1/6)
FLAGS/2 = ==[1->1](FLAGS/2,T1/5)
FLAGS/2 = ==[1->1](FLAGS/2,T1/4)
FLAGS/2 = ==[1->1](FLAGS/2,T1/3)
FLAGS/2 = ==[1->1](FLAGS/2,T1/2)
FLAGS/2 = ==[1->1](FLAGS/2,T1/1)
FLAGS/2 = ==[1->1](FLAGS/2,T1)
FLAGS = [1](0)
FLAGS/11 = [1](0)
FLAGS/4 = arbitrary[1]
DX = [32](T0)
DX/32 = [32](0)
goto [JUMP] [64](IP+-11)


###### 25
###### 0
Initial RREIL instructions:
T0 = [64](BP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SP)
T0 = [64](BX)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-8)
LTU = <u[64->1](SP,8)
LEU = <=u[64->1](SP,8)
LTS = <s[64->1](SP,8)
LES = <=s[64->1](SP,8)
EQ = ==[64->1](SP,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](SP,8)
} else {
FLAGS = <u[64->1](SP,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](IP+2105808)
AX = [64](T0)
T0 = [64](AX-255)
LTU = <u[64->1](AX,255)
LEU = <=u[64->1](AX,255)
LTS = <s[64->1](AX,255)
LES = <=s[64->1](AX,255)
EQ = ==[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](25+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
SP = [64](SP-8)
*[64](SP) = [64](T0)
BP = [64](SP)
SP = [64](SP-8)
*[64](SP) = [64](T0)
T0 = [64](SP-8)
if (0) {
} else {
}
SP = [64](T0)
T0 = *[64->64](IP+2105808)
AX = [64](T0)
T0 = [64](AX-255)
LTS = <s[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
if (FLAGS/6) goto [64](25+IP) else goto [64](IP)


Initial RREIL instructions:
BX = [32](6315552)
BX/32 = [32](0)
T0 = [64](BX-8)
LTU = <u[64->1](BX,8)
LEU = <=u[64->1](BX,8)
LTS = <s[64->1](BX,8)
LES = <=s[64->1](BX,8)
EQ = ==[64->1](BX,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,8)
} else {
FLAGS = <u[64->1](BX,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](AX)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
BX = [32](6315552)
BX/32 = [32](0)
T0 = [64](BX-8)
LTS = <s[64->1](BX,8)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](BX,8)
} else {
FLAGS = <u[64->1](BX,8)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,BX)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
BX = [64](T0)
SP = [64](SP-8)
*[64](SP) = [64](IP)
goto [CALL] [64](AX)


###### -15
###### 0
Initial RREIL instructions:
T0 = *[64->64](BX)
AX = [64](T0)
T0 = [64](AX-255)
LTU = <u[64->1](AX,255)
LEU = <=u[64->1](AX,255)
LTS = <s[64->1](AX,255)
LES = <=s[64->1](AX,255)
EQ = ==[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-15+IP) else goto [64](IP)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},LTS:{},T5:{},T4:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = *[64->64](BX)
AX = [64](T0)
T0 = [64](AX-255)
LTS = <s[64->1](AX,255)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/11 = xor[1](LTS,FLAGS/7)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](AX,255)
} else {
FLAGS = <u[64->1](AX,255)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,AX)
T5 = xor[64](T5,255)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
T0 = xor[1](FLAGS/6,1)
if (T0) goto [64](-15+IP) else goto [64](IP)


Initial RREIL instructions:
T0 = [64](SP+8)
LTU = <u[64->1](SP,8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
EQ = ==[64->1](T0,0)
LTS = xor[1](FLAGS/7,FLAGS/11)
LEU = or[1](LTU,EQ)
LES = or[1](LTS,EQ)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{},AX:{[0,63],},FLAGS:{[12,63],[8,10],[5,5],[3,3],[1,1],},IP:{[0,63],},T5:{},T4:{},T3:{},T2:{},T1:{},T0:{},}

RREIL instructions after LV (greedy):
T0 = [64](SP+8)
T1 = xor[64](T0,SP)
T2 = xor[64](T0,8)
T3 = and[64](T1,T2)
FLAGS/11 = <s[64->1](T3,0)
FLAGS/7 = <s[64->1](T0,0)
FLAGS/6 = ==[64->1](T0,0)
if (0) {
FLAGS = <=u[64->1](T0,SP)
} else {
FLAGS = <u[64->1](T0,SP)
}
T4 = [8](T0)
FLAGS/2 = ==[1->1](T4/7,T4/6)
FLAGS/2 = ==[1->1](FLAGS/2,T4/5)
FLAGS/2 = ==[1->1](FLAGS/2,T4/4)
FLAGS/2 = ==[1->1](FLAGS/2,T4/3)
FLAGS/2 = ==[1->1](FLAGS/2,T4/2)
FLAGS/2 = ==[1->1](FLAGS/2,T4/1)
FLAGS/2 = ==[1->1](FLAGS/2,T4)
T5 = xor[64](T0,SP)
T5 = xor[64](T5,8)
T5 = and[64](T5,16)
FLAGS/4 = /=[64->1](T5,0)
SP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BX = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)
BP = [64](T0)
T0 = *[64->64](SP)
SP = [64](SP+8)


Initial RREIL instructions:
T0 = *[64->64](SP)
SP = [64](SP+8)
T0/64 = [0](0)


Liveness greedy state:
{XMM15:{[0,255],},XMM14:{[0,255],},XMM13:{[0,255],},XMM12:{[0,255],},XMM11:{[0,255],},XMM10:{[0,255],},XMM9:{[0,255],},XMM8:{[0,255],},XMM7:{[0,255],},XMM6:{[0,255],},XMM5:{[0,255],},XMM4:{[0,255],},XMM3:{[0,255],},XMM2:{[0,255],},XMM1:{[0,255],},XMM0:{[0,255],},MM7:{[0,63],},MM6:{[0,63],},MM5:{[0,63],},MM4:{[0,63],},MM3:{[0,63],},MM2:{[0,63],},MM1:{[0,63],},MM0:{[0,63],},ST7:{[0,79],},ST6:{[0,79],},ST5:{[0,79],},ST4:{[0,79],},ST3:{[0,79],},ST2:{[0,79],},ST1:{[0,79],},ST0:{[0,79],},GS:{[0,63],},FS:{[0,63],},ES:{[0,63],},SS:{[0,63],},DS:{[0,63],},CS:{[0,63],},R15:{[0,63],},R14:{[0,63],},R13:{[0,63],},R12:{[0,63],},R11:{[0,63],},R10:{[0,63],},R9:{[0,63],},R8:{[0,63],},BP:{[0,63],},SP:{[0,63],},DI:{[0,63],},SI:{[0,63],},DX:{[0,63],},CX:{[0,63],},BX:{[0,63],},AX:{[0,63],},FLAGS:{[0,63],},IP:{[0,63],},}

RREIL instructions after LV (greedy):
T0 = *[64->64](SP)
SP = [64](SP+8)


Statistics:
Number of native instructions: 2742
Number of lines without LV analysis: 15486
Number of lines with LV analysis: 11899
Reduction: 23.162857%
Time needed for the decoding and the translation to RREIL: 0.082421 seconds
Time needed for the lv analysis: 3.292625
 seconds